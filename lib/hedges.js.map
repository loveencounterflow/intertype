{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/hedges.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ debug }                 = GUY.trm.get_loggers 'INTERTYPE/hedges'\n{ rpr   }                 = GUY.trm\n#...........................................................................................................\nE                         = require './errors'\nH                         = require './helpers'\nL                         = @\nPMATCH                    = require 'picomatch'\n\n\n#===========================================================================================================\n@defaults =\n  combinator_cfg:\n    hedgematch:     '*'\n\n\n#===========================================================================================================\nclass @Intertype_hedges extends GUY.props.Strict_owner\n\n  #---------------------------------------------------------------------------------------------------------\n  @catchall_group: 'other'\n  @hedges: GUY.lft.freeze []\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    super()\n    @cfg        = { L.defaults.combinator_cfg..., cfg..., }\n    # @hedgepaths = new GUY.props.Strict_owner()\n    # for groupname from @_get_groupnames()\n    #   compiled_hedges           = @_compile_hedges groupname, @constructor.hedges\n    #   hedgepaths                = @get_hedgepaths compiled_hedges\n    #   @hedgepaths[ groupname ]  = @_reduce_hedgepaths hedgepaths\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _combine: ( terms ) => ( ( v for _, v of x ) for x in combinate terms )\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_hedges: ( groupname, hedges ) ->\n    R               = []\n    catchall_group  = @constructor.catchall_group\n    for hedge in hedges\n      unless catchall_group in hedge.groups\n        continue unless groupname in hedge.groups\n      target = []\n      R.push target\n      for termgroup in hedge.terms\n        # continue if termgroup? and @_has_conflicting_hedge_matchers\n        if Array.isArray termgroup\n          target.splice target.length - 1, 0, ( @get_hedgepaths termgroup )...\n        else\n          target.push termgroup\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  get_hedgepaths: ( compiled_hedges ) ->\n    throw new E.Intertype_ETEMPTBD '^intertype.hedges@1^', \"not implemented: get_hedgepaths()\"\n    return [] unless ( hedgematch = @cfg.hedgematch )?\n    R = ( x.flat() for x in @_combine compiled_hedges )\n    unless hedgematch is '*'\n      for idx in [ R.length - 1 .. 0 ] by -1\n        delete R[ idx ] unless @_match_hedgepath R[ idx ], hedgematch\n    R.sort()\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _match_hedgepath: ( hedgepath, globpattern ) -> PMATCH.isMatch hedgepath, globpattern\n  _get_groupnames: -> GUY.lft.freeze new Set ( h.groups for h in @constructor.hedges ).flat()\n\n  #---------------------------------------------------------------------------------------------------------\n  @hedges: GUY.lft.freeze [\n    # { terms: [ null, ],                                                     groups: [ 'bottom',       ], }\n    { terms: [ null, 'optional', ],                                         groups: [ 'other',        ], }\n    { terms: [\n      null,\n      [ [ null, 'empty', 'nonempty', ]\n        [ 'list_of', 'set_of', ]\n        [ null, 'optional', ]\n        ], ],                                                               groups: [ 'other',        ], }\n    { terms: [ null, 'empty', 'nonempty', ],                                groups: [ 'collection',   ], }\n    { terms: [ null, 'positive0', 'positive1', 'negative0', 'negative1', ], groups: [ 'number',       ], }\n    ]\n\n  # #---------------------------------------------------------------------------------------------------------\n  # @groups_of_groups:\n  #   collection:       [ ]\n\n  #---------------------------------------------------------------------------------------------------------\n  ### TAINT tack onto prototype as hidden ###\n  _hedgemethods: GUY.lft.freeze new GUY.props.Strict_owner target:\n    optional: ( x ) ->\n      # debug GUY.trm.reverse GUY.trm.yellow '^optional@453^', (rpr x), ( not x? ), H.signals.return_true\n      return H.signals.return_true unless x?\n      return true\n    #.......................................................................................................\n    or:         ( x ) -> x is true\n    #.......................................................................................................\n    ### TAINT use `length` or `size` or custom method ###\n    empty:      ( x ) -> ( H.size_of x, null ) is 0\n    nonempty:   ( x ) -> ( H.size_of x, null ) isnt 0\n    #.......................................................................................................\n    list_of:    ( x ) ->\n      return H.signals.advance unless Array.isArray x\n      return H.signals.process_list_elements\n    set_of:     ( x ) ->\n      return H.signals.advance unless x instanceof Set\n      return H.signals.process_set_elements\n    #.......................................................................................................\n    positive0:  ( x ) -> x >= 0\n    positive1:  ( x ) -> x >  0\n    negative0:  ( x ) -> x <= 0\n    negative1:  ( x ) -> x <  0\n\n\n"
  ]
}