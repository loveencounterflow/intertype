{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/hedges.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ debug }                 = GUY.trm.get_loggers 'INTERTYPE/hedges'\n{ rpr   }                 = GUY.trm\n#...........................................................................................................\nE                         = require './errors'\nH                         = require './helpers'\nL                         = @\n\n\n#===========================================================================================================\n@defaults =\n  combinator_cfg:\n    hedgematch:     '*'\n\n\n#===========================================================================================================\nclass @Intertype_hedges extends GUY.props.Strict_owner\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    super()\n    @cfg        = { L.defaults.combinator_cfg..., cfg..., }\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  get_hedgepaths: ( compiled_hedges ) ->\n    throw new E.Intertype_ETEMPTBD '^intertype.hedges@1^', \"not implemented: get_hedgepaths()\"\n    return [] unless ( hedgematch = @cfg.hedgematch )?\n    R = ( x.flat() for x in @_combine compiled_hedges )\n    unless hedgematch is '*'\n      for idx in [ R.length - 1 .. 0 ] by -1\n        delete R[ idx ] unless @_match_hedgepath R[ idx ], hedgematch\n    R.sort()\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _match_hedgepath: ( hedgepath, globpattern ) -> PMATCH.isMatch hedgepath, globpattern\n\n  #---------------------------------------------------------------------------------------------------------\n  ### TAINT tack onto prototype as hidden ###\n  _hedgemethods: new GUY.props.Strict_owner freeze: true, target:\n    optional:   ( x ) -> if x? then true else H.signals.return_true\n    #.......................................................................................................\n    or:         ( x ) -> x is true\n    of:         ( x ) -> H.signals.element_mode\n    #.......................................................................................................\n    empty:      ( x ) -> ( R = H.size_of x, null )? and R is 0\n    nonempty:   ( x ) -> ( R = H.size_of x, null )? and R isnt 0\n    #.......................................................................................................\n    positive0:  ( x ) -> ( x is +Infinity ) or ( ( Number.isFinite x ) and ( x >= 0 ) )\n    positive1:  ( x ) -> ( x is +Infinity ) or ( ( Number.isFinite x ) and ( x >  0 ) )\n    negative0:  ( x ) -> ( x is -Infinity ) or ( ( Number.isFinite x ) and ( x <= 0 ) )\n    negative1:  ( x ) -> ( x is -Infinity ) or ( ( Number.isFinite x ) and ( x <  0 ) )\n\n\n"
  ]
}