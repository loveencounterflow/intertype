{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/hedges.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ debug }                 = GUY.trm.get_loggers 'INTERTYPE/hedges'\n{ rpr   }                 = GUY.trm\n#...........................................................................................................\nE                         = require './errors'\nH                         = require './helpers'\ncombinate                 = ( require \"combinate\" ).default\n\n\n#===========================================================================================================\nclass @Combinator extends GUY.props.Strict_owner\n\n  #---------------------------------------------------------------------------------------------------------\n  @catchall_group: 'other'\n  @hedges: GUY.lft.freeze []\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ->\n    super()\n    @hedgepaths = new GUY.props.Strict_owner()\n    for groupname from @_get_groupnames()\n      compiled_hedges           = @_compile_hedges groupname, @constructor.hedges\n      hedgepaths                = @get_hedgepaths compiled_hedges\n      @hedgepaths[ groupname ]  = @_reduce_hedgepaths hedgepaths\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _combine: ( terms ) => ( ( v for _, v of x ) for x in combinate terms )\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_hedges: ( groupname, hedges ) ->\n    R               = []\n    catchall_group  = @constructor.catchall_group\n    for hedge in hedges\n      unless catchall_group in hedge.groups\n        continue unless groupname in hedge.groups\n      target = []\n      R.push target\n      for termgroup in hedge.terms\n        # continue if termgroup? and @_has_conflicting_hedge_matchers\n        if Array.isArray termgroup\n          target.splice target.length - 1, 0, ( @get_hedgepaths termgroup )...\n        else\n          target.push termgroup\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  get_hedgepaths: ( compiled_hedges ) ->\n    R = ( x.flat() for x in @_combine compiled_hedges )\n    R.sort()\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _reduce_hedgepaths: ( combinations ) -> ( ( e for e in hp when e? ) for hp in combinations )\n\n  #---------------------------------------------------------------------------------------------------------\n  _get_groupnames: -> GUY.lft.freeze new Set ( h.groups for h in @constructor.hedges ).flat()\n\n\n\n#===========================================================================================================\nclass @Intertype_hedge_combinator extends @Combinator\n\n  #---------------------------------------------------------------------------------------------------------\n  @hedges: GUY.lft.freeze [\n    { terms: [ null, 'optional', ],                                         groups: [ 'other',        ], }\n    { terms: [\n      null,\n      [ [ null, 'empty', 'nonempty', ]\n        [ 'list_of', 'set_of', ]\n        [ null, 'optional', ]\n        ], ],                                                               groups: [ 'other',        ], }\n    { terms: [ null, 'empty', 'nonempty', ],                                groups: [ 'collection',   ], }\n    { terms: [ null, 'positive0', 'positive1', 'negative0', 'negative1', ], groups: [ 'number',       ], }\n    ]\n\n  # #---------------------------------------------------------------------------------------------------------\n  # @groups_of_groups:\n  #   collection:       [ ]\n\n  #---------------------------------------------------------------------------------------------------------\n  ### TAINT tack onto prototype as hidden ###\n  _hedgemethods: GUY.lft.freeze new GUY.props.Strict_owner target:\n    optional:   ( x ) =>\n      # debug CND.reverse CND.yellow '^optional@453^', rpr x\n      return H.signals.true_and_break unless x?\n      return true\n    #.......................................................................................................\n    ### TAINT use `length` or `size` or custom method ###\n    empty:      ( x ) => ( H.size_of x, null ) is 0\n    nonempty:   ( x ) => ( H.size_of x, null ) isnt 0\n    #.......................................................................................................\n    ### TAINT this is wrong, must test ensuing arguments against each element in collection ###\n    list_of:    ( x ) =>\n      return H.signals.false_and_break unless Array.isArray x\n      return H.signals.process_list_elements\n    set_of:     ( x ) =>\n      return H.signals.false_and_break unless x instanceof Set\n      return H.signals.process_set_elements\n    #.......................................................................................................\n    positive0:  ( x ) =>\n      # debug CND.reverse CND.yellow '^positive0@453^', rpr x\n      x >= 0\n    positive1:  ( x ) => x >  0\n    negative0:  ( x ) => x <= 0\n    negative1:  ( x ) => x <  0\n\n  # #---------------------------------------------------------------------------------------------------------\n  # _match_hedge_and_type_cfg: ( hedge, type_cfg ) ->\n  #   unless @constructor.hedges_matchers_are_orthogonal\n  #     name = @constructor.name\n  #     throw new E.Intertype_not_implemented '^intertype.hedges@1^', \\\n  #       \"non-orthogonal hedge matchers not implemented, got #{name}.hedges_matchers_are_orthogonal == false\"\n  #   return true unless property?\n  #   for property of hedge.match\n  #     return false unless type_cfg[ property ]\n  #   return true\n\n"
  ]
}