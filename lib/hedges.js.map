{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/hedges.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\n# njs_util                  = require 'util'\nnjs_path                  = require 'path'\n# njs_fs                    = require 'fs'\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr.bind CND\nbadge                     = 'INTERTYPE/combinator'\ndebug                     = CND.get_logger 'debug',     badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nGUY                       = require 'guy'\nE                         = require './errors'\nH                         = require './helpers'\ncombinate                 = ( require \"combinate\" ).default\n\n\n#===========================================================================================================\nclass @Combinator extends GUY.props.Strict_owner\n\n  #---------------------------------------------------------------------------------------------------------\n  @_hedges: GUY.lft.freeze []\n\n  #---------------------------------------------------------------------------------------------------------\n  _combine: ( terms ) => ( ( v for _, v of x ) for x in combinate terms )\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_hedges: ( hedges, type_cfg ) ->\n    R = []\n    for hedge in hedges\n      continue unless @_match_hedge_and_type_cfg hedge, type_cfg\n      # termses = [ hedge.terms..., ]\n      target = []\n      R.push target\n      for termgroup in hedge.terms\n        if Array.isArray termgroup\n          target.splice target.length - 1, 0, ( @get_hedgepaths termgroup )...\n        else\n          target.push termgroup\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  get_hedgepaths: ( compiled_hedges ) ->\n    R = ( x.flat() for x in @_combine compiled_hedges )\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _reduce_hedgepaths: ( combinations ) -> ( ( e for e in hp when e? ) for hp in combinations )\n\n\n#===========================================================================================================\nclass @Intertype_hedge_combinator extends @Combinator\n\n  #---------------------------------------------------------------------------------------------------------\n  @hedges: GUY.lft.freeze [\n    { terms: [ null, 'optional', ],                                         match: { all: true, }, }\n    { terms: [\n      null,\n      [ [ null, 'empty', 'nonempty', ]\n        [ 'list_of', 'set_of', ]\n        [ null, 'optional', ]\n        ], ],                                                               match: { all: true, }, }\n    { terms: [ null, 'empty', 'nonempty', ],                                match: { isa_collection: true, }, }\n    { terms: [ null, 'positive0', 'positive1', 'negative0', 'negative1', ], match: { isa_numeric: true, }, }\n    ]\n\n  #---------------------------------------------------------------------------------------------------------\n  ### TAINT tack onto prototype as hidden ###\n  _signals: GUY.lft.freeze new GUY.props.Strict_owner target:\n    true_and_break:         Symbol 'true_and_break'\n    false_and_break:        Symbol 'false_and_break'\n    process_list_elements:  Symbol 'process_list_elements'\n    processd_set_elements:  Symbol 'processd_set_elements'\n\n  #---------------------------------------------------------------------------------------------------------\n  ### TAINT tack onto prototype as hidden ###\n  _hedgemethods: GUY.lft.freeze new GUY.props.Strict_owner target:\n    optional:   ( x ) ->\n      return @_signals.true_and_break unless x?\n      return true\n    #.......................................................................................................\n    ### TAINT use `length` or `size` or custom method ###\n    empty:      ( x ) -> return ( @_size_of x ) is 0\n    nonempty:   ( x ) -> return ( @_size_of x ) isnt 0\n    #.......................................................................................................\n    ### TAINT this is wrong, must test ensuing arguments against each element in collection ###\n    list_of:    ( x ) ->\n      return @_signals.false_and_break unless Array.isArray x\n      return @_signals.process_list_elements\n    set_of:     ( x ) ->\n      return @_signals.false_and_break unless x instanceof Set\n      return @_signals.processd_set_elements\n    #.......................................................................................................\n    positive0:  ( x ) -> x >= 0\n    positive1:  ( x ) -> x >  0\n    negative0:  ( x ) -> x <= 0\n    negative1:  ( x ) -> x <  0\n\n  #---------------------------------------------------------------------------------------------------------\n  _match_hedge_and_type_cfg: ( hedge, type_cfg ) ->\n    for property, value of hedge.match\n      return true if property is 'all'\n      return false unless type_cfg[ property ]\n    return true\n\n"
  ]
}