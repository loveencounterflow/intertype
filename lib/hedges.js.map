{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/hedges.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\n# njs_util                  = require 'util'\nnjs_path                  = require 'path'\n# njs_fs                    = require 'fs'\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr.bind CND\nbadge                     = 'INTERTYPE/combinator'\ndebug                     = CND.get_logger 'debug',     badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nGUY                       = require 'guy'\nE                         = require './errors'\nH                         = require './helpers'\ncombinate                 = ( require \"combinate\" ).default\n\n\n#===========================================================================================================\nclass @Combinator extends GUY.props.Strict_owner\n\n  #---------------------------------------------------------------------------------------------------------\n  @catchall_group: 'other'\n  @hedges: GUY.lft.freeze []\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ->\n    super()\n    @hedgepaths = {}\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _combine: ( terms ) => ( ( v for _, v of x ) for x in combinate terms )\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_hedges: ( groupname, hedges ) ->\n    R               = []\n    catchall_group  = @constructor.catchall_group\n    for hedge in hedges\n      unless catchall_group in hedge.groups\n        continue unless groupname in hedge.groups\n      target = []\n      R.push target\n      for termgroup in hedge.terms\n        # continue if termgroup? and @_has_conflicting_hedge_matchers\n        if Array.isArray termgroup\n          target.splice target.length - 1, 0, ( @get_hedgepaths termgroup )...\n        else\n          target.push termgroup\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  get_hedgepaths: ( compiled_hedges ) ->\n    R = ( x.flat() for x in @_combine compiled_hedges )\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _reduce_hedgepaths: ( combinations ) -> ( ( e for e in hp when e? ) for hp in combinations )\n\n  #---------------------------------------------------------------------------------------------------------\n  _get_groupnames: -> GUY.lft.freeze new Set ( h.groups for h in @constructor.hedges ).flat()\n\n\n\n#===========================================================================================================\nclass @Intertype_hedge_combinator extends @Combinator\n\n  #---------------------------------------------------------------------------------------------------------\n  @hedges: GUY.lft.freeze [\n    { terms: [ null, 'optional', ],                                         groups: [ 'other',        ], }\n    { terms: [\n      null,\n      [ [ null, 'empty', 'nonempty', ]\n        [ 'list_of', 'set_of', ]\n        [ null, 'optional', ]\n        ], ],                                                               groups: [ 'other',        ], }\n    { terms: [ null, 'empty', 'nonempty', ],                                groups: [ 'collections',  ], }\n    { terms: [ null, 'positive0', 'positive1', 'negative0', 'negative1', ], groups: [ 'numbers',      ], }\n    ]\n\n  #---------------------------------------------------------------------------------------------------------\n  ### TAINT tack onto prototype as hidden ###\n  _signals: GUY.lft.freeze new GUY.props.Strict_owner target:\n    true_and_break:         Symbol 'true_and_break'\n    false_and_break:        Symbol 'false_and_break'\n    process_list_elements:  Symbol 'process_list_elements'\n    processd_set_elements:  Symbol 'processd_set_elements'\n\n  #---------------------------------------------------------------------------------------------------------\n  ### TAINT tack onto prototype as hidden ###\n  _hedgemethods: GUY.lft.freeze new GUY.props.Strict_owner target:\n    optional:   ( x ) ->\n      return @_signals.true_and_break unless x?\n      return true\n    #.......................................................................................................\n    ### TAINT use `length` or `size` or custom method ###\n    empty:      ( x ) -> return ( @_size_of x ) is 0\n    nonempty:   ( x ) -> return ( @_size_of x ) isnt 0\n    #.......................................................................................................\n    ### TAINT this is wrong, must test ensuing arguments against each element in collection ###\n    list_of:    ( x ) ->\n      return @_signals.false_and_break unless Array.isArray x\n      return @_signals.process_list_elements\n    set_of:     ( x ) ->\n      return @_signals.false_and_break unless x instanceof Set\n      return @_signals.processd_set_elements\n    #.......................................................................................................\n    positive0:  ( x ) -> x >= 0\n    positive1:  ( x ) -> x >  0\n    negative0:  ( x ) -> x <= 0\n    negative1:  ( x ) -> x <  0\n\n  # #---------------------------------------------------------------------------------------------------------\n  # _match_hedge_and_type_cfg: ( hedge, type_cfg ) ->\n  #   unless @constructor.hedges_matchers_are_orthogonal\n  #     name = @constructor.name\n  #     throw new E.Intertype_not_implemented '^intertype.hedges@1^', \\\n  #       \"non-orthogonal hedge matchers not implemented, got #{name}.hedges_matchers_are_orthogonal == false\"\n  #   return true unless property?\n  #   for property of hedge.match\n  #     return false unless type_cfg[ property ]\n  #   return true\n\n"
  ]
}