{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/declarations.coffee"
  ],
  "names": [],
  "mappings": "AAE4G;EAAA;EAC5G,IAAC,CAAA,gCAAD,GAAoC,QAAA,CAAE,GAAF,CAAA;AACpC,QAAA;IAAE,CAAA,CAAE,OAAF,CAAA,GAAc,GAAd,EAAF;;IAEE,OAAO,CAAC,IAAR,CACE;MAAA,IAAA,EAAU,QAAA,CAAE,CAAF,CAAA;eAAS,CAAA,KAAK;MAAd,CAAV;MACA,OAAA,EAAU;IADV,CADF,EAFF;;IAME,OAAO,CAAC,OAAR,CACE;MAAA,IAAA,EAAU,QAAA,CAAE,CAAF,CAAA;eAAS,CAAE,CAAA,KAAK,IAAP,CAAA,IAAiB,CAAE,CAAA,KAAK,KAAP;MAA1B,CAAV;MACA,OAAA,EAAU;IADV,CADF,EANF;;IAUE,OAAO,CAAC,IAAR,CACE;MAAA,UAAA,EAAY,IAAZ;MACA,IAAA,EAAU,QAAA,CAAE,CAAF,CAAA;eAAS,CAAE,OAAO,CAAT,CAAA,KAAgB;MAAzB,CADV;MAEA,OAAA,EAAU;IAFV,CADF,EAVF;;IAeE,OAAO,CAAC,SAAR,CACE;MAAA,IAAA,EAAU,QAAA,CAAE,CAAF,CAAA;eAAS,MAAM,CAAC,IAAP,CAAY,CAAZ;MAAT,CAAV;MACA,OAAA,EAAU;IADV,CADF,EAfF;;IAmBE,OAAO,CAAC,WAAR,CACE;MAAA,IAAA,EAAU,QAAA,CAAE,CAAF,CAAA;eAAS,IAAC,CAAA,GAAG,CAAC,OAAL,CAAa,CAAA,IAAM,CAAE,CAAA,OAAA,IAAW,CAAX,IAAW,CAAX,IAAgB,OAAhB,CAAF,CAAnB;MAAT,CAAV;MACA,OAAA,EAAU;IADV,CADF,EAnBF;;IAuBE,OAAO,CAAC,IAAR,CACE;MAAA,UAAA,EAAY,IAAZ;MACA,IAAA,EAAU,QAAA,CAAE,CAAF,CAAA;eAAS,KAAK,CAAC,OAAN,CAAc,CAAd;MAAT,CADV;MAEA,OAAA,EAAU;IAFV,CADF,EAvBF;;IA4BE,OAAO,CAAC,GAAR,CACE;MAAA,UAAA,EAAY,IAAZ;MACA,IAAA,EAAU,QAAA,CAAE,CAAF,CAAA;eAAS,CAAA,YAAa;MAAtB,CADV;;MAGA,MAAA,EAAU,QAAA,CAAE,MAAM,EAAR,CAAA;eAAgB,IAAI,GAAJ,CAAQ,GAAR;MAAhB;IAHV,CADF,EA5BF;;IAkCE,OAAO,CAAC,OAAR,CACE;MAAA,IAAA,EAAU,QAAA,CAAE,CAAF,CAAA;eAAS,MAAM,CAAC,SAAP,CAAiB,CAAjB;MAAT,CAAV;MACA,OAAA,EAAU;IADV,CADF,EAlCF;;IAsCE,OAAO,CAAC,SAAR,CACE,CAAA;MAAA,IAAA,EAAU,QAAA,CAAE,CAAF,CAAA;eAAS,CAAE,OAAO,CAAT,CAAA,KAAgB,CAAE,OAAO,CAAC,CAAV;MAAzB,CAAV;MACA,OAAA,EAAU;IADV,CADF,EAtCF;;IA0CE,OAAO,CAAC,KAAR,CACE;MAAA,UAAA,EAAY,IAAZ;MACA,IAAA,EAAU,QAAA,CAAE,CAAF,CAAA;eAAS,CAAE,IAAC,CAAA,OAAD,CAAS,CAAT,EAAY,IAAC,CAAA,QAAQ,CAAC,OAAtB,CAAF,CAAA,KAAuC,IAAC,CAAA,QAAQ,CAAC;MAA1D;IADV,CADF,EA1CF;;IA8CE,OAAO,CAAC,QAAR,CACE;MAAA,IAAA,EAAU,QAAA,CAAE,CAAF,CAAA;eAAS,WAAA,IAAO;MAAhB;IAAV,CADF,EA9CF;;IAiDE,OAAO,CAAC,MAAR,CACE;MAAA,IAAA,EAAU,QAAA,CAAE,CAAF,CAAA;eAAS,WAAA,IAAO,CAAE,OAAO,CAAT,CAAA,KAAgB;MAAhC;IAAV,CADF,EAjDF;;AAoDE,WAAO;EArD2B;AADwE",
  "sourcesContent": [
    "\n\n#-----------------------------------------------------------------------------------------------------------\n@_provisional_declare_basic_types = ( hub ) ->\n  { declare } = hub\n  #.........................................................................................................\n  declare.null\n    test:     ( x ) -> x is null\n    default:  null\n  #.........................................................................................................\n  declare.boolean\n    test:     ( x ) -> ( x is true ) or ( x is false )\n    default:  false\n  #.........................................................................................................\n  declare.text\n    collection: true\n    test:     ( x ) -> ( typeof x ) is 'string'\n    default:  ''\n  #.........................................................................................................\n  declare.codepoint\n    test:     ( x ) -> /^.$/u.test x\n    default:  '\\x00'\n  #.........................................................................................................\n  declare.codepointid\n    test:     ( x ) -> @isa.integer x and ( 0x00000 <= x <= 0x1ffff )\n    default:  '\\x00'\n  #.........................................................................................................\n  declare.list\n    collection: true\n    test:     ( x ) -> Array.isArray x\n    default:  ''\n  #.........................................................................................................\n  declare.set\n    collection: true\n    test:     ( x ) -> x instanceof Set\n    # default:  ''\n    create:   ( cfg = [] ) -> new Set cfg\n  #.........................................................................................................\n  declare.integer\n    test:     ( x ) -> Number.isInteger x\n    default:  0\n  #.........................................................................................................\n  declare.negatable # numeric? numeral?\n    test:     ( x ) -> ( typeof x ) is ( typeof -x )\n    default:  0\n  #.........................................................................................................\n  declare.sized\n    collection: true\n    test:     ( x ) -> ( @size_of x, @_signals.nothing ) isnt @_signals.nothing\n  #.........................................................................................................\n  declare.iterable\n    test:     ( x ) -> x? and x[ Symbol.iterator ]?\n  #.........................................................................................................\n  declare.object\n    test:     ( x ) -> x? and ( typeof x ) is 'object'\n  #.........................................................................................................\n  return null\n\n\n\n\n"
  ]
}