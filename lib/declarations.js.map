{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/declarations.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n#===========================================================================================================\nGUY                       = require 'guy'\n{ debug\n  help\n  info }                  = GUY.trm.get_loggers 'demo-execa'\n{ rpr }                   = GUY.trm\nLIB                       = require './lib'\n\n#===========================================================================================================\nstd = new LIB.Typespace\n  #.........................................................................................................\n  integer:\n    isa:    ( x, t ) -> Number.isInteger x\n    foo:    4\n  odd:\n    isa:    ( x, t ) -> ( t.isa @$typespace.integer, x ) and ( x %% 2 isnt 0 )\n  # short form just assigns either a test method or a type name:\n  even:           ( x, t ) -> ( t.isa @$typespace.integer, x ) and ( x %% 2 is 0 )\n  float:          ( x, t ) -> Number.isFinite x\n  bigint:         ( x, t ) -> typeof x is 'bigint'\n  text:           ( x, t ) -> typeof x is 'string'\n  nonempty_text:  ( x, t ) -> ( t.isa @$typespace.text, x ) and ( x.length > 0 )\n  #.........................................................................................................\n  # numerical:      ( x, t ) -> ( t.isa @$typespace.float, x   ) or ( t.isa @$typespace.bigint, x )\n  # positive0:      ( x, t ) -> ( t.isa @$typespace.float, x   ) and ( x >= +0  )\n  # positive1:      ( x, t ) -> ( t.isa @$typespace.float, x   ) and ( x >= +1  )\n  # negative0:      ( x, t ) -> ( t.isa @$typespace.float, x   ) and ( x <=  0  )\n  # negative1:      ( x, t ) -> ( t.isa @$typespace.float, x   ) and ( x <= -1  )\n  # cardinal:       ( x, t ) -> ( t.isa @$typespace.integer, x ) and ( t.isa @$typespace.positive0, x )\n  #.........................................................................................................\n  # cardinalbigint: ( x, t ) -> ( t.isa @$typespace.bigint, x    ) and ( x >= +0 )\n  #.........................................................................................................\n  # circle1:  'circle2'\n  # circle2:  'circle3'\n  # circle3:  'circle1'\n  #.........................................................................................................\n  weird:    'strange' # declares another name for `odd`\n  strange:  'odd'     # declares another name for `odd`\n  abnormal: 'weird'   # declares another name for `odd`\n  #.........................................................................................................\n  quantity:\n    fields:\n      # each field becomes a `Type` instance; strings may refer to names in the same typespace\n      q:    'float'\n      u:    'nonempty_text'\n    template:\n      q:    0\n      u:    'u'\n  #.........................................................................................................\n  address:\n    fields:\n      postcode:   'nonempty_text'\n      city:       'nonempty_text'\n  #.........................................................................................................\n  employee:\n    fields:\n      address:    'address'\n      name:\n        fields:\n          firstname:  'nonempty_text'\n          lastname:   'nonempty_text'\n\n\n#===========================================================================================================\nflatly_1 = new LIB.Typespace\n  evenly:       'flat'\n  flat:         ( x, t ) -> t.isa std.even, x\n  plain:        'evenly'\n  # foo:          'bar'\n\n#-----------------------------------------------------------------------------------------------------------\nflatly_2 = new LIB.Typespace\n  evenly:       'flat'\n  flat:         std.even\n  plain:        'evenly'\n\n\n#===========================================================================================================\n# if module is require.main then await do =>\nmodule.exports = { std, flatly_1, flatly_2, }\n"
  ]
}