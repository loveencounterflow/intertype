{
  "version": 3,
  "file": "declarations.js",
  "sourceRoot": "..",
  "sources": [
    "src/declarations.coffee"
  ],
  "names": [],
  "mappings": ";AAAA;EAAA;AAAA,MAAA,MAAA,EAAA,OAAA,EAAA,EAAA,EAAA,UAAA,EAAA,IAAA;IAAA;;EAEA,CAAA,CAAE,MAAF,EACE,EADF,EAEE,OAFF,EAGE,IAHF,EAIE,UAJF,CAAA,GAI4B,OAAA,CAAQ,WAAR,CAJ5B,EAFA;;;;;EAYA,IAAC,CAAA,aAAD,GAAiB,QAAA,CAAA,CAAA,EAAA;;IAEf,IAAC,CAAA,OAAD,CAAS,MAAT,EAAgC,CAAE,CAAF,CAAA,GAAA;aAAS,CAAA,KAAK;IAAd,CAAhC;IACA,IAAC,CAAA,OAAD,CAAS,WAAT,EAAgC,CAAE,CAAF,CAAA,GAAA;aAAS,CAAA,KAAK;IAAd,CAAhC,EADA;;IAGA,IAAC,CAAA,OAAD,CAAS,SAAT,EACE;MAAA,KAAA,EACE;QAAA,oBAAA,EAA4B,CAAE,CAAF,CAAA,GAAA;iBAAS,CAAE,CAAA,KAAK,IAAP,CAAA,IAAiB,CAAE,CAAA,KAAK,KAAP;QAA1B;MAA5B,CADF;MAEA,KAAA,EACE;QAAA,MAAA,EAA4B,CAAE,CAAF,CAAA,GAAA;UAAS,IAAG,CAAH;mBAAU,EAAV;WAAA,MAAA;mBAAiB,EAAjB;;QAAT;MAA5B;IAHF,CADF,EAHA;;IASA,IAAC,CAAA,OAAD,CAAS,KAAT,EAAgC,CAAE,CAAF,CAAA,GAAA;aAAS,MAAM,CAAC,KAAP,CAAqB,CAArB;IAAT,CAAhC;IACA,IAAC,CAAA,OAAD,CAAS,QAAT,EAAgC,CAAE,CAAF,CAAA,GAAA;aAAS,MAAM,CAAC,QAAP,CAAqB,CAArB;IAAT,CAAhC;IACA,IAAC,CAAA,OAAD,CAAS,SAAT,EAAgC,CAAE,CAAF,CAAA,GAAA;aAAS,MAAM,CAAC,SAAP,CAAqB,CAArB;IAAT,CAAhC;IACA,IAAC,CAAA,OAAD,CAAS,aAAT,EAAgC,CAAE,CAAF,CAAA,GAAA;aAAS,MAAM,CAAC,aAAP,CAAqB,CAArB;IAAT,CAAhC,EAZA;;IAcA,IAAC,CAAA,OAAD,CAAS,QAAT,EACE;MAAA,KAAA,EAA8B,CAAE,CAAF,CAAA,GAAA;eAAS,MAAM,CAAC,QAAP,CAAqB,CAArB;MAAT,CAA9B;MACA,KAAA,EACE;QAAA,OAAA,EAA4B,CAAE,CAAF,CAAA,GAAA;UAAS,IAAG,CAAA,KAAK,CAAR;mBAAe,MAAf;WAAA,MAAA;mBAA0B,KAA1B;;QAAT,CAA5B;QACA,OAAA,EAA4B,CAAE,CAAF,CAAA,GAAA;iBAAS,IAAI,CAAC,KAAL,CAAW,CAAX;QAAT;MAD5B;IAFF,CADF,EAdA;;IAoBA,IAAC,CAAA,OAAD,CAAS,QAAT,EAAgC,CAAE,CAAF,CAAA,GAAA;aAAS,MAAM,CAAC,QAAP,CAAqB,CAArB;IAAT,CAAhC;IACA,IAAC,CAAA,OAAD,CAAS,QAAT,EAAgC,CAAE,CAAF,CAAA,GAAA;aAAS,MAAM,CAAC,QAAP,CAAqB,CAArB;IAAT,CAAhC;IACA,IAAC,CAAA,OAAD,CAAS,YAAT,EAAgC,CAAE,CAAF,CAAA,GAAA;aAAS,MAAM,CAAC,YAAP,CAAqB,CAArB;IAAT,CAAhC,EAtBA;;IAwBA,IAAC,CAAA,OAAD,CAAS,SAAT,EAAgC,CAAE,CAAF,CAAA,GAAA;aAAS,CAAE,UAAA,CAAW,CAAX,CAAF,CAAA,KAAoB;IAA7B,CAAhC;IACA,IAAC,CAAA,OAAD,CAAS,UAAT,EAAgC,CAAE,CAAF,CAAA,GAAA;aAAS,CAAE,UAAA,CAAW,CAAX,CAAF,CAAA,KAAoB;IAA7B,CAAhC;IACA,IAAC,CAAA,OAAD,CAAS,eAAT,EAAgC,CAAE,CAAF,CAAA,GAAA;aAAS,CAAE,UAAA,CAAW,CAAX,CAAF,CAAA,KAAoB;IAA7B,CAAhC;IACA,IAAC,CAAA,OAAD,CAAS,mBAAT,EAAgC,CAAE,CAAF,CAAA,GAAA;aAAS,CAAE,UAAA,CAAW,CAAX,CAAF,CAAA,KAAoB;IAA7B,CAAhC;IACA,IAAC,CAAA,OAAD,CAAS,WAAT,EAAgC,CAAE,CAAF,CAAA,GAAA;aAAS,CAAE,UAAA,CAAW,CAAX,CAAF,CAAA,KAAoB;IAA7B,CAAhC;IACA,IAAC,CAAA,OAAD,CAAS,MAAT,EAAgC,CAAE,CAAF,CAAA,GAAA;aAAS,CAAE,UAAA,CAAW,CAAX,CAAF,CAAA,KAAoB;IAA7B,CAAhC;IACA,IAAC,CAAA,OAAD,CAAS,UAAT,EAAgC,CAAE,CAAF,CAAA,GAAA;AAAS,UAAA;oBAAE,IAAC,CAAA,OAAD,CAAS,CAAT,EAAF,KAAoB,UAApB,IAAA,GAAA,KAAgC,eAAhC,IAAA,GAAA,KAAiD;IAA1D,CAAhC,EA9BA;;IAgCA,IAAC,CAAA,OAAD,CAAS,QAAT,EAAgC,CAAE,CAAF,CAAA,GAAA;aAAS,CAAI,CAAI;IAAjB,CAAhC;IACA,IAAC,CAAA,OAAD,CAAS,OAAT,EAAgC,CAAE,CAAF,CAAA,GAAA;aAAS,CAAI;IAAb,CAAhC;IACA,IAAC,CAAA,OAAD,CAAS,MAAT,EAAgC,CAAE,CAAF,CAAA,GAAA;aAAS,CAAA,KAAK;IAAd,CAAhC;IACA,IAAC,CAAA,OAAD,CAAS,OAAT,EAAgC,CAAE,CAAF,CAAA,GAAA;aAAS,CAAA,KAAK;IAAd,CAAhC;IACA,IAAC,CAAA,OAAD,CAAS,OAAT,EAAgC,CAAE,CAAF,CAAA,GAAA;aAAa;IAAb,CAAhC;IACA,IAAC,CAAA,OAAD,CAAS,UAAT,EAAgC,CAAE,CAAF,CAAA,GAAA;aAAS;IAAT,CAAhC,EArCA;;IAuCA,IAAC,CAAA,OAAD,CAAS,MAAT,EAAgC,CAAE,CAAF,CAAA,GAAA;aAAS,IAAC,CAAA,GAAG,CAAC,WAAL,CAAiB,CAAjB,EAAoB,CAApB;IAAT,CAAhC;IACA,IAAC,CAAA,OAAD,CAAS,KAAT,EAAgC,CAAE,CAAF,CAAA,GAAA;aAAS,CAAI,IAAC,CAAA,GAAG,CAAC,IAAL,CAAU,CAAV;IAAb,CAAhC;IACA,IAAC,CAAA,OAAD,CAAS,OAAT,EAAgC,QAAA,CAAE,CAAF,CAAA;aAAS,CAAE,IAAC,CAAA,GAAG,CAAC,WAAL,CAAiB,CAAjB,CAAF,CAAA,IAA2B,CAAE,IAAC,CAAA,GAAG,CAAC,WAAL,CAAiB,CAAjB,CAAF;IAApC,CAAhC;IACA,IAAC,CAAA,OAAD,CAAS,aAAT,EAAgC,CAAE,CAAF,CAAA,GAAA;aAAS,CAAE,IAAC,CAAA,GAAG,CAAC,MAAL,CAAY,CAAZ,CAAF,CAAA,IAAsB,CAAE,CAAA,IAAK,CAAP;IAA/B,CAAhC;IACA,IAAC,CAAA,OAAD,CAAS,UAAT,EAAgC,CAAE,CAAF,CAAA,GAAA;aAAS,CAAE,IAAC,CAAA,GAAG,CAAC,MAAL,CAAY,CAAZ,CAAF,CAAA,IAAsB,CAAE,CAAA,GAAI,CAAN;IAA/B,CAAhC;IACA,IAAC,CAAA,OAAD,CAAS,kBAAT,EAAgC,CAAE,CAAF,CAAA,GAAA;aAAS,CAAE,IAAC,CAAA,GAAG,CAAC,OAAL,CAAa,CAAb,CAAF,CAAA,IAAuB,CAAE,CAAA,GAAI,CAAN;IAAhC,CAAhC;IACA,IAAC,CAAA,OAAD,CAAS,kBAAT,EAAgC,CAAE,CAAF,CAAA,GAAA;aAAS,CAAE,IAAC,CAAA,GAAG,CAAC,OAAL,CAAa,CAAb,CAAF,CAAA,IAAuB,CAAE,CAAA,GAAI,CAAN;IAAhC,CAAhC;IACA,IAAC,CAAA,OAAD,CAAS,MAAT,EAAgC,CAAE,CAAF,CAAA,GAAA;aAAS,CAAA,KAAK;IAAd,CAAhC;IACA,IAAC,CAAA,OAAD,CAAS,UAAT,EAAgC,CAAE,CAAF,CAAA,GAAA;aAAS,CAAE,CAAA,KAAK,CAAC,KAAR,CAAA,IAAsB,CAAE,CAAA,KAAK,CAAC,KAAR;IAA/B,CAAhC;IACA,IAAC,CAAA,OAAD,CAAS,aAAT,EAAgC,CAAE,CAAF,CAAA,GAAA;aAAS,CAAE,IAAC,CAAA,GAAG,CAAC,MAAL,CAAY,CAAZ,CAAF,CAAA,IAAsB,CAAE,CAAA,IAAK,CAAP;IAA/B,CAAhC;IACA,IAAC,CAAA,OAAD,CAAS,UAAT,EAAgC,CAAE,CAAF,CAAA,GAAA;aAAS,CAAE,IAAC,CAAA,GAAG,CAAC,MAAL,CAAY,CAAZ,CAAF,CAAA,IAAsB,CAAE,CAAA,GAAI,CAAN;IAA/B,CAAhC;IACA,IAAC,CAAA,OAAD,CAAS,aAAT,EAAgC,CAAE,CAAF,EAAK,CAAL,CAAA,GAAA;aAAY,CAAE,IAAC,CAAA,GAAG,CAAC,MAAL,CAAY,CAAZ,CAAF,CAAA,IAAsB,QAAE,GAAK,EAAP,CAAA,KAAc;IAAhD,CAAhC,EAlDA;;IAoDA,IAAC,CAAA,OAAD,CAAS,OAAT,EAAgC,QAAA,CAAE,CAAF,CAAA;aAAS,CAAE,IAAC,CAAA,QAAD,CAAa,CAAb,CAAF,CAAA,IAAuB,CAAE,IAAC,CAAA,OAAD,CAAS,CAAT,CAAF,CAAA,KAAkB;IAAlD,CAAhC;IACA,IAAC,CAAA,OAAD,CAAS,UAAT,EAAgC,QAAA,CAAE,CAAF,CAAA;aAAS,CAAE,IAAC,CAAA,QAAD,CAAa,CAAb,CAAF,CAAA,IAAuB,CAAE,IAAC,CAAA,OAAD,CAAS,CAAT,CAAF,CAAA,KAAkB;IAAlD,CAAhC;IACA,IAAC,CAAA,OAAD,CAAS,UAAT,EAAgC,QAAA,CAAE,CAAF,CAAA;aAAS,CAAE,IAAC,CAAA,QAAD,CAAa,CAAb,CAAF,CAAA,IAAuB,CAAE,IAAC,CAAA,OAAD,CAAS,CAAT,CAAF,CAAA,GAAiB;IAAjD,CAAhC;IACA,IAAC,CAAA,OAAD,CAAS,QAAT,EAAgC,QAAA,CAAE,CAAF,CAAA;aAAS,CAAE,IAAC,CAAA,QAAD,CAAa,CAAb,CAAF,CAAA,IAAuB,CAAE,IAAC,CAAA,OAAD,CAAS,CAAT,CAAF,CAAA,GAAiB;IAAjD,CAAhC;IACA,IAAC,CAAA,OAAD,CAAS,YAAT,EAAgC,QAAA,CAAE,CAAF,CAAA;aAAS,CAAE,IAAC,CAAA,GAAG,CAAC,IAAL,CAAa,CAAb,CAAF,CAAA,IAA2B;IAApC,CAAhC;IACA,IAAC,CAAA,OAAD,CAAS,eAAT,EAAgC,QAAA,CAAE,CAAF,CAAA;aAAS,CAAE,IAAC,CAAA,GAAG,CAAC,IAAL,CAAa,CAAb,CAAF,CAAA,IAA2B;IAApC,CAAhC;IACA,IAAC,CAAA,OAAD,CAAS,KAAT,EAAgC,QAAA,CAAE,CAAF,CAAA;aAAS,CAAE,IAAC,CAAA,GAAG,CAAC,IAAL,CAAa,CAAb,CAAF,CAAA,IAA2B;IAApC,CAAhC;IACA,IAAC,CAAA,OAAD,CAAS,eAAT,EAAgC,QAAA,CAAE,CAAF,CAAA;aAAS,CAAE,IAAC,CAAA,GAAG,CAAC,IAAL,CAAa,CAAb,CAAF,CAAA,IAAuB,CAAE,IAAC,CAAA,GAAG,CAAC,QAAL,CAAc,CAAd,CAAF;IAAhC,CAAhC;IACA,IAAC,CAAA,OAAD,CAAS,eAAT,EAAgC,QAAA,CAAE,CAAF,CAAA;aAAS,CAAE,IAAC,CAAA,GAAG,CAAC,IAAL,CAAa,CAAb,CAAF,CAAA,IAAuB,CAAE,IAAC,CAAA,GAAG,CAAC,QAAL,CAAc,CAAd,CAAF;IAAhC,CAAhC;IACA,IAAC,CAAA,OAAD,CAAS,iBAAT,EAAgC,QAAA,CAAE,CAAF,CAAA;aAAS,CAAE,IAAC,CAAA,GAAG,CAAC,MAAL,CAAa,CAAb,CAAF,CAAA,IAAuB,CAAE,IAAC,CAAA,GAAG,CAAC,QAAL,CAAc,CAAd,CAAF;IAAhC,CAAhC;IACA,IAAC,CAAA,OAAD,CAAS,cAAT,EAAgC,QAAA,CAAE,CAAF,CAAA;aAAS,CAAE,IAAC,CAAA,GAAG,CAAC,GAAL,CAAa,CAAb,CAAF,CAAA,IAAuB,CAAE,IAAC,CAAA,GAAG,CAAC,QAAL,CAAc,CAAd,CAAF;IAAhC,CAAhC;IACA,IAAC,CAAA,OAAD,CAAS,cAAT,EAAgC,QAAA,CAAE,CAAF,CAAA;aAAS,CAAE,IAAC,CAAA,GAAG,CAAC,GAAL,CAAa,CAAb,CAAF,CAAA,IAAuB,CAAE,IAAC,CAAA,GAAG,CAAC,QAAL,CAAc,CAAd,CAAF;IAAhC,CAAhC;IACA,IAAC,CAAA,OAAD,CAAS,YAAT,EAAgC,QAAA,CAAE,CAAF,CAAA;aAAS,CAAE,IAAC,CAAA,GAAG,CAAC,IAAL,CAAa,CAAb,CAAF,CAAA,IAAuB,CAAE,IAAC,CAAA,GAAG,CAAC,KAAL,CAAW,CAAX,CAAF;IAAhC,CAAhC;IACA,IAAC,CAAA,OAAD,CAAS,YAAT,EAAgC,QAAA,CAAE,CAAF,CAAA;aAAS,CAAE,IAAC,CAAA,GAAG,CAAC,IAAL,CAAa,CAAb,CAAF,CAAA,IAAuB,CAAE,IAAC,CAAA,GAAG,CAAC,KAAL,CAAW,CAAX,CAAF;IAAhC,CAAhC;IACA,IAAC,CAAA,OAAD,CAAS,cAAT,EAAgC,QAAA,CAAE,CAAF,CAAA;aAAS,CAAE,IAAC,CAAA,GAAG,CAAC,MAAL,CAAa,CAAb,CAAF,CAAA,IAAuB,CAAE,IAAC,CAAA,GAAG,CAAC,KAAL,CAAW,CAAX,CAAF;IAAhC,CAAhC;IACA,IAAC,CAAA,OAAD,CAAS,WAAT,EAAgC,QAAA,CAAE,CAAF,CAAA;aAAS,CAAE,IAAC,CAAA,GAAG,CAAC,GAAL,CAAa,CAAb,CAAF,CAAA,IAAuB,CAAE,IAAC,CAAA,GAAG,CAAC,KAAL,CAAW,CAAX,CAAF;IAAhC,CAAhC;IACA,IAAC,CAAA,OAAD,CAAS,WAAT,EAAgC,QAAA,CAAE,CAAF,CAAA;aAAS,CAAE,IAAC,CAAA,GAAG,CAAC,GAAL,CAAa,CAAb,CAAF,CAAA,IAAuB,CAAE,IAAC,CAAA,GAAG,CAAC,KAAL,CAAW,CAAX,CAAF;IAAhC,CAAhC,EApEA;;IAsEA,IAAC,CAAA,OAAD,CAAS,QAAT,EAAgC;MAAE,IAAA,EAAM;IAAR,CAAhC,EAAsD,CAAE,CAAF,CAAA,GAAA;aAAS,MAAM,CAAC,QAAP,CAAgB,CAAhB;IAAT,CAAtD;IACA,IAAC,CAAA,OAAD,CAAS,aAAT,EAAgC;MAAE,IAAA,EAAM;IAAR,CAAhC,EAAsD,CAAE,CAAF,CAAA,GAAA;aAAS,CAAE,UAAA,CAAW,CAAX,CAAF,CAAA,KAAoB;IAA7B,CAAtD;IACA,IAAC,CAAA,OAAD,CAAS,WAAT,EAAgC;MAAE,IAAA,EAAM;IAAR,CAAhC,EAAsD,CAAE,CAAF,CAAA,GAAA;aAAS,CAAE,UAAA,CAAW,CAAX,CAAF,CAAA,KAAoB;IAA7B,CAAtD;IACA,IAAC,CAAA,OAAD,CAAS,YAAT,EAAgC;MAAE,IAAA,EAAM;IAAR,CAAhC,EAAsD,CAAE,CAAF,CAAA,GAAA;aAAS,CAAE,UAAA,CAAW,CAAX,CAAF,CAAA,KAAoB;IAA7B,CAAtD;IACA,IAAC,CAAA,OAAD,CAAS,mBAAT,EAAgC;MAAE,IAAA,EAAM;IAAR,CAAhC,EAAsD,CAAE,CAAF,CAAA,GAAA;aAAS,CAAE,UAAA,CAAW,CAAX,CAAF,CAAA,KAAoB;IAA7B,CAAtD;IACA,IAAC,CAAA,OAAD,CAAS,YAAT,EAAgC;MAAE,IAAA,EAAM;IAAR,CAAhC,EAAsD,CAAE,CAAF,CAAA,GAAA;aAAS,CAAE,UAAA,CAAW,CAAX,CAAF,CAAA,KAAoB;IAA7B,CAAtD;IACA,IAAC,CAAA,OAAD,CAAS,aAAT,EAAgC;MAAE,IAAA,EAAM;IAAR,CAAhC,EAAsD,CAAE,CAAF,CAAA,GAAA;aAAS,CAAE,UAAA,CAAW,CAAX,CAAF,CAAA,KAAoB;IAA7B,CAAtD;IACA,IAAC,CAAA,OAAD,CAAS,YAAT,EAAgC;MAAE,IAAA,EAAM;IAAR,CAAhC,EAAsD,CAAE,CAAF,CAAA,GAAA;aAAS,CAAE,UAAA,CAAW,CAAX,CAAF,CAAA,KAAoB;IAA7B,CAAtD;IACA,IAAC,CAAA,OAAD,CAAS,aAAT,EAAgC;MAAE,IAAA,EAAM;IAAR,CAAhC,EAAsD,CAAE,CAAF,CAAA,GAAA;aAAS,CAAE,UAAA,CAAW,CAAX,CAAF,CAAA,KAAoB;IAA7B,CAAtD;IACA,IAAC,CAAA,OAAD,CAAS,cAAT,EAAgC;MAAE,IAAA,EAAM;IAAR,CAAhC,EAAsD,CAAE,CAAF,CAAA,GAAA;aAAS,CAAE,UAAA,CAAW,CAAX,CAAF,CAAA,KAAoB;IAA7B,CAAtD;IACA,IAAC,CAAA,OAAD,CAAS,cAAT,EAAgC;MAAE,IAAA,EAAM;IAAR,CAAhC,EAAsD,CAAE,CAAF,CAAA,GAAA;aAAS,CAAE,UAAA,CAAW,CAAX,CAAF,CAAA,KAAoB;IAA7B,CAAtD;IACA,IAAC,CAAA,OAAD,CAAS,MAAT,EAAgC;MAAE,IAAA,EAAM;IAAR,CAAhC,EAAsD,CAAE,CAAF,CAAA,GAAA;aAAS,CAAE,UAAA,CAAW,CAAX,CAAF,CAAA,KAAoB;IAA7B,CAAtD;IACA,IAAC,CAAA,OAAD,CAAS,KAAT,EAAgC;MAAE,IAAA,EAAM;IAAR,CAAhC,EAAsD,QAAA,CAAE,CAAF,CAAA;aAAS,CAAE,UAAA,CAAW,CAAX,CAAF,CAAA,KAAoB;IAA7B,CAAtD;IACA,IAAC,CAAA,OAAD,CAAS,KAAT,EAAgC;MAAE,IAAA,EAAM;IAAR,CAAhC,EAAsD,QAAA,CAAE,CAAF,CAAA;aAAS,CAAE,UAAA,CAAW,CAAX,CAAF,CAAA,KAAoB;IAA7B,CAAtD;IACA,IAAC,CAAA,OAAD,CAAS,SAAT,EAAsD,QAAA,CAAE,CAAF,CAAA;aAAS,CAAE,UAAA,CAAW,CAAX,CAAF,CAAA,KAAoB;IAA7B,CAAtD;IACA,IAAC,CAAA,OAAD,CAAS,SAAT,EAAsD,QAAA,CAAE,CAAF,CAAA;aAAS,CAAE,UAAA,CAAW,CAAX,CAAF,CAAA,KAAoB;IAA7B,CAAtD;IACA,IAAC,CAAA,OAAD,CAAS,OAAT,EAAsD,QAAA,CAAE,CAAF,CAAA;aAAS,CAAE,UAAA,CAAW,CAAX,CAAF,CAAA,KAAoB;IAA7B,CAAtD;IACA,IAAC,CAAA,OAAD,CAAS,OAAT,EAAsD,QAAA,CAAE,CAAF,CAAA;aAAS,CAAE,UAAA,CAAW,CAAX,CAAF,CAAA,KAAoB;IAA7B,CAAtD,EAvFA;;IAyFA,IAAC,CAAA,OAAD,CAAS,QAAT,EACE;MAAA,KAAA,EAAQ,CAAE,CAAF,CAAA,GAAA;eAAa,CAAE,UAAA,CAAW,CAAX,CAAF,CAAA,KAAoB;MAAjC,CAAR;MACA,IAAA,EAAQ,CAAA,GAAE,EAAF,CAAA,GAAA;eAAa,CAAE,IAAC,CAAA,OAAD,CAAa,GAAA,EAAb,CAAF,CAAsB,CAAC;MAApC;IADR,CADF,EAzFA;;IA6FA,IAAC,CAAA,OAAD,CAAS,QAAT,EACE;MAAA,KAAA,EAAQ,CAAE,CAAF,CAAA,GAAA;eAAa,CAAE,UAAA,CAAW,CAAX,CAAF,CAAA,KAAoB;MAAjC,CAAR;MACA,IAAA,EAAQ,CAAA,GAAE,EAAF,CAAA,GAAA;eAAa,CAAE,IAAC,CAAA,WAAD,CAAa,GAAA,EAAb,CAAF,CAAsB,CAAC;MAApC;IADR,CADF,EA7FA;;IAiGA,IAAC,CAAA,OAAD,CAAS,MAAT,EACE;MAAA,KAAA,EAAQ,CAAE,CAAF,CAAA,GAAA;eAAS,CAAE,UAAA,CAAW,CAAX,CAAF,CAAA,KAAoB;MAA7B,CAAR;MACA,IAAA,EAAQ,QAAA,CAAE,CAAF,EAAK,WAAW,WAAhB,CAAA;AACN,YAAA;AAAA,gBAAO,QAAP;AAAA,eACO,YADP;AACyB,mBAAO,CAAE,KAAK,CAAC,IAAN,CAAW,CAAX,CAAF,CAAgB,CAAC;AADjD,eAEO,WAFP;AAEyB,mBAAO,CAAC,CAAC;AAFlC,eAGO,OAHP;AAGyB,mBAAO,MAAM,CAAC,UAAP,CAAkB,CAAlB,+GAAiD,OAAjD;AAHhC;YAIO,MAAM,IAAI,KAAJ,CAAU,CAAA,0BAAA,CAAA,CAA6B,GAAA,CAAI,QAAJ,CAA7B,CAAA,CAAV;AAJb;MADM;IADR,CADF,EAjGA;;IA2GA,IAAC,CAAA,OAAD,CAAS,SAAT,EACE;MAAA,KAAA,EACE;QAAA,aAAA,EAA4B,CAAE,IAAF,EAAQ,CAAR,EAAA,GAAW,EAAX,CAAA,GAAA;iBAAsB,IAAC,CAAA,GAAG,CAAC,IAAL,CAAU,CAAV;QAAtB,CAA5B;;QAEA,uBAAA,EAA4B,CAAE,IAAF,EAAQ,CAAR,EAAA,GAAW,EAAX,CAAA,GAAA;iBAAsB,IAAC,CAAA,GAAG,CAAC,aAAL,CAAmB,IAAnB;QAAtB,CAF5B;QAGA,wBAAA,EAA4B,CAAE,IAAF,EAAQ,CAAR,EAAA,GAAW,EAAX,CAAA,GAAA;iBAAsB,CAAC,CAAC,KAAF,CAAQ,CAAE,EAAF,CAAA,GAAA;mBAAU,IAAC,CAAA,GAAD,CAAK,IAAL,EAAW,EAAX,EAAe,GAAA,EAAf;UAAV,CAAR;QAAtB;MAH5B;IADF,CADF,EA3GA;;IAmHA,IAAC,CAAA,OAAD,CAAS,UAAT,EACE;MAAA,KAAA,EAAO,CAAE,CAAF,CAAA,GAAA;eAAS,CAAE,IAAC,CAAA,GAAG,CAAC,IAAL,CAAU,CAAV,CAAF,CAAA,IAAoB;MAA7B,CAAP;MACA,KAAA,EACE;QAAA,MAAA,EAAQ,CAAE,CAAF,CAAA,GAAA;iBAAS,QAAA,CAAS,CAAT,EAAY,CAAZ;QAAT;MAAR;IAFF,CADF,EAnHA;;IAwHA,IAAC,CAAA,OAAD,CAAS,WAAT,EACE;MAAA,KAAA,EAAO,CAAE,CAAF,CAAA,GAAA;eAAS,CAAE,IAAC,CAAA,GAAG,CAAC,IAAL,CAAU,CAAV,CAAF,CAAA,IAAoB;MAA7B,CAAP;MACA,KAAA,EACE;QAAA,MAAA,EAAQ,CAAE,CAAF,CAAA,GAAA;iBAAS,QAAA,CAAS,CAAT,EAAY,EAAZ;QAAT;MAAR;IAFF,CADF,EAxHA;;WA6HA,IAAC,CAAA,OAAD,CAAS,WAAT,EACE;MAAA,KAAA,EAAO,CAAE,CAAF,CAAA,GAAA;eAAS,CAAE,IAAC,CAAA,GAAG,CAAC,IAAL,CAAU,CAAV,CAAF,CAAA,IAAoB;MAA7B,CAAP;MACA,KAAA,EACE;QAAA,MAAA,EAAU,CAAE,CAAF,CAAA,GAAA;iBAAS,QAAA,CAAS,CAAT,EAAY,EAAZ;QAAT,CAAV;QACA,QAAA,EAAU,CAAE,CAAF,CAAA,GAAA;iBAAS,CAAE,QAAA,CAAS,CAAT,EAAY,EAAZ,CAAF,CAAkB,CAAC,QAAnB,CAA4B,CAA5B;QAAT;MADV;IAFF,CADF;EA/He;;oCAZjB;;;;;;;;;;;;;;;;;;;;;;;;AAAA",
  "sourcesContent": [
    "\n#...........................................................................................................\n{ assign\n  jr\n  flatten\n  xrpr\n  js_type_of }            = require './helpers'\n\n\n#===========================================================================================================\n# TYPE DECLARATIONS\n#-----------------------------------------------------------------------------------------------------------\n@declare_types = ->\n  ### NOTE to be called as `( require './declarations' ).declare_types.apply instance` ###\n  @declare 'null',                ( x ) => x is null\n  @declare 'undefined',           ( x ) => x is undefined\n  #.........................................................................................................\n  @declare 'boolean',\n    tests:\n      \"x is true or false\":       ( x ) => ( x is true ) or ( x is false )\n    casts:\n      number:                     ( x ) => if x then 1 else 0\n  #.........................................................................................................\n  @declare 'nan',                 ( x ) => Number.isNaN         x\n  @declare 'finite',              ( x ) => Number.isFinite      x\n  @declare 'integer',             ( x ) => Number.isInteger     x\n  @declare 'safeinteger',         ( x ) => Number.isSafeInteger x\n  #.........................................................................................................\n  @declare 'number',\n    tests:                        ( x ) => Number.isFinite      x\n    casts:\n      boolean:                    ( x ) => if x is 0 then false else true\n      integer:                    ( x ) => Math.round x\n  #.........................................................................................................\n  @declare 'frozen',              ( x ) => Object.isFrozen      x\n  @declare 'sealed',              ( x ) => Object.isSealed      x\n  @declare 'extensible',          ( x ) => Object.isExtensible  x\n  #.........................................................................................................\n  @declare 'numeric',             ( x ) => ( js_type_of x ) is 'number'\n  @declare 'function',            ( x ) => ( js_type_of x ) is 'function'\n  @declare 'asyncfunction',       ( x ) => ( js_type_of x ) is 'asyncfunction'\n  @declare 'generatorfunction',   ( x ) => ( js_type_of x ) is 'generatorfunction'\n  @declare 'generator',           ( x ) => ( js_type_of x ) is 'generator'\n  @declare 'date',                ( x ) => ( js_type_of x ) is 'date'\n  @declare 'callable',            ( x ) => ( @type_of x ) in [ 'function', 'asyncfunction', 'generatorfunction', ]\n  #.........................................................................................................\n  @declare 'truthy',              ( x ) => not not x\n  @declare 'falsy',               ( x ) => not x\n  @declare 'true',                ( x ) => x is true\n  @declare 'false',               ( x ) => x is false\n  @declare 'unset',               ( x ) => not x?\n  @declare 'notunset',            ( x ) => x?\n  #.........................................................................................................\n  @declare 'even',                ( x ) => @isa.multiple_of x, 2\n  @declare 'odd',                 ( x ) => not @isa.even x\n  @declare 'count',               ( x ) -> ( @isa.safeinteger x ) and ( @isa.nonnegative x )\n  @declare 'nonnegative',         ( x ) => ( @isa.number x ) and ( x >= 0 )\n  @declare 'positive',            ( x ) => ( @isa.number x ) and ( x > 0 )\n  @declare 'positive_integer',    ( x ) => ( @isa.integer x ) and ( x > 0 )\n  @declare 'negative_integer',    ( x ) => ( @isa.integer x ) and ( x < 0 )\n  @declare 'zero',                ( x ) => x is 0\n  @declare 'infinity',            ( x ) => ( x is +Infinity ) or ( x is -Infinity )\n  @declare 'nonpositive',         ( x ) => ( @isa.number x ) and ( x <= 0 )\n  @declare 'negative',            ( x ) => ( @isa.number x ) and ( x < 0 )\n  @declare 'multiple_of',         ( x, n ) => ( @isa.number x ) and ( x %% n ) is 0\n  #.........................................................................................................\n  @declare 'empty',               ( x ) -> ( @has_size    x ) and ( @size_of x ) == 0\n  @declare 'singular',            ( x ) -> ( @has_size    x ) and ( @size_of x ) == 1\n  @declare 'nonempty',            ( x ) -> ( @has_size    x ) and ( @size_of x ) > 0\n  @declare 'plural',              ( x ) -> ( @has_size    x ) and ( @size_of x ) > 1\n  @declare 'blank_text',          ( x ) -> ( @isa.text    x ) and     ( x.match /// ^ \\s* $ ///us )?\n  @declare 'nonblank_text',       ( x ) -> ( @isa.text    x ) and not ( x.match /// ^ \\s* $ ///us )?\n  @declare 'chr',                 ( x ) -> ( @isa.text    x ) and     ( x.match /// ^  .  $ ///us )?\n  @declare 'nonempty_text',       ( x ) -> ( @isa.text    x ) and ( @isa.nonempty x )\n  @declare 'nonempty_list',       ( x ) -> ( @isa.list    x ) and ( @isa.nonempty x )\n  @declare 'nonempty_object',     ( x ) -> ( @isa.object  x ) and ( @isa.nonempty x )\n  @declare 'nonempty_set',        ( x ) -> ( @isa.set     x ) and ( @isa.nonempty x )\n  @declare 'nonempty_map',        ( x ) -> ( @isa.map     x ) and ( @isa.nonempty x )\n  @declare 'empty_text',          ( x ) -> ( @isa.text    x ) and ( @isa.empty x )\n  @declare 'empty_list',          ( x ) -> ( @isa.list    x ) and ( @isa.empty x )\n  @declare 'empty_object',        ( x ) -> ( @isa.object  x ) and ( @isa.empty x )\n  @declare 'empty_set',           ( x ) -> ( @isa.set     x ) and ( @isa.empty x )\n  @declare 'empty_map',           ( x ) -> ( @isa.map     x ) and ( @isa.empty x )\n  #.........................................................................................................\n  @declare 'buffer',              { size: 'length', },  ( x ) => Buffer.isBuffer x\n  @declare 'arraybuffer',         { size: 'length', },  ( x ) => ( js_type_of x ) is 'arraybuffer'\n  @declare 'int8array',           { size: 'length', },  ( x ) => ( js_type_of x ) is 'int8array'\n  @declare 'uint8array',          { size: 'length', },  ( x ) => ( js_type_of x ) is 'uint8array'\n  @declare 'uint8clampedarray',   { size: 'length', },  ( x ) => ( js_type_of x ) is 'uint8clampedarray'\n  @declare 'int16array',          { size: 'length', },  ( x ) => ( js_type_of x ) is 'int16array'\n  @declare 'uint16array',         { size: 'length', },  ( x ) => ( js_type_of x ) is 'uint16array'\n  @declare 'int32array',          { size: 'length', },  ( x ) => ( js_type_of x ) is 'int32array'\n  @declare 'uint32array',         { size: 'length', },  ( x ) => ( js_type_of x ) is 'uint32array'\n  @declare 'float32array',        { size: 'length', },  ( x ) => ( js_type_of x ) is 'float32array'\n  @declare 'float64array',        { size: 'length', },  ( x ) => ( js_type_of x ) is 'float64array'\n  @declare 'list',                { size: 'length', },  ( x ) => ( js_type_of x ) is 'array'\n  @declare 'set',                 { size: 'size',   },  ( x ) -> ( js_type_of x ) is 'set'\n  @declare 'map',                 { size: 'size',   },  ( x ) -> ( js_type_of x ) is 'map'\n  @declare 'weakmap',                                   ( x ) -> ( js_type_of x ) is 'weakmap'\n  @declare 'weakset',                                   ( x ) -> ( js_type_of x ) is 'weakset'\n  @declare 'error',                                     ( x ) -> ( js_type_of x ) is 'error'\n  @declare 'regex',                                     ( x ) -> ( js_type_of x ) is 'regexp'\n  #.........................................................................................................\n  @declare 'object',\n    tests:  ( x     ) => ( js_type_of x ) is 'object'\n    size:   ( xP... ) => ( @keys_of     xP... ).length\n  #.........................................................................................................\n  @declare 'global',\n    tests:  ( x     ) => ( js_type_of x ) is 'global'\n    size:   ( xP... ) => ( @all_keys_of xP... ).length\n  #.........................................................................................................\n  @declare 'text',\n    tests:  ( x ) => ( js_type_of x ) is 'string'\n    size:   ( x, selector = 'codeunits' ) ->\n      switch selector\n        when 'codepoints' then return ( Array.from x ).length\n        when 'codeunits'  then return x.length\n        when 'bytes'      then return Buffer.byteLength x, ( settings?[ 'encoding' ] ? 'utf-8' )\n        else throw new Error \"unknown counting selector #{rpr selector}\"\n\n  #.........................................................................................................\n  @declare 'list_of',\n    tests:\n      \"x is a list\":              ( type, x, xP... ) => @isa.list x\n      ### TAINT should check for `@isa.type type` ###\n      \"type is nonempty_text\":    ( type, x, xP... ) => @isa.nonempty_text type\n      \"all elements pass test\":   ( type, x, xP... ) => x.every ( xx ) => @isa type, xx, xP...\n\n  #.........................................................................................................\n  @declare 'int2text',\n    tests: ( x ) => ( @isa.text x ) and ( x.match /^[01]+$/ )?\n    casts:\n      number: ( x ) => parseInt x, 2\n  #.........................................................................................................\n  @declare 'int10text',\n    tests: ( x ) => ( @isa.text x ) and ( x.match /^[0-9]+$/ )?\n    casts:\n      number: ( x ) => parseInt x, 10\n  #.........................................................................................................\n  @declare 'int16text',\n    tests: ( x ) => ( @isa.text x ) and ( x.match /^[0-9a-fA-F]+$/ )?\n    casts:\n      number:   ( x ) => parseInt x, 16\n      int2text: ( x ) => ( parseInt x, 16 ).toString 2 ### TAINT could use `cast()` API ###\n\n  ### not supported until we figure out how to do it in strict mode: ###\n  # @declare 'arguments',                     ( x ) -> ( js_type_of x ) is 'arguments'\n\n\n# Array.isArray\n# ArrayBuffer.isView\n# Atomics.isLockFree\n# Buffer.isBuffer\n# Buffer.isEncoding\n# constructor.is\n# constructor.isExtensible\n# constructor.isFrozen\n# constructor.isSealed\n# Number.isFinite\n# Number.isInteger\n# Number.isNaN\n# Number.isSafeInteger\n# Object.is\n# Object.isExtensible\n# Object.isFrozen\n# Object.isSealed\n# Reflect.isExtensible\n# root.isFinite\n# root.isNaN\n# Symbol.isConcatSpreadable\n\n\n"
  ]
}