{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/declarations.coffee"
  ],
  "names": [],
  "mappings": "AACA;EAAA;AAAA,MAAA,GAAA,EAAA,SAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA;IAAA,2DAAA;;;EAGA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,CAAA,CAAE,KAAF,EACE,IADF,EAEE,IAFF,CAAA,GAE4B,GAAG,CAAC,GAAG,CAAC,WAAR,CAAoB,YAApB,CAF5B;;EAGA,CAAA,CAAE,GAAF,CAAA,GAA4B,GAAG,CAAC,GAAhC;;EACA,CAAA,CAAE,SAAF,CAAA,GAA4B,OAAA,CAAQ,OAAR,CAA5B,EARA;;;EAWA,GAAA,GAAM,IAAI,SAAJ,CAEJ,CAAA;;IAAA,OAAA,EACE;MAAA,GAAA,EAAQ,QAAA,CAAE,CAAF,EAAK,CAAL,CAAA;eAAY,MAAM,CAAC,SAAP,CAAiB,CAAjB;MAAZ,CAAR;MACA,GAAA,EAAQ;IADR,CADF;IAGA,GAAA,EACE;MAAA,GAAA,EAAQ,QAAA,CAAE,CAAF,EAAK,CAAL,CAAA;eAAY,CAAE,CAAC,CAAC,GAAF,CAAM,IAAC,CAAA,UAAU,CAAC,OAAlB,EAA2B,CAA3B,CAAF,CAAA,IAAqC,QAAE,GAAK,EAAL,KAAY,CAAd;MAAjD;IAAR,CAJF;;IAMA,IAAA,EAAgB,QAAA,CAAE,CAAF,EAAK,CAAL,CAAA;aAAY,CAAE,CAAC,CAAC,GAAF,CAAM,IAAC,CAAA,UAAU,CAAC,OAAlB,EAA2B,CAA3B,CAAF,CAAA,IAAqC,QAAE,GAAK,EAAL,KAAU,CAAZ;IAAjD,CANhB;IAOA,KAAA,EAAgB,QAAA,CAAE,CAAF,EAAK,CAAL,CAAA;aAAY,MAAM,CAAC,QAAP,CAAgB,CAAhB;IAAZ,CAPhB;IAQA,MAAA,EAAgB,QAAA,CAAE,CAAF,EAAK,CAAL,CAAA;aAAY,OAAO,CAAP,KAAY;IAAxB,CARhB;IASA,IAAA,EAAgB,QAAA,CAAE,CAAF,EAAK,CAAL,CAAA;aAAY,OAAO,CAAP,KAAY;IAAxB,CAThB;IAUA,aAAA,EAAgB,QAAA,CAAE,CAAF,EAAK,CAAL,CAAA;aAAY,CAAE,CAAC,CAAC,GAAF,CAAM,IAAC,CAAA,UAAU,CAAC,IAAlB,EAAwB,CAAxB,CAAF,CAAA,IAAkC,CAAE,CAAC,CAAC,MAAF,GAAW,CAAb;IAA9C;EAVhB,CAFI,EAXN;;;;;;;;;;;;;EAmCA,MAAM,CAAC,OAAP,GAAiB,CAAE,GAAF;AAnCjB",
  "sourcesContent": [
    "\n'use strict'\n\n#===========================================================================================================\nGUY                       = require 'guy'\n{ debug\n  help\n  info }                  = GUY.trm.get_loggers 'demo-execa'\n{ rpr }                   = GUY.trm\n{ Typespace }             = require './lib'\n\n#===========================================================================================================\nstd = new Typespace\n  #.........................................................................................................\n  integer:\n    isa:    ( x, t ) -> Number.isInteger x\n    foo:    4\n  odd:\n    isa:    ( x, t ) -> ( t.isa @$typespace.integer, x ) and ( x %% 2 isnt 0 )\n  # short form just assigns either a test method or a type name:\n  even:           ( x, t ) -> ( t.isa @$typespace.integer, x ) and ( x %% 2 is 0 )\n  float:          ( x, t ) -> Number.isFinite x\n  bigint:         ( x, t ) -> typeof x is 'bigint'\n  text:           ( x, t ) -> typeof x is 'string'\n  nonempty_text:  ( x, t ) -> ( t.isa @$typespace.text, x ) and ( x.length > 0 )\n  #.........................................................................................................\n  # numerical:      ( x, t ) -> ( t.isa @$typespace.float, x   ) or ( t.isa @$typespace.bigint, x )\n  # positive0:      ( x, t ) -> ( t.isa @$typespace.float, x   ) and ( x >= +0  )\n  # positive1:      ( x, t ) -> ( t.isa @$typespace.float, x   ) and ( x >= +1  )\n  # negative0:      ( x, t ) -> ( t.isa @$typespace.float, x   ) and ( x <=  0  )\n  # negative1:      ( x, t ) -> ( t.isa @$typespace.float, x   ) and ( x <= -1  )\n  # cardinal:       ( x, t ) -> ( t.isa @$typespace.integer, x ) and ( t.isa @$typespace.positive0, x )\n  #.........................................................................................................\n  # cardinalbigint: ( x, t ) -> ( t.isa @$typespace.bigint, x    ) and ( x >= +0 )\n\n#===========================================================================================================\nmodule.exports = { std, }\n"
  ]
}