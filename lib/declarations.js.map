{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/declarations.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n#-----------------------------------------------------------------------------------------------------------\n@_provisional_declare_basic_types = ( hub ) ->\n  { declare } = hub\n  #.........................................................................................................\n  declare.null\n    test:       ( x ) -> x is null\n    default:    null\n  #.........................................................................................................\n  declare.boolean\n    test:       ( x ) -> ( x is true ) or ( x is false )\n    default:    false\n  #.........................................................................................................\n  declare.text\n    collection: true\n    test:       ( x ) -> ( typeof x ) is 'string'\n    default:    ''\n  #.........................................................................................................\n  declare.codepoint\n    test:       ( x ) -> /^.$/u.test x\n    default:    '\\x00'\n  #.........................................................................................................\n  declare.codepointid\n    test:       ( x ) -> @isa.integer x and ( 0x00000 <= x <= 0x1ffff )\n    default:    '\\x00'\n  #.........................................................................................................\n  declare.list\n    collection: true\n    test:       ( x ) -> Array.isArray x\n    default:    ''\n  #.........................................................................................................\n  declare.set\n    collection: true\n    test:       ( x ) -> x instanceof Set\n    create:     ( cfg = [] ) -> new Set cfg\n  #.........................................................................................................\n  declare.sized\n    collection: true\n    test:       ( x ) -> ( @size_of x, @_signals.nothing ) isnt @_signals.nothing\n  #.........................................................................................................\n  declare.iterable\n    test:       ( x ) -> x? and x[ Symbol.iterator ]?\n  #.........................................................................................................\n  declare.object\n    test:       ( x ) -> x? and ( typeof x ) is 'object'\n\n  #---------------------------------------------------------------------------------------------------------\n  # Numeric Types\n  #.........................................................................................................\n  declare.numeric\n    test:       ( x ) -> ( Number.isFinite x ) or ( typeof x is 'bigint' )\n    default:    0\n  #.........................................................................................................\n  declare.bigint\n    test:       ( x ) -> typeof x is 'bigint'\n    default:    0n\n  #.........................................................................................................\n  declare.integer\n    test:       ( x ) -> Number.isInteger x\n    default:    0\n  #.........................................................................................................\n  declare.negatable # numeric? numeral?\n    test:       ( x ) -> ( typeof x ) is ( typeof -x )\n    default:    0\n  #.........................................................................................................\n  declare.even default: 0, test: ( x ) ->\n    if ( Number.isInteger x )     then return ( x % 2  ) is   0\n    else if typeof x is 'bigint'  then return ( x % 2n ) is   0n\n    return false\n  #.........................................................................................................\n  declare.odd  default: 1, test: ( x ) ->\n    if ( Number.isInteger x )     then return ( x % 2  ) isnt 0\n    else if typeof x is 'bigint'  then return ( x % 2n ) isnt 0n\n    return false\n\n  #.........................................................................................................\n  return null\n\n\n\n\n"
  ]
}