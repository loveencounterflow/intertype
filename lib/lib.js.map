{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/lib.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n#===========================================================================================================\nGUY                       = require 'guy'\n{ debug\n  info\n  warn }                  = GUY.trm.get_loggers 'demo-execa'\n{ rpr }                   = GUY.trm\n{ hide }                  = GUY.props\n{ props: {\n    nameit } }            = require 'webguy'\n\n\n#===========================================================================================================\n$isa =\n  text:             ( x ) -> ( typeof x is 'string' )\n  nonempty_text:    ( x ) -> ( typeof x is 'string' ) and ( x.length > 0 )\n  function:         ( x ) -> ( Object::toString.call x ) is '[object Function]'\n  pod:              ( x ) -> x? and x.constructor in [ Object, undefined, ]\n  primitive:        ( x ) -> $primitive_types.includes $type_of x\n  object:           ( x ) -> x? and x instanceof Object\n  type:             ( x ) -> x instanceof Type\n  typespace:        ( x ) -> x instanceof Typespace\n  intertype:        ( x ) -> x instanceof Intertype\n  # nan:                    ( x ) => Number.isNaN         x\n\n#-----------------------------------------------------------------------------------------------------------\n$primitive_types = Object.freeze [\n  'null', 'undefined', 'infinity', 'boolean', 'nan', 'float', 'anyfloat', 'text', ]\n\n#-----------------------------------------------------------------------------------------------------------\n$type_of = ( x ) ->\n  #.........................................................................................................\n  ### Primitives: ###\n  return 'null'         if x is null\n  return 'undefined'    if x is undefined\n  return 'infinity'     if ( x is +Infinity ) or ( x is -Infinity )\n  return 'boolean'      if ( x is true ) or ( x is false )\n  return 'nan'          if Number.isNaN     x\n  return 'float'        if Number.isFinite  x\n  # return 'pod'          if $isa.pod x\n  #.........................................................................................................\n  switch jstypeof = typeof x\n    when 'string'                       then return 'text'\n  #.........................................................................................................\n  return 'list'         if Array.isArray  x\n  ### TAINT consider to return x.constructor.name ###\n  millertype = Object::toString.call x\n  return ( millertype.replace /^\\[object ([^\\]]+)\\]$/, '$1' ).toLowerCase()\n  # switch millertype = Object::toString.call x\n  #   when '[object Function]'            then return 'function'\n  #   when '[object AsyncFunction]'       then return 'asyncfunction'\n  #   when '[object GeneratorFunction]'   then return 'generatorfunction'\n\n\n#===========================================================================================================\nclass Intertype\n\n  #---------------------------------------------------------------------------------------------------------\n  @primitive_types = $primitive_types\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    hide @, 'isa',        @isa.bind       @\n    hide @, 'validate',   @validate.bind  @\n    hide @, 'create',     @create.bind    @\n    hide @, 'type_of',    @type_of.bind   @\n    hide @, 'types_of',   @types_of.bind  @\n    hide @, 'memo',       new Map()\n    hide @, '_recording', false\n    hide @, '_journal',   null\n    hide @, '_stack',     null\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  isa: ( type, x ) ->\n    ### TAINT use proper validation ###\n    unless type instanceof Type\n      throw new Error \"Ω___1 expected an instance of `Type`, got a #{$type_of R}\"\n    #.......................................................................................................\n    if @_recording\n      @_stack.push type.$typename\n      @_journal.push entry = {}\n    #.......................................................................................................\n    unless ( R = type.isa.call type, x, @ ) in [ true, false, ]\n      throw new Error \"Ω___2 expected `true` or `false`, got a #{$type_of R}\"\n    #.......................................................................................................\n    if @_recording\n      stack = @_stack.join '/'\n      @_stack.pop()\n      Object.assign entry, { type: type.$typename, stack, value: x, verdict: R, }\n    #.......................................................................................................\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  @type_of: $type_of\n  type_of:  $type_of\n\n  #---------------------------------------------------------------------------------------------------------\n  types_of: ( typespace, x ) ->\n    unless typespace instanceof Typespace\n      throw new Error \"Ω___3 expected an instance of Typespace, got a #{$type_of x}\"\n    return ( typename for typename, type of typespace when @isa type, x )\n\n  #---------------------------------------------------------------------------------------------------------\n  validate: ( type, x ) ->\n    return x if @isa type, x\n    throw new Error \"Ω___4 expected a #{type.$typename}, got a #{$type_of x}\"\n\n  #---------------------------------------------------------------------------------------------------------\n  evaluate: ( type, x ) ->\n    @_recording = true\n    @_journal   = []\n    @_stack     = []\n    #.......................................................................................................\n    @isa type, x\n    #.......................................................................................................\n    R           = @_journal\n    @_recording = false\n    @_journal   = null\n    @_stack     = null\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  equals: ( a, b ) ->\n    throw new Error \"Ω___5 not yet implemented\"\n\n  #---------------------------------------------------------------------------------------------------------\n  create: ( type, P... ) ->\n    unless type instanceof Type\n      throw new Error \"Ω___6 expected an instance of Type, got a #{$type_of type}\"\n    return type.create.call type, P...\n\n  # #---------------------------------------------------------------------------------------------------------\n  # copy_template: ( type ) ->\n  #   return x if $isa.primitive x\n  #   return x.call\n\n\n#===========================================================================================================\nclass Type\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( typespace, typename, declaration ) ->\n    @$typename = typename\n    hide @, '$typespace', typespace\n    #.......................................................................................................\n    declaration = @_declaration_as_pod          typespace, typename, declaration\n    @_declaration_isa_as_function typespace, typename, declaration\n    @_compile_declaration_fields  typespace, typename, declaration\n    # @_compile_declaration_create  typespace, typename, declaration\n    #.......................................................................................................\n    for key, value of declaration\n      ### TAINT check for overrides ###\n      hide @, key, value\n    #.......................................................................................................\n    ### TAINT perform validation of resulting shape here ###\n    #.......................................................................................................\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _declaration_as_pod: ( typespace, typename, declaration ) ->\n    return ( do ( isa = declaration ) -> { isa, } ) unless $isa.pod declaration\n    return declaration\n\n  #---------------------------------------------------------------------------------------------------------\n  _declaration_isa_as_function: ( typespace, typename, declaration ) ->\n    if declaration.fields? then @_compile_isa_with_fields     typespace, typename, declaration\n    else                        @_compile_isa_without_fields  typespace, typename, declaration\n    nameit typename, declaration.isa\n    return declaration\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_isa_with_fields: ( typespace, typename, declaration ) ->\n    return null if $isa.function declaration.isa\n    check_fields = @_get_fields_check typespace, typename, declaration\n    switch true\n      #.....................................................................................................\n      when $isa.type declaration.isa\n        declaration.isa = do ( type = declaration.isa ) => ( x, t ) ->\n          ( t.isa type, x ) and ( check_fields.call @, x, t )\n      #.....................................................................................................\n      when $isa.nonempty_text declaration.isa\n        declaration.isa = do ( typeref = declaration.isa ) => ( x, t ) ->\n          unless $isa.type ( type = typespace[ typeref ] )\n            throw new Error \"Ω__12 expected typeref #{rpr typeref} to give a type, got a #{$type_of declaration.isa}\"\n          ( t.isa type, x ) and ( check_fields.call @, x, t )\n      #.....................................................................................................\n      when not declaration.isa?\n        declaration.isa = check_fields\n      #.....................................................................................................\n      else\n        throw new Error \"Ω__13 expected `declaration.isa` to be a function, a type or a typeref, got a #{$type_of declaration.isa}\"\n    return declaration\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_isa_without_fields: ( typespace, typename, declaration ) ->\n    return null if $isa.function declaration.isa\n    switch true\n      #.....................................................................................................\n      when $isa.type declaration.isa\n        declaration.isa = do ( type = declaration.isa ) => ( x, t ) -> t.isa type, x\n      #.....................................................................................................\n      when $isa.nonempty_text declaration.isa\n        declaration.isa = do ( typeref = declaration.isa ) => ( x, t ) ->\n          unless $isa.type ( type = typespace[ typeref ] )\n            throw new Error \"Ω__14 expected typeref #{rpr typeref} to give a type, got a #{$type_of declaration.isa}\"\n          t.isa type, x\n      #.....................................................................................................\n      when not declaration.isa?\n        declaration.isa = ( x, t ) -> $isa.pod x\n      #.....................................................................................................\n      else\n        throw new Error \"Ω__15 expected `declaration.isa` to be a function, a type or a typeref, got a #{$type_of declaration.isa}\"\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_declaration_fields: ( typespace, typename, declaration ) ->\n    return declaration unless declaration.fields?\n    unless $isa.pod declaration.fields\n      throw new Error \"Ω__16 expected `fields` to be a POD, got a #{$type_of declaration.fields}\"\n    #.......................................................................................................\n    for field_name, field_declaration of declaration.fields\n      field_typename = \"#{typename}_$#{field_name}\"\n      declaration.fields[ field_name ] = \\\n        typespace[ field_typename ] = new Type typespace, field_typename, field_declaration\n    #.......................................................................................................\n    declaration.isa = @_get_fields_check typespace, typename, declaration\n    return declaration\n\n  #---------------------------------------------------------------------------------------------------------\n  _get_fields_check: ( typespace, typename, declaration ) ->\n    return ( x, t ) ->\n      for field_name, field_type of @fields\n        return false unless x? and t.isa field_type, x[ field_name ]\n      return true\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_declaration_create: ( typespace, typename, declaration ) ->\n    switch true\n      when ( ( not declaration.create? ) and ( not declaration.fields? ) )\n        if declaration.template?\n          throw new Error \"Ω__17 MEH-create-1 unable to create value of type #{rpr typename}\"\n        declaration.create = -> throw new Error \"Ω__18 MEH-create-1 unable to create value of type #{rpr typename}\"\n    return declaration\n\n\n#===========================================================================================================\nclass Typespace\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( typespace_cfg ) ->\n    for typename, declaration of typespace_cfg\n      ### TAINT check for overrides ###\n      declaration   = new Type @, typename, declaration unless declaration instanceof Type\n      @[ typename ] = declaration\n    return undefined\n\n\n#===========================================================================================================\n# if module is require.main then await do =>\ndo =>\n  types = new Intertype()\n  module.exports = { Intertype, Type, Typespace, types,  $isa, $type_of, }\n"
  ]
}