{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/builtins.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n\n#-----------------------------------------------------------------------------------------------------------\nprimitive_types     = Object.freeze [ 'null', 'undefined', 'infinity', 'boolean', 'nan', 'float', 'anyfloat', 'text', ]\n# declaration_$kinds  = Object.freeze [ '$independent', '$dependent', '$enumeration', '$record', '$variant', ]\ndeclaration_$kinds  = Object.freeze [ '$unspecified', '$enumeration', '$record', '$variant', ]\n\n#-----------------------------------------------------------------------------------------------------------\nisa =\n  text:               ( x ) -> ( typeof x is 'string' )\n  nonempty_text:      ( x ) -> ( typeof x is 'string' ) and ( x.length > 0 )\n  function:           ( x ) -> ( Object::toString.call x ) is '[object Function]'\n  pod:                ( x ) -> x? and x.constructor in [ Object, undefined, ]\n  list:               ( x ) -> Array.isArray  x\n  primitive:          ( x ) -> primitive_types.includes type_of x\n  object:             ( x ) -> x? and x instanceof Object\n  type:               ( x ) -> x instanceof Type\n  typespace:          ( x ) -> x instanceof Typespace\n  intertype:          ( x ) -> x instanceof Intertype\n  declaration_$kind:  ( x ) -> x in declaration_$kinds\n  # nan:                    ( x ) => Number.isNaN         x\n\n#-----------------------------------------------------------------------------------------------------------\ntype_of = ( x ) ->\n  #.........................................................................................................\n  ### Primitives: ###\n  return 'null'         if x is null\n  return 'undefined'    if x is undefined\n  return 'infinity'     if ( x is +Infinity ) or ( x is -Infinity )\n  return 'boolean'      if ( x is true ) or ( x is false )\n  return 'nan'          if Number.isNaN     x\n  return 'float'        if Number.isFinite  x\n  # return 'pod'          if B.isa.pod x\n  #.........................................................................................................\n  switch jstypeof = typeof x\n    when 'string'                       then return 'text'\n  #.........................................................................................................\n  return 'list'         if Array.isArray  x\n  ### TAINT consider to return x.constructor.name ###\n  millertype = Object::toString.call x\n  return ( millertype.replace /^\\[object ([^\\]]+)\\]$/, '$1' ).toLowerCase()\n  # switch millertype = Object::toString.call x\n  #   when '[object Function]'            then return 'function'\n  #   when '[object AsyncFunction]'       then return 'asyncfunction'\n  #   when '[object GeneratorFunction]'   then return 'generatorfunction'\n\n\n#===========================================================================================================\nmodule.exports = { isa, type_of, primitive_types, declaration_$kinds, }\n"
  ]
}