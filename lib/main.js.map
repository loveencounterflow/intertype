{
  "version": 3,
  "file": "main.js",
  "sourceRoot": "..",
  "sources": [
    "src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'INTERTYPE/MAIN'\ndebug                     = CND.get_logger 'debug',     badge\nalert                     = CND.get_logger 'alert',     badge\nwhisper                   = CND.get_logger 'whisper',   badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\ninfo                      = CND.get_logger 'info',      badge\n#...........................................................................................................\nMultimix                  = require 'multimix'\n#...........................................................................................................\n{ assign\n  jr\n  flatten\n  xrpr\n  get_rprs_of_tprs\n  js_type_of }            = require './helpers'\n#...........................................................................................................\ndeclarations              = require './declarations'\n\n\n#-----------------------------------------------------------------------------------------------------------\nisa = ( type, xP... ) -> @_satisfies_all_aspects type, xP...\n\n#-----------------------------------------------------------------------------------------------------------\nisa_list_of = ( type, xP... ) -> @isa.list_of type, xP...\n\n#-----------------------------------------------------------------------------------------------------------\ncast = ( type_a, type_b, x, xP... ) ->\n  @validate type_a, x, xP...\n  return x if type_a is type_b\n  return x if @isa type_b, x, xP...\n  if ( casts = @specs[ type_a ].casts )?\n    return ( converter.call @, x, xP... ) if ( converter = casts[ type_b ] )?\n  return \"#{x}\" if type_b is 'text' ### TAINT use better method like util.inspect ###\n  throw new Error \"µ30981 unable to cast a #{type_a} as #{type_b}\"\n\n#-----------------------------------------------------------------------------------------------------------\nvalidate = ( type, xP... ) ->\n  return true unless ( aspect = @_get_unsatisfied_aspect type, xP... )?\n  [ x, P..., ] = xP\n  { rpr_of_tprs, srpr_of_tprs, } = get_rprs_of_tprs P\n  message = if aspect is 'main'\n    \"µ3093 not a valid #{type}: #{xrpr x}#{srpr_of_tprs}\"\n  else\n    \"µ3093 not a valid #{type} (violates #{rpr aspect}): #{xrpr x}#{srpr_of_tprs}\"\n  throw new Error message\n\n#===========================================================================================================\nclass @Intertype extends Multimix\n  # @extend   object_with_class_properties\n  @include require './cataloguing'\n  @include require './sizing'\n  @include require './declaring'\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( target = null ) ->\n    super()\n    @specs        = {}\n    @isa          = Multimix.get_keymethod_proxy @, isa\n    @isa.xlist_of  = Multimix.get_keymethod_proxy @, isa_list_of\n    @cast         = Multimix.get_keymethod_proxy @, cast\n    @validate     = Multimix.get_keymethod_proxy @, validate\n    declarations.declare_types.apply @\n    @export target if target?\n\n\n\n"
  ]
}