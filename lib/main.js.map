{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ debug\n  info\n  warn\n  urge\n  help }                  = GUY.trm.get_loggers 'INTERTYPE'\n{ rpr }                   = GUY.trm\n#...........................................................................................................\nE                         = require './errors'\nH                         = require './helpers'\nHEDGES                    = require './hedges'\nDECLARATIONS              = require './declarations'\n{ Type_factory }          = require './type-factory'\n{ to_width }              = require 'to-width'\n\n\n\n#===========================================================================================================\nclass Intertype extends H.Intertype_abc\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    super()\n    @data = {}\n    #.......................................................................................................\n    clone = false\n    if cfg instanceof @constructor\n      clone = true\n      [ cfg, other, ] = [ { cfg.cfg..., }, cfg, ]\n    GUY.props.hide @, 'cfg',          { H.defaults.Intertype_constructor_cfg..., cfg..., }\n    H.types.validate.Intertype_constructor_cfg @cfg\n    #.......................................................................................................\n    GUY.props.hide @, '_hedges',      new HEDGES.Intertype_hedges()\n    GUY.props.hide @, '_collections', new Set()\n    GUY.props.hide @, '_signals',     H.signals\n    # GUY.props.hide @, 'isa',      new GUY.props.Strict_owner { reset: false, }\n    GUY.props.hide @, 'isa',          new Proxy {}, @_get_hedge_base_proxy_cfg @, '_isa'\n    GUY.props.hide @, 'cast',         new Proxy {}, @_get_hedge_base_proxy_cfg @, '_cast'\n    GUY.props.hide @, 'validate',     new Proxy {}, @_get_hedge_base_proxy_cfg @, '_validate'\n    GUY.props.hide @, 'create',       new Proxy {}, @_get_hedge_base_proxy_cfg @, '_create'\n    GUY.props.hide @, 'type_factory', new Type_factory @\n    GUY.props.hide @, 'overrides',    []\n    #.......................................................................................................\n    ### TAINT squeezing this in here for the moment, pending reformulation of `isa` &c to make them callable: ###\n    GUY.props.hide @, 'declare',      new Proxy ( @_declare.bind @ ), get: ( _, name ) => ( P... ) =>\n      @_declare name, P...\n    GUY.props.hide @, 'remove',       new Proxy ( @_remove.bind  @ ), get: ( _, name ) => ( P... ) =>\n      @_remove name, P...\n    #.......................................................................................................\n    GUY.props.hide @, 'registry',     GUY.props.Strict_owner.create()\n    # GUY.props.hide @, 'types',        H.types\n    @_initialize_state()\n    #.......................................................................................................\n    @_register_hedges()\n    #.......................................................................................................\n    if clone\n      for type, dsc of other.registry\n        continue if GUY.props.has @registry, type\n        ### TAINT this is a kludge ###\n        @declare[ type ]\n          isa:          dsc\n          name:         GUY.props.get dsc, 'name',        H.defaults.Type_factory_type_dsc.name\n          typename:     GUY.props.get dsc, 'typename',    H.defaults.Type_factory_type_dsc.typename\n          fields:       GUY.props.get dsc, 'fields',      H.defaults.Type_factory_type_dsc.fields\n          collection:   GUY.props.get dsc, 'collection',  H.defaults.Type_factory_type_dsc.collection\n          create:       GUY.props.get dsc, 'create',      H.defaults.Type_factory_type_dsc.create\n          freeze:       GUY.props.get dsc, 'freeze',      H.defaults.Type_factory_type_dsc.freeze\n          extras:       GUY.props.get dsc, 'extras',      H.defaults.Type_factory_type_dsc.extras\n          template:     GUY.props.get dsc, 'template',    H.defaults.Type_factory_type_dsc.template\n          override:     GUY.props.get dsc, 'override',    H.defaults.Type_factory_type_dsc.override\n    else\n      DECLARATIONS._provisional_declare_basic_types @\n    #.......................................................................................................\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _initialize_state: ( cfg ) ->\n    ### TAINT should use deep copy of template object ###\n    return @state = { H.defaults.Intertype_state..., hedgeresults: [], cfg..., }\n\n  #---------------------------------------------------------------------------------------------------------\n  _register_hedges: ->\n    for hedge, isa of @_hedges._hedgemethods\n      do ( hedge, isa ) =>\n        @declare hedge, { isa, }\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  ### TAINT ideally would put this stuff elsewhere ###\n  _get_hedge_base_proxy_cfg: ( self, method_name ) ->\n    # _method_name  = method_name\n    # _method_name  = \"_#{method_name}\" unless _method_name.startsWith '_'\n    #.......................................................................................................\n    return\n      get: ( target, key ) =>\n        return undefined          if key is Symbol.toStringTag\n        return target.constructor if key is 'constructor'\n        return target.toString    if key is 'toString'\n        return target.call        if key is 'call'\n        return target.apply       if key is 'apply'\n        #...................................................................................................\n        self._initialize_state()\n        self.state.method       = method_name\n        self.state.verb         = method_name[ 1... ]\n        self.state.hedges       = [ key, ]\n        self.state.hedgerow     = key\n        #...................................................................................................\n        if key in [ 'of', 'or', ]\n          throw new E.Intertype_ETEMPTBD '^intertype.base_proxy@2^', \\\n            \"hedgerow cannot start with `#{key}`, must be preceeded by hedge\"\n        unless ( GUY.props.get @registry, key, null )?\n          throw new E.Intertype_ETEMPTBD '^intertype.base_proxy@3^', \"unknown hedge or type #{rpr key}\"\n        #...................................................................................................\n        return R if ( R = GUY.props.get target, key, H.signals.nothing ) isnt H.signals.nothing\n        #...................................................................................................\n        ### TAINT code below never used? ###\n        if method_name is '_create'\n          f = H.nameit key, ( cfg = null ) -> self[ self.state.method ] key, cfg\n        else if method_name is '_cast'\n          f = H.nameit key, ( P... ) -> self[ self.state.method ] key, P...\n        else\n          f = H.nameit key, ( P... ) -> self[ self.state.method ] P...\n        GUY.props.hide target, key, R = new Proxy f, @_get_hedge_sub_proxy_cfg self\n        return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _get_hedge_sub_proxy_cfg: ( self ) ->\n    return\n      get: ( target, key ) =>\n        return undefined          if key is Symbol.toStringTag\n        return target.constructor if key is 'constructor'\n        return target.toString    if key is 'toString'\n        return target.call        if key is 'call'\n        return target.apply       if key is 'apply'\n        self.state.hedges.push key\n        self.state.hedgerow = self.state.hedges.join self.cfg.sep\n        return R if ( R = GUY.props.get target, key, H.signals.nothing ) isnt H.signals.nothing\n        #...................................................................................................\n        unless ( type_dsc = GUY.props.get @registry, key, null )?\n          throw new E.Intertype_ETEMPTBD '^intertype.base_proxy@4^', \"unknown hedge or type #{rpr key}\"\n        #...................................................................................................\n        ### check for preceding type being iterable when building hedgerow with `of`: ###\n        if ( key is 'of' ) and ( not @_collections.has target.name )\n          throw new E.Intertype_ETEMPTBD '^intertype.sub_proxy@5^', \\\n            \"expected type before `of` to be a collection, got #{rpr target.name}\"\n        #...................................................................................................\n        f = H.nameit key, ( x ) -> self[ self.state.method ] self.state.hedges..., x\n        GUY.props.hide target, key, R = new Proxy f, @_get_hedge_sub_proxy_cfg self\n        return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _remove: ( typename ) ->\n    unless ( dsc = GUY.props.get @registry, typename, null )?\n      throw new E.Intertype_ETEMPTBD '^intertype.remove@5^', \"unable to remove unknown type #{rpr typename}\"\n    delete @registry[ typename ]\n    @_remove_override dsc if dsc.override\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _declare: ( P... ) ->\n    ### TAINT handling of arguments here shimmed while we have not yet nailed down the exact calling\n    convention for this method. ###\n    dsc                       = @type_factory.create_type P...\n    #.......................................................................................................\n    if ( old_dsc = GUY.props.get @registry, dsc.typename, null )?\n      unless dsc.replace\n        throw new E.Intertype_ETEMPTBD '^intertype.declare@5^', \\\n          \"unable to re-declare #{rpr dsc.typename} (set `replace: true` to allow this)\"\n    #.......................................................................................................\n    @registry[ dsc.typename ] = dsc\n    ### TAINT need not call _get_hedge_sub_proxy_cfg() twice? ###\n    @isa[      dsc.typename ] = new Proxy dsc, @_get_hedge_sub_proxy_cfg @\n    dscv                      = H.nameit dsc.typename, ( x ) => @_validate dsc.typename, x\n    @validate[ dsc.typename ] = new Proxy dscv, @_get_hedge_sub_proxy_cfg @\n    @_collections.add dsc.typename if dsc.collection\n    if old_dsc?.override\n      if dsc.override then  @_replace_override  dsc\n      else                  @_remove_override   dsc\n    else\n      if dsc.override then  @_add_override      dsc\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _add_override: ( dsc ) ->\n    @overrides.unshift [ dsc.typename, dsc, ]\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _remove_override: ( dsc ) ->\n    for idx in [ @overrides.length - 1 .. 0 ] by -1\n      continue unless @overrides[ idx ][ 0 ] is dsc.typename\n      @overrides.splice idx, 1\n      break\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _replace_override: ( dsc ) ->\n    for idx in [ @overrides.length - 1 .. 0 ] by -1\n      continue unless @overrides[ idx ][ 0 ] is dsc.typename\n      @overrides[ idx ][ 1 ] = dsc\n      break\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _validate_hedgerow: ( hedgerow ) ->\n    if ( hedgerow[ 0 ] in [ 'of', 'or', ] ) or ( hedgerow[ hedgerow.length - 1 ] in [ 'of', 'or', ] )\n      xr = rpr hedgerow.join @cfg.sep\n      throw new E.Intertype_ETEMPTBD '^intertype.validate_hedgerow@6^', \\\n        \"hedgerow cannot begin or end with `of` or `or`, must be surrounded by hedges, got #{xr}\"\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _isa: ( hedges..., x ) ->\n    @state.isa_depth++\n    R = false\n    try\n      R = @state.result = @_inner_isa hedges..., x\n    catch error\n      throw error if @cfg.errors or error instanceof E.Intertype_error\n      @state.error = error\n    @state.isa_depth--\n    return @state.result = R\n\n  #---------------------------------------------------------------------------------------------------------\n  _inner_isa: ( hedges..., x ) ->\n    @_validate_hedgerow hedges\n    hedge_idx       = -1\n    last_hedge_idx  = hedges.length - 1\n    advance         = false\n    is_terminal     = false\n    R               = true\n    #.......................................................................................................\n    loop\n      hedge_idx++\n      if hedge_idx > last_hedge_idx\n        return ( R )                                                                # exit point\n      hedge       = hedges[ hedge_idx ]\n      is_terminal = ( hedges[ hedge_idx + 1 ] is 'or' ) or ( hedge_idx is last_hedge_idx )\n      #.....................................................................................................\n      if advance\n        return ( false ) if is_terminal                                             # exit point\n        continue unless hedge is 'or'\n      advance = false\n      #.....................................................................................................\n      switch hedge\n        #...................................................................................................\n        when 'of'\n          @push_hedgeresult [ '▲ii1', @state.isa_depth, 'of', x, true, ]\n          tail_hedges = hedges[ hedge_idx + 1 .. ]\n          try\n            for element from x\n              # return ( false ) if ( @_inner_isa tail_hedges..., element ) is false  # exit point\n              return ( false ) if ( @_isa tail_hedges..., element ) is false  # exit point\n          catch error\n            throw error unless ( error.name is 'TypeError' ) and ( error.message is 'x is not iterable' )\n            throw new E.Intertype_ETEMPTBD '^intertype.isa@7^', \\\n              \"`of` must be preceded by collection name, got #{rpr hedges[ hedge_idx - 1 ]}\"\n          return ( true )                                                           # exit point\n        #...................................................................................................\n        when 'or'\n          @push_hedgeresult [ '▲ii2', @state.isa_depth, 'or', x, true, ]\n          R = true\n          continue\n      #.....................................................................................................\n      unless ( type_dsc = GUY.props.get @registry, hedge, null )?\n        throw new E.Intertype_ETEMPTBD '^intertype.isa@8^', \"unknown hedge or type #{rpr hedge}\"\n      #.....................................................................................................\n      # @push_hedgeresult hedgeresult = [ '▲ii3', @state.isa_depth, type_dsc.name, x, ]\n      result = type_dsc.call @, x\n      # hedgeresult.push result\n      switch result\n        when H.signals.return_true\n          return true\n        when false\n          advance = true\n          R       = false\n          continue\n        when true\n          return true if is_terminal\n          continue\n      #.....................................................................................................\n      throw new E.Intertype_internal_error '^intertype.isa@9^', \\\n        \"unexpected return value from hedgemethod for hedge #{rpr hedge}: #{rpr result}\"\n    #.......................................................................................................\n    return ( R )                                                                    # exit point\n\n  #---------------------------------------------------------------------------------------------------------\n  _validate: ( hedges..., x ) ->\n    return x if @_isa hedges..., x\n    state_report  = @get_state_report { format: 'short', colors: false, width: 500, }\n    state_report += '\\n'\n    state_report += GUY.trm.reverse GUY.trm.red \"\\n Validation Failure \"\n    state_report += '\\n'\n    state_report += ( @get_state_report { format: 'failing', } ).trim()\n    state_report += '\\n'\n    state_report += GUY.trm.reverse GUY.trm.red \" Validation Failure \\n\"\n    throw new E.Intertype_validation_error '^intertype.validate@3^', @state, state_report\n\n  #---------------------------------------------------------------------------------------------------------\n  _create: ( type, cfg ) ->\n    create = null\n    #.......................................................................................................\n    unless ( type_dsc = GUY.props.get @registry, type, null )?\n      throw new E.Intertype_ETEMPTBD '^intertype.create@11^', \"unknown type #{rpr type}\"\n    #.......................................................................................................\n    ### Try to get `create` method, or, should that fail, the `template` value. Throw error when neither\n    `create` nor `template` are given: ###\n    if ( create = GUY.props.get type_dsc, 'create', null ) is null\n      if ( template = GUY.props.get type_dsc, 'template', H.signals.nothing ) is H.signals.nothing\n        throw new E.Intertype_ETEMPTBD '^intertype.create@12^', \\\n          \"type #{rpr type} does not have a `template` value or a `create()` method\"\n    #.......................................................................................................\n    return @_validate type, @_create_no_validation { create, template, freeze: type_dsc.freeze, cfg, }\n\n  #---------------------------------------------------------------------------------------------------------\n  _create_no_validation: ({ create, template, freeze, cfg }) ->\n    #.......................................................................................................\n    if create?\n      R = create.call @, cfg\n    #.......................................................................................................\n    else\n      if cfg?\n        if ( t = H.js_type_of template ) is '[object Object]' or t is '[object Array]'\n          R = Object.assign ( H.deep_copy template ), cfg\n        else\n          R = cfg\n      else\n        R = H.deep_copy template\n    #.......................................................................................................\n    if      freeze in [ true, 'shallow', ] then R = Object.freeze R\n    else if freeze is 'deep'               then R = GUY.lft.freeze H.deep_copy R\n    #.......................................................................................................\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _cast: ( type, P... ) ->\n    cast = null\n    #.......................................................................................................\n    unless ( type_dsc = GUY.props.get @registry, type, null )?\n      throw new E.Intertype_ETEMPTBD '^intertype.cast@11^', \"unknown type #{rpr type}\"\n    unless ( cast = GUY.props.get type_dsc, 'cast', null )?\n      throw new E.Intertype_ETEMPTBD '^intertype.cast@11^', \"type #{rpr type} does not have a `cast` method\"\n    #.......................................................................................................\n    ### NOTE we *could* call `create`, `validate`, but should we? ###\n    # return ( @create[ type ] cast.call @, P... ) if GUY.props.has type.dsc, 'create'\n    return @validate[ type ] cast.call @, P...\n    # return cast.call @, P...\n\n  #---------------------------------------------------------------------------------------------------------\n  equals:                     H.equals\n  deep_copy:                  H.deep_copy\n  type_of:                    ( x ) => H.type_of x, @overrides\n  size_of:                    H.size_of.bind H\n  _normalize_type:            H._normalize_type.bind H\n  _split_hedgerow_text:       ( hedgerow ) -> hedgerow.split @cfg.sep\n\n  #---------------------------------------------------------------------------------------------------------\n  is_extension_of: ( Derived, Base ) ->\n    return true if Derived is Base\n    try return ( (Derived::) instanceof Base ) catch error then return false\n\n  #---------------------------------------------------------------------------------------------------------\n  get_state_report: ( cfg ) -> H.get_state_report @, cfg\n\n  #---------------------------------------------------------------------------------------------------------\n  push_hedgeresult: ( hedgeresult ) ->\n    ### [ ref, level, hedge, value, r, ] = hedgeresult ###\n    [ ref, level, hedge, value, r, ] = hedgeresult\n    H.types.validate.nonempty_text  ref\n    # H.types.validate.cardinal       level\n    H.types.validate.nonempty_text  hedge\n    # H.types.validate.boolean        r\n    @state.hedgeresults.push hedgeresult\n    return hedgeresult.at -1\n\n  # #-----------------------------------------------------------------------------------------------------------\n  # _walk_hedgepaths: ( cfg ) ->\n  #   throw new Error \"^intertype._walk_hedgepaths@9^ not implemented\"\n  #   # cfg = { H.defaults.Intertype_walk_hedgepaths_cfg..., cfg..., }\n  #   # yield from GUY.props.walk_tree @isa, cfg\n  #   # return null\n\n\n############################################################################################################\n@Type_factory         = Type_factory\n@Intertype            = Intertype\n@Intertype_user_error = E.Intertype_user_error\n@equals               = H.equals\n@deep_copy            = H.deep_copy\n\n"
  ]
}