{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ debug\n  warn\n  urge\n  help }                  = GUY.trm.get_loggers 'INTERTYPE'\n{ rpr }                   = GUY.trm\n#...........................................................................................................\nE                         = require './errors'\nH                         = require './helpers'\nHEDGES                    = require './hedges'\nDECLARATIONS              = require './declarations'\nITYP                      = @\ntypes                     = new ( require 'intertype-legacy' ).Intertype()\n@defaults                 = {}\n{ to_width }              = require 'to-width'\ndeep_copy                 = structuredClone\nequals                    = require '../deps/jkroso-equals'\n\n#-----------------------------------------------------------------------------------------------------------\ntypes.declare 'deep_boolean', ( x ) -> x in [ 'deep', false, true, ]\n\n#-----------------------------------------------------------------------------------------------------------\ntypes.declare 'Type_cfg_constructor_cfg', tests:\n  \"@isa.object x\":                            ( x ) -> @isa.object x\n  \"@isa.nonempty_text x.name\":                ( x ) -> @isa.nonempty_text x.name\n  # \"@isa.deep_boolean x.copy\":                 ( x ) -> @isa.boolean x.copy\n  # \"@isa.boolean x.seal\":                      ( x ) -> @isa.boolean x.seal\n  \"@isa.deep_boolean x.freeze\":               ( x ) -> @isa.deep_boolean x.freeze\n  \"@isa.boolean x.extras\":                    ( x ) -> @isa.boolean x.extras\n  \"if extras is false, default must be an object\": \\\n    ( x ) -> ( x.extras ) or ( @isa.object x.default )\n  \"@isa_optional.function x.create\":          ( x ) -> @isa_optional.function x.create\n  \"x.test is a function or non-empty list of functions\": ( x ) ->\n    return true if @isa.function x.test\n    return false unless @isa_list_of.function x.test\n    return false if x.test.length is 0\n    return true\n  \"x.groups is a nonempty text or a nonempty list of nonempty texts\": ( x ) ->\n    return true if @isa.nonempty_text x.groups\n    return false unless @isa.list x.groups\n    return x.groups.every ( e ) => ( @isa.nonempty_text e ) and not ( /[\\s,]/ ).test e\n#...........................................................................................................\n@defaults.Type_cfg_constructor_cfg =\n  groups:           'other'\n  name:             null\n  test:             null\n  ### `default` omitted on purpose ###\n  create:           null\n  # copy:             false\n  # seal:             false\n  freeze:           false\n  extras:           true\n\n#-----------------------------------------------------------------------------------------------------------\ntypes.declare 'Intertype_constructor_cfg', tests:\n  \"@isa.object x\":                            ( x ) -> @isa.object x\n  \"@isa_optional.nonempty_text x.sep\":        ( x ) -> @isa_optional.nonempty_text x.sep\n#...........................................................................................................\n@defaults.Intertype_constructor_cfg =\n  sep:              '.'\n\n# #-----------------------------------------------------------------------------------------------------------\n# types.declare 'Intertype_walk_hedgepaths_cfg', tests:\n#   \"@isa.object x\":                      ( x ) -> @isa.object x\n#   \"@isa_optional.nonempty_text x.sep\":  ( x ) -> @isa_optional.nonempty_text x.sep\n#   \"@isa_optional.function x.evaluate\":  ( x ) -> @isa_optional.function x.evaluate\n#   ### TAINT omitted other settings for `GUY.props.tree()` ###\n# #...........................................................................................................\n# @defaults.Intertype_walk_hedgepaths_cfg =\n#   sep:      @defaults.Intertype_constructor_cfg.sep\n#   evaluate: ({ owner, key, value, }) ->\n#     return 'take' if ( types.type_of value ) is 'function'\n#     return 'take' unless GUY.props.has_any_keys value\n#     return 'descend'\n\n#===========================================================================================================\nclass Intertype_abc extends GUY.props.Strict_owner\n\n\n#===========================================================================================================\nclass @Type_cfg extends Intertype_abc\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( hub, cfg ) ->\n    ### TAINT ensure type_cfg does not contain `type`, `name` ###\n    ### TAINT do not use `tests.every()` when only 1 test given ###\n    super()\n    GUY.props.hide @, 'hub', hub\n    cfg                   = { ITYP.defaults.Type_cfg_constructor_cfg..., cfg..., }\n    types.validate.Type_cfg_constructor_cfg cfg\n    cfg.groups            = @_compile_groups  cfg\n    cfg.test              = new Proxy ( @_compile_test hub, cfg ), hub._get_hedge_sub_proxy_cfg hub\n    #.......................................................................................................\n    ### TAINT not used by `size_of()` ###\n    cfg.size              = 'length' if cfg.isa_collection and not cfg.size?\n    cfg.size             ?= null\n    #.......................................................................................................\n    @[ k ]                = v for k, v of cfg\n    return self = GUY.lft.freeze @\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_test: ( hub, cfg ) ->\n    ### TAINT integrate the below ###\n    # if not cfg.extras\n    #   keys                = ( k for k of cfg.default ).sort()\n    #   @[ H.signals.keys ] = keys\n    #   ### TAINT should use sets not arrays ###\n    #   tests.push ( x ) -> equals ( k for k of x ).sort(), keys\n    test = null\n    if types.isa.list cfg.test\n      unless cfg.test.length is 1\n        tests = ( f.bind hub for f in cfg.test )\n        test  = { \"#{cfg.name}\": ( ( x ) =>\n          for test in tests\n            return false if ( R = test x ) is false\n            return R unless R is true\n          return true )\n          }[ cfg.name ]\n        return test\n      test = cfg.test[ 0 ]\n    test ?= cfg.test\n    return { \"#{cfg.name}\": ( ( x ) => test.call hub, x ), }[ cfg.name ]\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_groups: ( cfg ) ->\n    warn GUY.trm.reverse \"^_compile_groups@1^ should validate groups\"\n    return if ( types.isa.text cfg.groups ) then cfg.groups.split /\\s*,\\s*/ else cfg.groups\n\n#===========================================================================================================\nclass @Intertype extends Intertype_abc\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    super()\n    self = @\n    #.......................................................................................................\n    GUY.props.hide @, 'cfg',      { ITYP.defaults.Intertype_constructor_cfg..., cfg..., }\n    GUY.props.hide @, '_hedges',  new HEDGES.Intertype_hedges()\n    # GUY.props.hide @, 'isa',      new GUY.props.Strict_owner { reset: false, }\n    GUY.props.hide @, 'isa',      new Proxy {}, @_get_hedge_base_proxy_cfg self, '_isa'\n    GUY.props.hide @, 'validate', new Proxy {}, @_get_hedge_base_proxy_cfg self, '_validate'\n    GUY.props.hide @, 'create',   new Proxy {}, @_get_hedge_base_proxy_cfg self, '_create'\n    GUY.props.hide @, 'declare',  new Proxy ( @_declare.bind @ ), get: ( _, type ) => ( cfg ) => @_declare.call @, type, cfg\n    GUY.props.hide @, 'registry', new GUY.props.Strict_owner { reset: false, }\n    GUY.props.hide @, 'types',    types\n    GUY.props.hide @, 'groups',   {}\n    @state =\n      data:     null\n      method:   null\n      hedges:   []\n    #.......................................................................................................\n    @_register_groups()\n    @_register_hedges()\n    #.......................................................................................................\n    DECLARATIONS._provisional_declare_basic_types @\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _register_groups: ->\n    for group from @_hedges._get_groupnames()\n      @groups[ group ] = new Set()\n      do ( group ) =>\n        @declare group, groups: group, test: ( x ) =>\n          R = @groups[ group ].has @type_of x\n          return @_protocol_isa { term: group, x, value: H.signals.nothing, verdict: R, }\n    GUY.lft.freeze @groups\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _register_hedges: ->\n    for hedge, test of @_hedges._hedgemethods\n      do ( hedge, test ) =>\n        @declare hedge, { test, }\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  ### TAINT ideally would put this stuff elsewhere ###\n  _get_hedge_base_proxy_cfg: ( self, method_name ) ->\n    #.......................................................................................................\n    return\n      get: ( target, key ) =>\n        return undefined          if key is Symbol.toStringTag\n        return target.constructor if key is 'constructor'\n        return target.toString    if key is 'toString'\n        return target.call        if key is 'call'\n        return target.apply       if key is 'apply'\n        self.state.method = method_name\n        self.state.hedges = [ key, ]\n        return R if ( R = GUY.props.get target, key, H.signals.nothing ) isnt H.signals.nothing\n        if method_name is '_create'\n          f = { \"#{key}\": ( ( cfg = null ) -> self[ self.state.method ] key, cfg ), }[ key ]\n        else\n          f = { \"#{key}\": ( ( P... ) -> self[ self.state.method ] P... ), }[ key ]\n        GUY.props.hide target, key, R = new Proxy f, @_get_hedge_sub_proxy_cfg self\n        return R\n\n  #---------------------------------------------------------------------------------------------------------\n  ### TAINT ideally would put this stuff elsewhere ###\n  _get_hedge_sub_proxy_cfg: ( self ) ->\n    return\n      get: ( target, key ) =>\n        return undefined          if key is Symbol.toStringTag\n        return target.constructor if key is 'constructor'\n        return target.toString    if key is 'toString'\n        return target.call        if key is 'call'\n        return target.apply       if key is 'apply'\n        self.state.hedges.push key\n        return R if ( R = GUY.props.get target, key, H.signals.nothing ) isnt H.signals.nothing\n        f = { \"#{key}\": ( x ) ->\n            return self[ self.state.method ] self.state.hedges..., x\n            }[ key ]\n        GUY.props.hide target, key, R = new Proxy f, @_get_hedge_sub_proxy_cfg self\n        return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _declare: ( type, type_cfg ) ->\n    ### TAINT handling of arguments here shimmed while we have not yet nailed down the exact calling\n    convention for this method. ###\n    type_cfg            = { type_cfg..., name: type, }\n    type_cfg            = new ITYP.Type_cfg @, type_cfg\n    @registry[  type ]  = type_cfg\n    @isa[       type ]  = type_cfg.test\n    @validate[  type ]  = new Proxy ( ( x ) => @_validate type, x ), @_get_hedge_sub_proxy_cfg @\n    for group in type_cfg.groups\n      @_add_type_to_group group, type\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _add_type_to_group: ( group, type ) ->\n    @groups[ group ].add type\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _isa: ( hedges..., x ) ->\n    debug '^423-1^',  GUY.trm.reverse [ hedges..., x, ]\n    hedge_idx       = -1\n    last_hedge_idx  = hedges.length - 1\n    advance         = false\n    is_terminal     = false\n    R               = true\n    # element_mode    = false\n    #.......................................................................................................\n    loop\n      hedge_idx++\n      if hedge_idx > last_hedge_idx\n        return R\n      hedge       = hedges[ hedge_idx ]\n      is_terminal = ( hedges[ hedge_idx + 1 ] is 'or' ) or ( hedge_idx is last_hedge_idx )\n      #.....................................................................................................\n      if advance\n        continue unless hedge is 'or'\n      advance = false\n      #.....................................................................................................\n      switch hedge\n        #...................................................................................................\n        when 'of'\n          if hedge_idx is 0\n            throw new E.Intertype_ETEMPTBD '^intertype.isa@1^', \\\n              \"hedgerow cannot start with `of`, must be preceded by hedge\"\n          if hedge_idx is last_hedge_idx\n            throw new E.Intertype_ETEMPTBD '^intertype.isa@2^', \\\n              \"hedgerow cannot end with `of`, must be succeeded by hedge\"\n          ### TAINT check for preceding type being a collection? ###\n          # element_mode = true\n          tail_hedges = hedges[ hedge_idx + 1 .. ]\n          for element from x\n            return false if ( @_isa tail_hedges..., element ) is false\n          return true\n        #...................................................................................................\n        when 'or'\n          R = true\n          continue\n      #.....................................................................................................\n      debug '^5575684684^', rpr hedge\n      unless ( type_cfg = GUY.props.get @registry, hedge, null )?\n        throw new E.Intertype_ETEMPTBD '^intertype.isa@3^', \"unknown hedge or type #{rpr hedge}\"\n      #.....................................................................................................\n      result = type_cfg.test.call @, x\n      switch result\n        when H.signals.return_true\n          return @_protocol_isa { term: hedge, x, value: H.signals.nothing, verdict: true, }\n        # when H.signals.advance                then return @_protocol_isa { term: hedge, x, value: H.signals.nothing, verdict: R, }\n        # when H.signals.process_list_elements  then return @_protocol_isa { term: hedge, x, value: H.signals.nothing, verdict: R, }\n        # when H.signals.process_set_elements   then return @_protocol_isa { term: hedge, x, value: H.signals.nothing, verdict: R, }\n        when false\n          @_protocol_isa { term: hedge, x, value: H.signals.nothing, verdict: false, }\n          advance = true\n          R       = false\n          continue\n        when true\n          @_protocol_isa { term: hedge, x, value: H.signals.nothing, verdict: true, }\n          return true if is_terminal\n          continue\n      #.....................................................................................................\n      throw new E.Intertype_internal_error '^intertype.isa@4^', \\\n        \"unexpected return value from hedgemethod for hedge #{rpr hedge}: #{rpr R}\"\n    #.......................................................................................................\n    return R\n\n\n  #---------------------------------------------------------------------------------------------------------\n  _protocol_isa: ({ term, x, value, verdict }) ->\n    if ( type_cfg = GUY.props.get @registry, term, null )?\n      groups  = type_cfg.groups ? null\n      if ( test = GUY.props.get type_cfg, 'test', null )?\n        src     = GUY.src.slug_from_simple_function { function: test, fallback: '???', }\n      else\n        src     = null\n    else\n      groups  = null\n      src     = null\n    # debug GUY.trm.gold '^_protocol_isa@5^', { term, groups, x, value, verdict, src, }\n    return verdict\n\n  #---------------------------------------------------------------------------------------------------------\n  _validate: ( hedges..., type, x ) ->\n    return x if @_isa hedges..., type, x\n    qtype = [ hedges..., type, ].join @cfg.sep\n    xr    = to_width ( rpr x ), 100\n    throw new E.Intertype_ETEMPTBD '^intertype.validate@6^', \"not a valid #{qtype}: #{xr}\"\n\n  #---------------------------------------------------------------------------------------------------------\n  _create: ( type, cfg ) ->\n    create = null\n    #.......................................................................................................\n    unless ( type_cfg = GUY.props.get @registry, type, null )?\n      throw new E.Intertype_ETEMPTBD '^intertype@7^', \"unknown type #{rpr type}\"\n    #.......................................................................................................\n    ### Try to get `create` method, or, should that fail, the `default` value. Throw error when neither\n    `create` nor `default` are given: ###\n    if ( create = GUY.props.get type_cfg, 'create', null ) is null\n      if ( R = GUY.props.get type_cfg, 'default', H.signals.nothing ) is H.signals.nothing\n        throw new E.Intertype_ETEMPTBD '^intertype.create@8^', \\\n          \"type #{rpr type} does not have a `default` value or a `create()` method\"\n    #.......................................................................................................\n    else\n      ### If `create` is given, call it to obtain default value: ###\n      R = create.call @, cfg\n    #.......................................................................................................\n    if ( not create? ) and cfg?\n      if ( t = H.js_type_of R ) is '[object Object]' or t is '[object Array]'\n        R = Object.assign ( structuredClone R ), cfg\n      else\n        R = cfg\n    else\n      R = structuredClone R\n    #.......................................................................................................\n    if      type_cfg.freeze is true   then R = Object.freeze R\n    else if type_cfg.freeze is 'deep' then R = GUY.lft.freeze GUY.lft._deep_copy R\n    #.......................................................................................................\n    return @_validate type, R\n\n  #---------------------------------------------------------------------------------------------------------\n  equals:                     H.equals\n  type_of:                    H.type_of\n  size_of:                    H.size_of\n  _normalize_type:            ( type ) -> type.toLowerCase().replace /\\s+/g, ''\n\n  #-----------------------------------------------------------------------------------------------------------\n  _walk_hedgepaths: ( cfg ) ->\n    throw new Error \"^intertype._walk_hedgepaths@1^ not implemented\"\n    # cfg = { ITYP.defaults.Intertype_walk_hedgepaths_cfg..., cfg..., }\n    # yield from GUY.props.walk_tree @isa, cfg\n    # return null\n\n\n############################################################################################################\n@defaults = GUY.lft.freeze @defaults\n\n\n\n"
  ]
}