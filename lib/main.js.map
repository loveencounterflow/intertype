{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n#===========================================================================================================\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'demo-execa'\n{ rpr\n  inspect\n  echo\n  reverse\n  bold\n  log     }               = GUY.trm\n{ hide }                  = GUY.props\n{ props: {\n    nameit } }            = require 'webguy'\n\n\n############################################################################################################\nrequire_intertype = ->\n\n  #===========================================================================================================\n  $isa =\n    text:     ( x ) -> typeof x is 'string'\n    function: ( x ) -> ( Object::toString.call x ) is '[object Function]'\n\n  #-----------------------------------------------------------------------------------------------------------\n  $type_of = ( x ) ->\n    return 'null'         if x is null\n    return 'undefined'    if x is undefined\n    return 'infinity'     if x is +Infinity\n    return 'infinity'     if x is -Infinity\n    return 'boolean'      if x is true\n    return 'boolean'      if x is false\n    return 'text'         if $isa.text      x\n    return 'function'     if $isa.function  x\n    return 'something'\n\n  #===========================================================================================================\n  class Types\n\n    #---------------------------------------------------------------------------------------------------------\n    constructor: ( cfg ) ->\n      hide @, 'isa',        @isa.bind       @\n      hide @, 'validate',   @validate.bind  @\n      hide @, 'create',     @create.bind    @\n      hide @, 'type_of',    @type_of.bind   @\n      hide @, 'memo',       new Map()\n      hide @, '_recording', false\n      hide @, '_journal',   null\n      hide @, '_stack',     null\n      return undefined\n\n    #---------------------------------------------------------------------------------------------------------\n    isa: ( type, x ) ->\n      ### TAINT use proper validation ###\n      unless type instanceof Type\n        throw new Error \"Ω___2 expected an instance of `Type`, got a #{$type_of R}\"\n      #.......................................................................................................\n      if @_recording\n        @_stack.push type.$typename\n        @_journal.push entry = {}\n      #.......................................................................................................\n      unless ( R = type.isa.call type, x, @ ) in [ true, false, ]\n        throw new Error \"Ω___3 expected `true` or `false`, got a #{$type_of R}\"\n      #.......................................................................................................\n      if @_recording\n        stack = @_stack.join '.'\n        @_stack.pop()\n        Object.assign entry, { type: type.$typename, stack, value: x, verdict: R, }\n      #.......................................................................................................\n      return R\n\n    #---------------------------------------------------------------------------------------------------------\n    type_of: ( x ) -> 'something'\n\n    #---------------------------------------------------------------------------------------------------------\n    validate: ( type, x ) ->\n      return x if @isa type, x\n      throw new Error \"Ω___4 expected a #{type.$typename}, got a #{$type_of x}\"\n\n    #---------------------------------------------------------------------------------------------------------\n    create: ( type, P... ) ->\n      throw new Error \"Ω___5 not yet implemented\"\n\n    #---------------------------------------------------------------------------------------------------------\n    evaluate: ( type, x ) ->\n      @_recording = true\n      @_journal   = []\n      @_stack     = []\n      #.......................................................................................................\n      @isa type, x\n      #.......................................................................................................\n      R           = @_journal\n      @_recording = false\n      @_journal   = null\n      @_stack     = null\n      return R\n\n  #===========================================================================================================\n  class Type\n\n    #---------------------------------------------------------------------------------------------------------\n    constructor: ( typespace, typename, declaration ) ->\n      @$typename = typename # hide @, '$typename',  typename\n      hide @, '$typespace', typespace\n      @_compile_fields typespace, typename, declaration if declaration.fields?\n      #.......................................................................................................\n      switch true\n        #.....................................................................................................\n        when $isa.text declaration\n          declaration = do ( typeref = declaration ) => { isa: ( ( x, t ) -> t.isa @$typespace[ typeref ], x ), }\n        #.....................................................................................................\n        when $isa.function declaration\n          declaration = { isa: declaration, }\n        #.....................................................................................................\n        when declaration instanceof Type    then null\n        when declaration instanceof Object  then null\n        #.....................................................................................................\n        else\n          throw new Error \"Ω___6 expected a typename, a function or a type as declaration, got a #{$type_of declaration}\"\n      #.......................................................................................................\n      ### TAINT this is defective w/out proper validation ###\n      for key, value of declaration\n        nameit typename, value if key is 'isa' # check that value is function?\n        hide @, key, value\n      return undefined\n\n    #---------------------------------------------------------------------------------------------------------\n    _compile_fields: ( typespace, typename, declaration ) ->\n      #.......................................................................................................\n      ### TAINT try to move this check to validation step ###\n      if declaration.isa?\n        throw new Error \"Ω___7 must have exactly one of `isa` or `fields`, not both\"\n      for field_name, field_declaration of declaration.fields\n        declaration.fields[ field_name ] = new Type typespace, field_name, field_declaration\n      #.......................................................................................................\n      declaration.isa = @_get_default_isa_for_fields typespace, typename, declaration\n      return null\n\n    #---------------------------------------------------------------------------------------------------------\n    _get_default_isa_for_fields: ( typespace, typename, declaration ) -> ( x, t ) ->\n      for field_name, field of @fields\n        return false unless x? and t.isa field, x[ field_name ]\n      return true\n\n  #===========================================================================================================\n  class Typespace\n\n    #---------------------------------------------------------------------------------------------------------\n    constructor: ( typespace_cfg ) ->\n      for typename, declaration of typespace_cfg\n        declaration   = new Type @, typename, declaration unless declaration instanceof Type\n        @[ typename ] = declaration\n      return undefined\n\n\n  #===========================================================================================================\n  std = new Typespace\n    #.........................................................................................................\n    integer:\n      isa:    ( x, t ) -> Number.isInteger x\n      foo:    4\n    odd:\n      isa:    ( x, t ) -> ( t.isa @$typespace.integer, x ) and ( x %% 2 isnt 0 )\n    # short form just assigns either a test method or a type name:\n    even:           ( x, t ) -> ( t.isa @$typespace.integer, x ) and ( x %% 2 is 0 )\n    float:          ( x, t ) -> Number.isFinite x\n    bigint:         ( x, t ) -> typeof x is 'bigint'\n    text:           ( x, t ) -> typeof x is 'string'\n    nonempty_text:  ( x, t ) -> ( t.isa @$typespace.text, x ) and ( x.length > 0 )\n    #.........................................................................................................\n    # numerical:      ( x, t ) -> ( t.isa @$typespace.float, x   ) or ( t.isa @$typespace.bigint, x )\n    # positive0:      ( x, t ) -> ( t.isa @$typespace.float, x   ) and ( x >= +0  )\n    # positive1:      ( x, t ) -> ( t.isa @$typespace.float, x   ) and ( x >= +1  )\n    # negative0:      ( x, t ) -> ( t.isa @$typespace.float, x   ) and ( x <=  0  )\n    # negative1:      ( x, t ) -> ( t.isa @$typespace.float, x   ) and ( x <= -1  )\n    # cardinal:       ( x, t ) -> ( t.isa @$typespace.integer, x ) and ( t.isa @$typespace.positive0, x )\n    #.........................................................................................................\n    # cardinalbigint: ( x, t ) -> ( t.isa @$typespace.bigint, x    ) and ( x >= +0 )\n    #.........................................................................................................\n    # circle1:  'circle2'\n    # circle2:  'circle3'\n    # circle3:  'circle1'\n    #.........................................................................................................\n    weird:    'strange' # declares another name for `odd`\n    strange:  'odd'     # declares another name for `odd`\n    abnormal: 'weird'   # declares another name for `odd`\n    #.........................................................................................................\n    quantity:\n      fields:\n        # each field becomes a `Type` instance; strings may refer to names in the same typespace\n        q:    'float'\n        u:    'nonempty_text'\n      template:\n        q:    0\n        u:    'u'\n    #.........................................................................................................\n    address:\n      fields:\n        postcode:   'nonempty_text'\n        city:       'nonempty_text'\n    #.........................................................................................................\n    employee:\n      fields:\n        address:    'address'\n        name:\n          fields:\n            firstname:  'nonempty_text'\n            lastname:   'nonempty_text'\n\n\n  #===========================================================================================================\n  flatly_1 = new Typespace\n    evenly:       'flat'\n    flat:         ( x, t ) -> t.isa std.even, x\n    plain:        'evenly'\n    # foo:          'bar'\n\n  #-----------------------------------------------------------------------------------------------------------\n  flatly_2 = new Typespace\n    evenly:       'flat'\n    flat:         std.even\n    plain:        'evenly'\n\n\n\n  #%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n  return { Types, Type, Typespace, \\\n    std, \\\n    flatly_1, flatly_2, \\\n    types: ( new Types() ), }\n\n\n#===========================================================================================================\nif module is require.main then await do =>\n  { types\n    flatly_1\n    flatly_2\n    std             } = require_intertype()\n  info 'Ω___8', std\n  info 'Ω___9', flatly_1\n  info 'Ω__10', flatly_2\n  info 'Ω__11', flatly_1.flat\n  info 'Ω__12', flatly_2.flat\n  info 'Ω__13', std.text.nonempty\n  info 'Ω__14', 'std.quantity:              ', rpr std.quantity\n  info 'Ω__15', 'std.quantity.isa:          ', rpr std.quantity.isa\n  info 'Ω__16', 'std.quantity.fields:       ', rpr std.quantity.fields\n  info 'Ω__17', 'std.quantity.fields.q:     ', rpr std.quantity.fields.q\n  info 'Ω__18', 'std.quantity.fields.q.isa: ', rpr std.quantity.fields.q.isa\n  #.........................................................................................................\n  echo()\n  help 'Ω__19', GUY.trm.truth     types.isa       std.integer,              5\n  help 'Ω__20', GUY.trm.truth     types.isa       std.odd,                  5\n  help 'Ω__21', GUY.trm.truth     types.isa       std.even,                 6\n  help 'Ω__22', GUY.trm.truth     types.isa       std.strange,              5\n  help 'Ω__23', GUY.trm.truth     types.isa       std.weird,                5\n  help 'Ω__24', GUY.trm.truth     types.isa       std.abnormal,             5\n  help 'Ω__25', GUY.trm.truth     types.isa       flatly_1.flat,            8\n  help 'Ω__26', GUY.trm.truth     types.isa       flatly_1.evenly,          8\n  help 'Ω__27', GUY.trm.truth     types.isa       flatly_1.plain,           8\n  help 'Ω__28', GUY.trm.truth     types.isa       flatly_2.flat,            8\n  help 'Ω__29', GUY.trm.truth     types.isa       flatly_2.evenly,          8\n  help 'Ω__30', GUY.trm.truth     types.isa       flatly_2.plain,           8\n  help 'Ω__31', GUY.trm.truth     types.isa       std.nonempty_text,        'abc'\n  help 'Ω__32', GUY.trm.truth     types.isa       std.quantity.fields.q,    123.456\n  help 'Ω__33', GUY.trm.truth     types.isa       std.quantity.fields.u,    'm'\n  help 'Ω__34', GUY.trm.truth     types.isa       std.quantity,             { q: 123.456, u: 'm', }\n  #.........................................................................................................\n  echo()\n  help 'Ω__35', GUY.trm.truth     types.isa       std.integer,              5.3\n  help 'Ω__36', GUY.trm.truth     types.isa       std.odd,                  6\n  help 'Ω__37', GUY.trm.truth     types.isa       std.odd,                  5.3\n  help 'Ω__38', GUY.trm.truth     types.isa       std.even,                 5\n  help 'Ω__39', GUY.trm.truth     types.isa       std.strange,              6\n  help 'Ω__40', GUY.trm.truth     types.isa       std.weird,                6\n  help 'Ω__41', GUY.trm.truth     types.isa       std.abnormal,             6\n  help 'Ω__42', GUY.trm.truth     types.isa       flatly_1.evenly,          5\n  help 'Ω__43', GUY.trm.truth     types.isa       flatly_1.flat,            5\n  help 'Ω__44', GUY.trm.truth     types.isa       flatly_1.plain,           5\n  help 'Ω__45', GUY.trm.truth     types.isa       flatly_2.flat,            5\n  help 'Ω__46', GUY.trm.truth     types.isa       flatly_2.evenly,          5\n  help 'Ω__47', GUY.trm.truth     types.isa       flatly_2.plain,           5\n  help 'Ω__48', GUY.trm.truth     types.isa       std.nonempty_text,        ''\n  help 'Ω__49', GUY.trm.truth     types.isa       std.quantity.fields.q,    '123.456'\n  help 'Ω__50', GUY.trm.truth     types.isa       std.quantity.fields.u,    ''\n  help 'Ω__51', GUY.trm.truth     types.isa       std.quantity,             { q: 123.456, u: '', }\n  help 'Ω__52', GUY.trm.truth     types.isa       std.quantity,             { q: null, u: 'm', }\n  #.........................................................................................................\n  echo()\n  probes_and_matchers = [\n    [ [ std.integer,      5                         ], null, ]\n    [ [ std.integer,      5.3                       ], null, ]\n    [ [ std.even,         5                         ], null, ]\n    [ [ flatly_1.evenly,  5                         ], null, ]\n    [ [ flatly_1.evenly,  6                         ], null, ]\n    [ [ flatly_2.evenly,  5                         ], null, ]\n    [ [ flatly_2.evenly,  6                         ], null, ]\n    [ [ std.quantity,     { q: 123.456, u: '', }    ], null, ]\n    [ [ std.quantity,     { q: 123.456, u: null, }  ], null, ]\n    [ [ std.quantity,     { q: 'nan', u: 'm', }     ], null, ]\n    [ [ std.employee,     { address: { postcode: 'SE36', city: 'London', }, name: null, }     ], null, ]\n    [ [ std.employee,     { address: { postcode: 'SE36', city: 'London', }, name: {}, }     ], null, ]\n    [ [ std.employee,     { address: { postcode: 'SE36', city: 'London', }, name: { firstname: 'Bob', }, }     ], null, ]\n    ]\n  for [ [ type, value, ], matcher, ] in probes_and_matchers\n    info 'Ω__53', type.$typename, rpr value\n    records = types.evaluate type, value\n    for record in records\n      urge '', 'Ω__54', ( record.stack.padEnd 55 ), ( ( rpr record.value ).padEnd 35 ), GUY.trm.truth record.verdict\n  #.........................................................................................................\n  echo()\n  # help 'Ω__55', GUY.trm.truth     types.isa       std.cardinal, 6\n  # help 'Ω__56', GUY.trm.truth     types.isa       std.cardinal, 0\n  # help 'Ω__57', GUY.trm.truth     types.isa       std.cardinal, -1\n  # #.........................................................................................................\n  help 'Ω__58', try               types.validate  std.integer,  5       catch e then warn 'Ω__59', e.message\n  help 'Ω__60', try               types.validate  std.integer,  5.3     catch e then warn 'Ω__61', e.message\n  # info 'Ω__62', std.weird\n  # info 'Ω__63', std.weird.isa\n  # info 'Ω__64', std.weird.isa.toString()\n\n\n\n"
  ]
}