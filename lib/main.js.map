{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ debug, warn, }          = GUY.trm.get_loggers 'INTERTYPE'\n{ rpr   }                 = GUY.trm\n#...........................................................................................................\nE                         = require './errors'\nH                         = require './helpers'\nHEDGES                    = require './hedges'\nITYP                      = @\ntypes                     = new ( require 'intertype-legacy' ).Intertype()\n@defaults                 = {}\n{ to_width }              = require 'to-width'\n\n\n#-----------------------------------------------------------------------------------------------------------\ntypes.declare 'Type_cfg_constructor_cfg', tests:\n  \"@isa.object x\":                            ( x ) -> @isa.object x\n  \"@isa.nonempty_text x.name\":                ( x ) -> @isa.nonempty_text x.name\n  \"( @isa.function x.test ) or ( @isa_list_of.function x.test )\": \\\n    ( x ) -> ( @isa.function x.test ) or ( @isa_list_of.function x.test )\n  \"x.groups is a nonempty text or a nonempty list of nonempty texts\": ( x ) ->\n    return true if @isa.nonempty_text x.groups\n    return false unless @isa.list x.groups\n    return x.groups.every ( e ) => ( @isa.nonempty_text e ) and not ( /[\\s,]/ ).test e\n#...........................................................................................................\n@defaults.Type_cfg_constructor_cfg =\n  groups:           'other'\n  name:             null\n  test:             null\n\n#-----------------------------------------------------------------------------------------------------------\ntypes.declare 'Intertype_constructor_cfg', tests:\n  \"@isa.object x\":                            ( x ) -> @isa.object x\n  \"@isa_optional.nonempty_text x.sep\":        ( x ) -> @isa_optional.nonempty_text x.sep\n#...........................................................................................................\n@defaults.Intertype_constructor_cfg =\n  sep:              '.'\n\n# #-----------------------------------------------------------------------------------------------------------\n# types.declare 'Intertype_walk_hedgepaths_cfg', tests:\n#   \"@isa.object x\":                      ( x ) -> @isa.object x\n#   \"@isa_optional.nonempty_text x.sep\":  ( x ) -> @isa_optional.nonempty_text x.sep\n#   \"@isa_optional.function x.evaluate\":  ( x ) -> @isa_optional.function x.evaluate\n#   ### TAINT omitted other settings for `GUY.props.tree()` ###\n# #...........................................................................................................\n# @defaults.Intertype_walk_hedgepaths_cfg =\n#   sep:      @defaults.Intertype_constructor_cfg.sep\n#   evaluate: ({ owner, key, value, }) ->\n#     return 'take' if ( types.type_of value ) is 'function'\n#     return 'take' unless GUY.props.has_any_keys value\n#     return 'descend'\n\n#===========================================================================================================\nclass Intertype_abc extends GUY.props.Strict_owner\n\n\n#===========================================================================================================\nclass @Type_cfg extends Intertype_abc\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( hub, cfg ) ->\n    ### TAINT ensure type_cfg does not contain `type`, `name` ###\n    super()\n    GUY.props.hide @, 'hub', hub\n    cfg         = { ITYP.defaults.Type_cfg_constructor_cfg..., cfg..., }\n    cfg.groups  = @_compile_groups cfg.groups\n    types.validate.Type_cfg_constructor_cfg cfg\n    if types.isa.list cfg.test\n      _test       = ( f.bind hub for f in cfg.test )\n      cfg.test    = ( x ) => _test.every ( f ) -> f x\n    else\n      cfg.test    = cfg.test.bind hub\n    cfg.size    = 'length' if cfg.isa_collection and not cfg.size?\n    cfg.size   ?= null\n    @[ k ]      = v for k, v of cfg\n    return GUY.lft.freeze @\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_groups: ( groups ) ->\n    warn GUY.trm.reverse \"^_compile_groups@1^ should validate groups\"\n    R = if ( types.isa.text groups ) then groups.split /\\s*,\\s*/ else groups\n    # for group in R\n    #   continue if GUY.props.has @hub._hedges.hedgepaths, group\n    #   throw new E.Intertype_ETEMPTBD '^intertype/Type_cfg^', \"unknown hedge group #{rpr group}\"\n    return R\n\n#===========================================================================================================\nclass @Intertype extends Intertype_abc\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    super()\n    #.......................................................................................................\n    ### TAINT ideally would put this stuff elsewhere ###\n    base_proxy_cfg =\n      get: ( target, key ) =>\n        return undefined if key is Symbol.toStringTag\n        @_hedgebuffer.length = 0\n        @_hedgebuffer.push '_isa'\n        @_hedgebuffer.push key\n        return R if ( R = GUY.props.get target, key, H.signals.nothing ) isnt H.signals.nothing\n        f = { \"#{key}\": ( ( x ) -> praise '^878-1^', rpr x; 'something' ), }[ key ]\n        return target[ key ] = new Proxy f, sub_proxy_cfg\n    #.......................................................................................................\n    count = 0\n    sub_proxy_cfg =\n      get: ( target, key ) =>\n        process.exit 111 if count++ > 10\n        return undefined if key is Symbol.toStringTag\n        # debug '^878-2^', target, rpr key\n        @_hedgebuffer.push key\n        return R if ( R = GUY.props.get target, key, H.signals.nothing ) isnt H.signals.nothing\n        f =  ( x ) ->\n          debug '^878-3^', @_hedgebuffer\n          method_name = @_hedgebuffer.shift()\n          return @[ method_name ] @_hedgebuffer..., x\n        f = { \"#{key}\": f, }[ key ]\n        return target[ key ] = new Proxy f, sub_proxy_cfg\n    #.......................................................................................................\n    GUY.props.hide @, 'cfg',          { ITYP.defaults.Intertype_constructor_cfg..., cfg..., }\n    GUY.props.hide @, '_hedges',      new HEDGES.Intertype_hedges()\n    # GUY.props.hide @, 'isa',          new GUY.props.Strict_owner { reset: false, }\n    GUY.props.hide @, 'isa',          new Proxy {}, base_proxy_cfg\n    GUY.props.hide @, 'validate',     new GUY.props.Strict_owner { reset: false, }\n    GUY.props.hide @, 'declare',      new Proxy ( @_declare.bind @ ), get: ( _, type ) => ( cfg ) => @_declare.call @, type, cfg\n    GUY.props.hide @, 'registry',     new GUY.props.Strict_owner { reset: false, }\n    GUY.props.hide @, 'types',        types\n    GUY.props.hide @, 'groups',       {}\n    GUY.props.hide @, '_hedgebuffer', []\n    debug '^878-4^', @_hedgebuffer\n    #.......................................................................................................\n    for group from @_hedges._get_groupnames()\n      @groups[ group ] = new Set()\n      do ( group ) =>\n        @declare group, groups: group, test: ( x ) =>\n          R = @groups[ group ].has @type_of x\n          return @_protocol_isa { term: group, x, value: H.signals.nothing, verdict: R, }\n    GUY.lft.freeze @groups\n    #.......................................................................................................\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _declare: ( type, type_cfg ) ->\n    ### TAINT handling of arguments here shimmed while we have not yet nailed down the exact calling\n    convention for this method. ###\n    type_cfg            = { type_cfg..., name: type, }\n    type_cfg            = new ITYP.Type_cfg @, type_cfg\n    @registry[  type ]  = type_cfg\n    @isa[       type ]  = type_cfg.test\n    @validate[  type ]  = ( x ) => @_validate type, x\n    for group in type_cfg.groups\n      @_add_type_to_group group, type\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _add_type_to_group: ( group, type ) ->\n    @groups[ group ].add type\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _isa: ( hedges..., type, x ) ->\n    for hedge, hedge_idx in hedges\n      switch R = @_test_hedge hedge, x\n        when true                       then null\n        when H.signals.true_and_break   then return true\n        when H.signals.false_and_break  then return false\n        when false                      then return false\n        when H.signals.process_list_elements, H.signals.process_set_elements\n          tail_hedges = hedges[ hedge_idx + 1 .. ]\n          for e from x\n            unless @_isa tail_hedges..., type, e\n              return false\n          return true\n        else\n          throw new E.Intertype_ETEMPTBD '^intertype@1^', \"illegal return value from `_test_hedge()`: #{rpr type}\"\n    #.......................................................................................................\n    unless ( typetest = GUY.props.get @isa, type, null )?\n      throw new E.Intertype_ETEMPTBD '^intertype@1^', \"unknown type #{rpr type}\"\n    verdict = typetest x\n    return @_protocol_isa { term: type, x, value: H.signals.nothing, verdict, }\n\n  #---------------------------------------------------------------------------------------------------------\n  _test_hedge: ( hedge, x ) ->\n    unless ( hedgetest = GUY.props.get @_hedges._hedgemethods, hedge, null )?\n      throw new E.Intertype_ETEMPTBD '^intertype@1^', \"unknown hedge #{rpr hedge}\"\n    #.......................................................................................................\n    switch R = hedgetest.call @, x\n      when H.signals.true_and_break         then return @_protocol_isa { term: hedge, x, value: H.signals.nothing, verdict: R, }\n      when H.signals.false_and_break        then return @_protocol_isa { term: hedge, x, value: H.signals.nothing, verdict: R, }\n      when false                            then return @_protocol_isa { term: hedge, x, value: H.signals.nothing, verdict: false, }\n      when true                             then return @_protocol_isa { term: hedge, x, value: H.signals.nothing, verdict: true, }\n      when H.signals.process_list_elements  then return @_protocol_isa { term: hedge, x, value: H.signals.nothing, verdict: R, }\n      when H.signals.process_set_elements   then return @_protocol_isa { term: hedge, x, value: H.signals.nothing, verdict: R, }\n    #.......................................................................................................\n    throw new E.Intertype_internal_error '^intertype@1^', \\\n      \"unexpected return value from hedgemethod for hedge #{rpr hedge}: #{rpr R}\"\n\n  #---------------------------------------------------------------------------------------------------------\n  _protocol_isa: ({ term, x, value, verdict }) ->\n    if ( type_cfg = GUY.props.get @registry, term, null )?\n      groups  = type_cfg.groups ? null\n      if ( test = GUY.props.get type_cfg, 'test', null )?\n        src     = GUY.src.slug_from_simple_function { function: test, fallback: '???', }\n      else\n        src     = null\n    else\n      groups  = null\n      src     = null\n    debug GUY.trm.gold '^_protocol_isa@1^', { term, groups, x, value, verdict, src, }\n    return verdict\n\n  #---------------------------------------------------------------------------------------------------------\n  _validate: ( hedges..., type, x ) ->\n    debug '^4534^', { hedges, type, x, }\n    debug '^4534^', @_isa hedges..., type, x\n    return true if @_isa hedges..., type, x\n    qtype = [ hedges..., type, ].join @cfg.sep\n    xr    = to_width ( rpr x ), 100\n    throw new E.Intertype_ETEMPTBD '^intertype@1^', \"not a valid #{qtype}\"\n\n  #---------------------------------------------------------------------------------------------------------\n  type_of:                    H.type_of\n  size_of:                    H.size_of\n  _normalize_type:            ( type ) -> type.toLowerCase().replace /\\s+/g, ''\n\n  #-----------------------------------------------------------------------------------------------------------\n  _walk_hedgepaths: ( cfg ) ->\n    throw new Error \"^_walk_hedgepaths@1^ not implemented\"\n    # cfg = { ITYP.defaults.Intertype_walk_hedgepaths_cfg..., cfg..., }\n    # yield from GUY.props.walk_tree @isa, cfg\n    # return null\n\n\n############################################################################################################\n@defaults = GUY.lft.freeze @defaults\n\n\n\n"
  ]
}