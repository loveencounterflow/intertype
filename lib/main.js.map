{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\n# njs_util                  = require 'util'\nnjs_path                  = require 'path'\n# njs_fs                    = require 'fs'\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr.bind CND\nbadge                     = 'INTERTYPE/main'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\npraise                    = CND.get_logger 'praise',    badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nGUY                       = require 'guy'\nE                         = require './errors'\nH                         = require './helpers'\nHEDGES                    = require './hedges'\nITYP                      = @\ntypes                     = new ( require 'intertype' ).Intertype()\n@defaults                 = {}\n\n#-----------------------------------------------------------------------------------------------------------\ntypes.declare 'Type_cfg_constructor_cfg', tests:\n  \"@isa.object x\":                      ( x ) -> @isa.object x\n  \"@isa_optional.nonempty_text x.size\": ( x ) -> @isa_optional.nonempty_text x.size\n  \"@isa.function x.test\":               ( x ) -> @isa.function x.test\n  \"x.groups is a nonempty text or a nonempty list of nonempty texts\": ( x ) ->\n    return true if @isa.nonempty_text x.groups\n    return false unless @isa.list x.groups\n    return x.groups.every ( e ) => ( @isa.nonempty_text e ) and not ( /[\\s,]/ ).test e\n#...........................................................................................................\n@defaults.Type_cfg_constructor_cfg =\n  groups:           'other'\n  size:             null  # defaults to `'length'` where `isa_collection` is `true`\n  test:             null\n\n#-----------------------------------------------------------------------------------------------------------\ntypes.declare 'Intertype_constructor_cfg', tests:\n  \"@isa.object x\":                      ( x ) -> @isa.object x\n  \"@isa_optional.nonempty_text x.sep\":  ( x ) -> @isa_optional.nonempty_text x.sep\n#...........................................................................................................\n@defaults.Intertype_constructor_cfg =\n  sep:              '$'\n\n#===========================================================================================================\nclass Intertype_abc extends GUY.props.Strict_owner\n\n\n#===========================================================================================================\nclass @Type_cfg extends Intertype_abc\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( hub, cfg ) ->\n    ### TAINT ensure type_cfg does not contain `type`, `name` ###\n    super()\n    GUY.props.hide @, 'hub', hub\n    cfg         = { ITYP.defaults.Type_cfg_constructor_cfg..., cfg..., }\n    cfg.groups  = @_compile_groups cfg.groups\n    types.validate.Type_cfg_constructor_cfg cfg\n    cfg.test    = cfg.test.bind hub\n    cfg.size    = 'length' if cfg.isa_collection and not cfg.size?\n    cfg.size   ?= null\n    @[ k ]      = v for k, v of cfg\n    return GUY.lft.freeze @\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_groups: ( groups ) ->\n    R = if ( types.isa.text groups ) then groups.split /\\s*,\\s*/ else groups\n    for group in R\n      continue if @hub._hedges.hedgepaths.has group\n      throw new E.Intertype_ETEMPTBD '^intertype/Type_cfg^', \"unknown hedge group #{rpr group}\"\n    return R\n\n\n#===========================================================================================================\nclass @Intertype extends Intertype_abc\n\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    super()\n    @cfg      = { ITYP.defaults.Intertype_constructor_cfg..., cfg..., }\n    GUY.props.hide @, '_hedges', new HEDGES.Intertype_hedge_combinator()\n    @isa      = new GUY.props.Strict_owner()\n    @groups   = {}\n    #.......................................................................................................\n    for group from @_hedges._get_groupnames()\n      @groups[ group ] = new Set()\n      do ( group ) =>\n        GUY.props.hide @isa, group, ( x ) =>\n          R = @groups[ group ].has @type_of x\n          return @_protocol_isa group, R, R\n    GUY.lft.freeze @groups\n    #.......................................................................................................\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  declare: ( type, type_cfg ) =>\n    type_cfg      = new ITYP.Type_cfg @, type_cfg\n    GUY.props.hide @isa, type, type_cfg.test\n    for group in type_cfg.groups\n      #.....................................................................................................\n      ### register type with group ###\n      @_add_type_to_group group, type\n      #.....................................................................................................\n      for hedgepath from @_hedges.hedgepaths[ group ]\n        continue if hedgepath.length is 0\n        self = @isa\n        for hedge in hedgepath\n          unless self.has hedge\n            GUY.props.hide self, hedge, new GUY.props.Strict_owner()\n            # self[ hedge ] = new GUY.props.Strict_owner()\n          self = self[ hedge ]\n        #...................................................................................................\n        do ( hedgepath ) =>\n          GUY.props.hide self, type, ( x ) => @_isa hedgepath..., type, x\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _add_type_to_group: ( group, type ) =>\n    @groups[ group ].add type\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _isa: ( hedges..., type, x ) =>\n    for hedge, hedge_idx in hedges\n      switch R = @_test_hedge hedge, x\n        when true                       then null\n        when H.signals.true_and_break   then return @_protocol_isa hedge, R, true\n        when H.signals.false_and_break  then return @_protocol_isa hedge, R, false\n        when false                      then return false\n        when H.signals.process_list_elements, H.signals.process_set_elements\n          tail_hedges = hedges[ hedge_idx + 1 .. ]\n          # debug '^3324^', { tail_hedges, }\n          for e from x\n            unless @_isa tail_hedges..., type, e\n              return @_protocol_isa hedge, R, false\n          return true\n        else\n          throw new E.Intertype_ETEMPTBD '^intertype@1^', \"illegal return value from `_test_hedge()`: #{rpr type}\"\n    # urge '^345^', { hedge, hedges, type, x, }\n    #.......................................................................................................\n    unless ( typetest = @isa.get type, null )?\n      throw new E.Intertype_ETEMPTBD '^intertype@1^', \"unknown type #{rpr type}\"\n    # debug '^3435^', { hedges, type, x, }\n    verdict = typetest x\n    return @_protocol_isa type, verdict, verdict\n\n  #---------------------------------------------------------------------------------------------------------\n  _test_hedge: ( hedge, x ) =>\n    unless ( hedgetest = @_hedges._hedgemethods.get hedge, null )?\n      throw new E.Intertype_ETEMPTBD '^intertype@1^', \"unknown hedge #{rpr hedge}\"\n    #.......................................................................................................\n    switch R = hedgetest x\n      when H.signals.true_and_break         then return @_protocol_isa hedge, R, R\n      when H.signals.false_and_break        then return @_protocol_isa hedge, R, R\n      when false                            then return @_protocol_isa hedge, R, false\n      when true                             then return @_protocol_isa hedge, R, true\n      when H.signals.process_list_elements  then return @_protocol_isa hedge, R, R\n      when H.signals.process_set_elements   then return @_protocol_isa hedge, R, R\n    #.......................................................................................................\n    throw new E.Intertype_internal_error '^intertype@1^', \\\n      \"unexpected return value from hedgemethod for hedge #{rpr hedge}: #{rpr R}\"\n\n  #---------------------------------------------------------------------------------------------------------\n  _protocol_isa: ( term, result, verdict ) ->\n    urge '^_protocol_isa@1^', { term, result, verdict, }\n    return verdict\n\n  #---------------------------------------------------------------------------------------------------------\n  type_of:                    H.type_of\n  size_of:                    H.size_of\n\n\n############################################################################################################\n@defaults = GUY.lft.freeze @defaults\n\n#===========================================================================================================\nx = new @Intertype()\n# urge x.foo = 42\n# urge x.foo\n# urge x.has\n# urge x.has.foo\n# urge x.has.bar\n# try urge x.bar catch error then warn CND.reverse error.message\n\n\n###\n\ntypes.isa.integer                                           42\ntypes.isa.even.integer                                      -42\ntypes.isa.odd.integer                                       41\ntypes.isa.negative1.integer                                 -42\ntypes.isa.negative0.integer                                 0\ntypes.isa.positive1.integer                                 42\ntypes.isa.positive0.integer                                 0\ntypes.isa.list_of.integer                                   [ 42, ]\ntypes.isa.nonempty.list_of.negative1.integer                [ -42, ]\ntypes.isa.nonempty.list_of.negative0.integer                [ 0, ]\ntypes.isa.nonempty.list_of.positive1.integer                [ 42, ]\ntypes.isa.nonempty.list_of.positive0.integer                [ 0, ]\ntypes.isa.empty.list_of.integer                             []\ntypes.isa.nonempty.list_of.integer                          [ 42, ]\ntypes.isa.optional.integer                                  42\ntypes.isa.optional.list_of.integer                          [ 42, ]\ntypes.isa.optional.empty.list_of.integer                    []\ntypes.isa.optional.nonempty.list_of.integer                 [ 42, ]\ntypes.isa.optional.negative1.integer                        -42\ntypes.isa.optional.negative0.integer                        0\ntypes.isa.optional.positive1.integer                        42\ntypes.isa.optional.positive0.integer                        0\ntypes.isa.optional.nonempty.list_of.negative1.integer       [ -42, ]\ntypes.isa.optional.nonempty.list_of.negative0.integer       [ 0, ]\ntypes.isa.optional.nonempty.list_of.positive1.integer       [ 42, ]\ntypes.isa.optional.nonempty.list_of.positive0.integer       [ 0, ]\ntypes.isa.optional.empty.list_of.negative1.integer          -42\ntypes.isa.optional.empty.list_of.negative0.integer          0\ntypes.isa.optional.empty.list_of.positive1.integer          42\ntypes.isa.optional.empty.list_of.positive0.integer          0\n\n[all]     [all]     [isa_collection]  [isa_collection]  [isa_numeric]   [isa_numeric]   [mandatory]\n————————————————————————————————————————————————————————————————————————————————————————————————————\nisa       optional  empty             list_of           even            negative0       <type>\nvalidate            nonempty                            odd             negative1\n                                                                        positive0\n                                                                        positive1\n###\n\n\n\n"
  ]
}