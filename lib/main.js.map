{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ debug }                 = GUY.trm.get_loggers 'INTERTYPE'\n{ rpr   }                 = GUY.trm\n#...........................................................................................................\nE                         = require './errors'\nH                         = require './helpers'\nHEDGES                    = require './hedges'\nITYP                      = @\ntypes                     = new ( require 'intertype-legacy' ).Intertype()\n@defaults                 = {}\n{ to_width }              = require 'to-width'\n\n\n#-----------------------------------------------------------------------------------------------------------\ntypes.declare 'Type_cfg_constructor_cfg', tests:\n  \"@isa.object x\":                      ( x ) -> @isa.object x\n  \"@isa.nonempty_text x.name\":          ( x ) -> @isa.nonempty_text x.name\n  \"( @isa.function x.test ) or ( @isa_list_of.function x.test )\": \\\n    ( x ) -> ( @isa.function x.test ) or ( @isa_list_of.function x.test )\n  \"x.groups is a nonempty text or a nonempty list of nonempty texts\": ( x ) ->\n    return true if @isa.nonempty_text x.groups\n    return false unless @isa.list x.groups\n    return x.groups.every ( e ) => ( @isa.nonempty_text e ) and not ( /[\\s,]/ ).test e\n#...........................................................................................................\n@defaults.Type_cfg_constructor_cfg =\n  groups:           'other'\n  name:             null\n  test:             null\n\n#-----------------------------------------------------------------------------------------------------------\ntypes.declare 'Intertype_constructor_cfg', tests:\n  \"@isa.object x\":                      ( x ) -> @isa.object x\n  \"@isa_optional.nonempty_text x.sep\":  ( x ) -> @isa_optional.nonempty_text x.sep\n#...........................................................................................................\n@defaults.Intertype_constructor_cfg =\n  sep:              '$'\n\n#===========================================================================================================\nclass Intertype_abc extends GUY.props.Strict_owner\n\n\n#===========================================================================================================\nclass @Type_cfg extends Intertype_abc\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( hub, cfg ) ->\n    ### TAINT ensure type_cfg does not contain `type`, `name` ###\n    super()\n    GUY.props.hide @, 'hub', hub\n    cfg         = { ITYP.defaults.Type_cfg_constructor_cfg..., cfg..., }\n    cfg.groups  = @_compile_groups cfg.groups\n    types.validate.Type_cfg_constructor_cfg cfg\n    if types.isa.list cfg.test\n      _test       = ( f.bind hub for f in cfg.test )\n      cfg.test    = ( x ) => _test.every ( f ) -> f x\n    else\n      cfg.test    = cfg.test.bind hub\n    cfg.size    = 'length' if cfg.isa_collection and not cfg.size?\n    cfg.size   ?= null\n    @[ k ]      = v for k, v of cfg\n    return GUY.lft.freeze @\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_groups: ( groups ) ->\n    R = if ( types.isa.text groups ) then groups.split /\\s*,\\s*/ else groups\n    for group in R\n      continue if GUY.props.has @hub._hedges.hedgepaths, group\n      throw new E.Intertype_ETEMPTBD '^intertype/Type_cfg^', \"unknown hedge group #{rpr group}\"\n    return R\n\n\n#===========================================================================================================\nclass @Intertype extends Intertype_abc\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    super()\n    GUY.props.hide @, 'cfg',      { ITYP.defaults.Intertype_constructor_cfg..., cfg..., }\n    GUY.props.hide @, '_hedges',  new HEDGES.Intertype_hedge_combinator()\n    GUY.props.hide @, 'isa',      new GUY.props.Strict_owner { reset: false, }\n    GUY.props.hide @, 'validate', new GUY.props.Strict_owner { reset: false, }\n    GUY.props.hide @, 'declare',  new Proxy ( @_declare.bind @ ), get: ( _, type ) => ( cfg ) => @_declare.call @, type, cfg\n    GUY.props.hide @, 'registry', new GUY.props.Strict_owner { reset: false, }\n    GUY.props.hide @, 'groups',   {}\n    #.......................................................................................................\n    for group from @_hedges._get_groupnames()\n      @groups[ group ] = new Set()\n      do ( group ) =>\n      #   @isa[ group ] = ( x ) =>\n      #     R = @groups[ group ].has @type_of x\n      #     return @_protocol_isa group, R, R\n        @declare group, groups: group, test: ( x ) =>\n          R = @groups[ group ].has @type_of x\n          return @_protocol_isa group, R, R\n    GUY.lft.freeze @groups\n    #.......................................................................................................\n    ### TAINT to get the demo off the ground we here shim a few types; this part will definitily\n    change in future versions ###\n    # @declare 'object',  test: ( x ) -> ( H.type_of x ) is 'object'\n    # @declare 'float',   groups: 'number',     test: ( x ) -> ( H.type_of x ) is 'float'\n    # @declare 'text',    groups: 'collection', test: ( x ) -> ( H.type_of x ) is 'text'\n    #.......................................................................................................\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _declare: ( type, type_cfg ) ->\n    ### TAINT handling of arguments here shimmed while we have not yet nailed down the exact calling\n    convention for this method. ###\n    type_cfg            = { type_cfg..., name: type, }\n    type_cfg            = new ITYP.Type_cfg @, type_cfg\n    @registry[  type ]  = type_cfg\n    @isa[       type ]  = type_cfg.test\n    @validate[  type ]  = type_cfg.test\n    for group in type_cfg.groups\n      #.....................................................................................................\n      ### register type with group ###\n      @_add_type_to_group group, type\n      #.....................................................................................................\n      for hedgepath from @_hedges.hedgepaths[ group ]\n        continue if hedgepath.length is 0\n        i_target = @isa\n        v_target = @validate\n        for hedge in hedgepath\n          unless GUY.props.has i_target, hedge\n            i_target[ hedge ] = new GUY.props.Strict_owner()\n            v_target[ hedge ] = new GUY.props.Strict_owner()\n          i_target = i_target[ hedge ]\n          v_target = v_target[ hedge ]\n        #...................................................................................................\n        do ( hedgepath ) =>\n          i_target[ type ] = ( x ) => @_isa       hedgepath..., type, x\n          v_target[ type ] = ( x ) => @_validate  hedgepath..., type, x\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _add_type_to_group: ( group, type ) ->\n    @groups[ group ].add type\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _isa: ( hedges..., type, x ) ->\n    for hedge, hedge_idx in hedges\n      switch R = @_test_hedge hedge, x\n        when true                       then null\n        when H.signals.true_and_break   then return @_protocol_isa hedge, R, true\n        when H.signals.false_and_break  then return @_protocol_isa hedge, R, false\n        when false                      then return false\n        when H.signals.process_list_elements, H.signals.process_set_elements\n          tail_hedges = hedges[ hedge_idx + 1 .. ]\n          # debug '^3324^', { tail_hedges, }\n          for e from x\n            unless @_isa tail_hedges..., type, e\n              return @_protocol_isa hedge, R, false\n          return true\n        else\n          throw new E.Intertype_ETEMPTBD '^intertype@1^', \"illegal return value from `_test_hedge()`: #{rpr type}\"\n    # urge '^345^', { hedge, hedges, type, x, }\n    #.......................................................................................................\n    unless ( typetest = GUY.props.get @isa, type, null )?\n      throw new E.Intertype_ETEMPTBD '^intertype@1^', \"unknown type #{rpr type}\"\n    # debug '^3435^', { hedges, type, x, }\n    verdict = typetest x\n    return @_protocol_isa type, verdict, verdict\n\n  #---------------------------------------------------------------------------------------------------------\n  _test_hedge: ( hedge, x ) ->\n    unless ( hedgetest = GUY.props.get @_hedges._hedgemethods, hedge, null )?\n      throw new E.Intertype_ETEMPTBD '^intertype@1^', \"unknown hedge #{rpr hedge}\"\n    #.......................................................................................................\n    switch R = hedgetest x\n      when H.signals.true_and_break         then return @_protocol_isa hedge, R, R\n      when H.signals.false_and_break        then return @_protocol_isa hedge, R, R\n      when false                            then return @_protocol_isa hedge, R, false\n      when true                             then return @_protocol_isa hedge, R, true\n      when H.signals.process_list_elements  then return @_protocol_isa hedge, R, R\n      when H.signals.process_set_elements   then return @_protocol_isa hedge, R, R\n    #.......................................................................................................\n    throw new E.Intertype_internal_error '^intertype@1^', \\\n      \"unexpected return value from hedgemethod for hedge #{rpr hedge}: #{rpr R}\"\n\n  #---------------------------------------------------------------------------------------------------------\n  _protocol_isa: ( term, result, verdict ) ->\n    urge '^_protocol_isa@1^', { term, result, verdict, }\n    return verdict\n\n  #---------------------------------------------------------------------------------------------------------\n  _validate: ( hedges..., type, x ) ->\n    debug '^4534^', { hedges, type, x, }\n    debug '^4534^', @_isa hedges..., type, x\n    return true if @_isa hedges..., type, x\n    qtype = [ hedges..., type, ].join @cfg.sep\n    xr    = to_width ( rpr x ), 100\n    throw new E.Intertype_ETEMPTBD '^intertype@1^', \"not a valid #{qtype}\"\n\n  #---------------------------------------------------------------------------------------------------------\n  type_of:                    H.type_of\n  size_of:                    H.size_of\n\n\n############################################################################################################\n@defaults = GUY.lft.freeze @defaults\n\n\n\n"
  ]
}