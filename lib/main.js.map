{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n#===========================================================================================================\nWG                        = require 'webguy'\n{ rpr }                   = WG.trm\n{ hide\n  nameit }                = WG.props\n{ debug }                 = console\nE                         = require './errors'\n\n\n#===========================================================================================================\nbuilt_ins =\n  anything:               ( x ) -> true\n  nothing:                ( x ) -> not x?\n  something:              ( x ) -> x?\n  null:                   ( x ) -> x is null\n  undefined:              ( x ) -> x is undefined\n  unknown:                ( x ) -> ( @type_of x ) is 'unknown'\n\n#-----------------------------------------------------------------------------------------------------------\ndefault_declarations =\n  basetype:               ( x ) -> ( ( typeof x ) is 'string' ) and ( x is 'optional' or Reflect.has built_ins, x )\n  boolean:                ( x ) -> ( x is true ) or ( x is false )\n  function:               ( x ) -> ( Object::toString.call x ) is '[object Function]'\n  asyncfunction:          ( x ) -> ( Object::toString.call x ) is '[object AsyncFunction]'\n  symbol:                 ( x ) -> ( typeof x ) is 'symbol'\n  object:                 ( x ) -> x? and ( typeof x is 'object' ) and ( ( Object::toString.call x ) is '[object Object]' )\n  float:                  ( x ) -> Number.isFinite x\n  text:                   { template: '', test: ( ( x ) -> ( typeof x ) is 'string' ), }\n  regex:                  ( x ) -> x instanceof RegExp\n  nullary:                ( x ) -> x? and ( ( x.length is 0 ) or ( x.size is 0 ) )\n  unary:                  ( x ) -> x? and ( ( x.length is 1 ) or ( x.size is 1 ) )\n  binary:                 ( x ) -> x? and ( ( x.length is 2 ) or ( x.size is 2 ) )\n  trinary:                ( x ) -> x? and ( ( x.length is 3 ) or ( x.size is 3 ) )\n  #.........................................................................................................\n  IT_listener:            ( x ) -> ( @isa.function x ) or ( @isa.asyncfunction x )\n  IT_note_$key:           ( x ) -> ( @isa.text x ) or ( @isa.symbol x )\n  unary_or_binary:        ( x ) -> ( @isa.unary   x ) or ( @isa.binary  x )\n  binary_or_trinary:      ( x ) -> ( @isa.binary  x ) or ( @isa.trinary x )\n  $freeze:                ( x ) -> @isa.boolean x\n\n#-----------------------------------------------------------------------------------------------------------\n# internal_declarations = { default_declarations..., }\ninternal_declarations = {\n  default_declarations...\n  # foo: ( x ) -> x is 'foo'\n  # bar: ( x ) -> x is 'bar'\n  }\n\n\n#===========================================================================================================\nclass _Intertype\n\n  #---------------------------------------------------------------------------------------------------------\n  ### if set to `true`, insertion of default_declarations is blocked ###\n  @_minimal: true\n\n  #---------------------------------------------------------------------------------------------------------\n  ### TAINT may want to check type, arities ###\n  constructor: ( declarations... ) ->\n    declarations.unshift default_declarations unless @constructor._minimal\n    #.......................................................................................................\n    hide @, 'isa',                @_new_strict_proxy 'isa'\n    hide @, 'validate',           @_new_strict_proxy 'validate'\n    hide @, 'create',             @_new_strict_proxy 'create'\n    hide @, 'declarations',       @_new_strict_proxy 'declarations'\n    hide @, '_tests_for_type_of', {}\n    hide @, 'type_of',            ( P... ) => @_type_of P...\n    hide @, 'declare',            ( P... ) => @_declare P...\n    #.......................................................................................................\n    @_declare built_ins, declarations...\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _declare: ( declarations... ) ->\n    for collection in declarations\n      for type, test of collection then do ( type, test ) =>\n        declaration = @_compile_declaration_object type, test\n        #...................................................................................................\n        if Reflect.has @declarations, type\n          if ( ( internal_types?.isa.basetype type ) ? false )\n            throw new E.Intertype_basetype_override_forbidden '^constructor@1^', type\n          unless declaration.override\n            throw new E.Intertype_declaration_override_forbidden '^constructor@2^', type\n        #...................................................................................................\n        ### TAINT pass `declaration` as sole argument, as for `create.type()` ###\n        @declarations[        type ] = declaration\n        @isa[                 type ] = @get_isa               type, declaration.test\n        @isa.optional[        type ] = @get_isa_optional      type, declaration.test\n        @validate[            type ] = @get_validate          type, declaration.test\n        @validate.optional[   type ] = @get_validate_optional type, declaration.test\n        @_tests_for_type_of[  type ] = @isa[ type ] if collection isnt built_ins\n        @create[              type ] = @get_create            declaration\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_declaration_object: ( type, test ) ->\n    template = { override: false, }\n    return { template..., type, test, } if ( @constructor is _Intertype )\n    #.......................................................................................................\n    switch true\n      #.....................................................................................................\n      when internal_types.isa.function test\n        R = { template..., type, test, } ### TAINT assign template ###\n      #.....................................................................................................\n      when internal_types.isa.object test\n        R = { template..., type, test..., }\n      #.....................................................................................................\n      else\n        throw new E.Intertype_wrong_type '^constructor@1^', \"function or object\", internal_types.type_of test\n    #.......................................................................................................\n    ### TAINT should ideally check entire object? ###\n    unless internal_types.isa.function R.test\n      throw new E.Intertype_test_must_be_function '^constructor@2^', 'function', internal_types.type_of test\n    unless internal_types.isa.unary R.test\n      throw new E.Intertype_function_with_wrong_arity '^constructor@2^', 1, R.test.length\n    internal_types.validate.boolean R.override\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _new_strict_proxy: ( name ) ->\n    ### Create a proxy for a new object that will throw an `Intertype_unknown_type` error when\n    a non-existing property is accessed ###\n    get_cfg = ( ref ) =>\n      get: ( target, key ) =>\n        return undefined          if key is Symbol.toStringTag\n        return target.constructor if key is 'constructor'\n        return target.toString    if key is 'toString'\n        # return target.call        if key is 'call'\n        # return target.apply       if key is 'apply'\n        return R if ( R = Reflect.get target, key )?\n        throw new E.Intertype_unknown_type ref, key\n    optional =  new Proxy {},             get_cfg \"^proxy_for_#{name}_optional@1^\"\n    return      new Proxy { optional, },  get_cfg \"^proxy_for_#{name}@1^\"\n\n  #---------------------------------------------------------------------------------------------------------\n  get_isa: ( type, test ) ->\n    me = @\n    return nameit \"isa_#{type}\", ( x ) ->\n      if ( arguments.length isnt 1 )\n        throw new E.Intertype_wrong_arity \"^isa_#{type}@1^\", 1, arguments.length\n      return test.call me, x\n\n  #---------------------------------------------------------------------------------------------------------\n  get_isa_optional: ( type, test ) ->\n    me = @\n    return nameit \"isa_optional_#{type}\", ( x ) ->\n      if ( arguments.length isnt 1 )\n        throw new E.Intertype_wrong_arity \"^isa_optional_#{type}@1^\", 1, arguments.length\n      if x? then ( test.call me, x ) else true\n\n  #---------------------------------------------------------------------------------------------------------\n  get_validate: ( type, test ) ->\n    me = @\n    return nameit \"validate_#{type}\", ( x ) ->\n      if ( arguments.length isnt 1 )\n        throw new E.Intertype_wrong_arity \"^validate_#{type}@1^\", 1, arguments.length\n      return x if test.call me, x\n      throw new E.Intertype_validation_error \"^validate_#{type}@1^\", type, typeof x ### TAINT `typeof` will give some strange results ###\n\n  #---------------------------------------------------------------------------------------------------------\n  get_validate_optional: ( type, test ) ->\n    me = @\n    return nameit \"validate_optional_#{type}\", ( x ) ->\n      if ( arguments.length isnt 1 )\n        throw new E.Intertype_wrong_arity \"^validate_optional_#{type}@1^\", 1, arguments.length\n      return x unless x?\n      return x if test.call me, x\n      throw new E.Intertype_optional_validation_error \"^validate_optional_#{type}@1^\", type, typeof x ### TAINT `typeof` will give some strange results ###\n\n  #---------------------------------------------------------------------------------------------------------\n  _type_of: ( x ) ->\n    if ( arguments.length isnt 1 )\n      throw new E.Intertype_wrong_arity \"^type_of@1^\", 1, arguments.length\n    return 'null'       if x is null\n    return 'undefined'  if x is undefined\n    for type, test of @_tests_for_type_of\n      return type if test x\n    return 'unknown'\n\n  #---------------------------------------------------------------------------------------------------------\n  get_create: ( declaration ) ->\n    { type\n      create\n      template  } = declaration\n    me            = @\n    switch true\n      when create?\n        unless me.isa.function create\n          throw new E.Intertype_create_must_be_function \"^get_create@1^\", type, me.type_of create\n        return nameit \"create_#{type}\", ( P... ) ->\n          unless me.isa[ type ] ( R = create.call me, P... )\n            throw new E.Intertype_wrong_arguments_for_create \"^create_#{type}@1^\", type, me.type_of R\n          return R\n      when template?\n        return @_get_create_from_template declaration\n    return nameit \"create_#{type}\", ( P... ) ->\n      throw new E.Intertype_create_not_available \"^create_#{type}@2^\", type\n\n  #---------------------------------------------------------------------------------------------------------\n  _get_create_from_template: ( declaration ) ->\n    ### TAINT must distinguish whether value is object or not, use assign ###\n    { type\n      template  } = declaration\n    me            = @\n    #.......................................................................................................\n    if default_declarations.function template\n      if ( template.length isnt 0 )\n        throw new E.Intertype_wrong_template_arity \"^get_create@2^\", type, template.length\n      return nameit \"create_#{type}\", ->\n        if ( arguments.length isnt 0 )\n          throw new E.Intertype_wrong_arity \"^create_#{type}@3^\", 0, arguments.length\n        unless me.isa[ type ] ( R = template.call me )\n          throw new E.Intertype_wrong_arguments_for_create \"^create_#{type}@4^\", type, me.type_of R\n        return R\n    #.......................................................................................................\n    ### TAINT case of constant template could be handled when validating the declaration ###\n    return nameit \"create_#{type}\", ->\n      if ( arguments.length isnt 0 )\n        throw new E.Intertype_wrong_arity \"^create_#{type}@6^\", 0, arguments.length\n      unless me.isa[ type ] ( R = template )\n        throw new E.Intertype_wrong_arguments_for_create \"^create_#{type}@7^\", type, me.type_of R\n      return R\n\n\n#===========================================================================================================\nclass Intertype_minimal extends _Intertype\nclass Intertype         extends _Intertype\n  @_minimal: false\n\n\n#===========================================================================================================\ninternal_types  = new _Intertype internal_declarations\ntypes           = new Intertype()\n{ isa\n  validate\n  create\n  type_of     } = types\n\n#===========================================================================================================\nmodule.exports = {\n  Intertype, Intertype_minimal\n  types, isa, validate, create, type_of,\n  declarations: default_declarations, }\n"
  ]
}