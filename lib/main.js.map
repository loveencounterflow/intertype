{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "/home/flow/jzr/intertype/src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'INTERTYPE/MAIN'\ndebug                     = CND.get_logger 'debug',     badge\nalert                     = CND.get_logger 'alert',     badge\nwhisper                   = CND.get_logger 'whisper',   badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\ninfo                      = CND.get_logger 'info',      badge\n#...........................................................................................................\nMultimix                  = require 'multimix'\n#...........................................................................................................\n{ assign\n  jr\n  flatten\n  xrpr\n  get_rprs_of_tprs\n  js_type_of }            = require './helpers'\n#...........................................................................................................\ndeclarations              = require './declarations'\nsad                       = ( require './checks' ).sad\njk_equals                 = require '../deps/jkroso-equals'\n\n\n#-----------------------------------------------------------------------------------------------------------\nisa               = ( type, xP... ) -> @_satisfies_all_aspects  type, xP...\nisa_list_of       = ( type, xP... ) -> @isa.list_of             type, xP...\nvalidate_list_of  = ( type, xP... ) -> @validate.list_of        type, xP...\n\n#-----------------------------------------------------------------------------------------------------------\ncast = ( type_a, type_b, x, xP... ) ->\n  @validate type_a, x, xP...\n  return x if type_a is type_b\n  return x if @isa type_b, x, xP...\n  if ( casts = @specs[ type_a ].casts )?\n    return ( converter.call @, x, xP... ) if ( converter = casts[ type_b ] )?\n  return \"#{x}\" if type_b is 'text' ### TAINT use better method like util.inspect ###\n  throw new Error \"µ30981 unable to cast a #{type_a} as #{type_b}\"\n\n#-----------------------------------------------------------------------------------------------------------\ncheck = ( type, x, xP... ) ->\n  if @specs[ type ]?\n    return if ( @isa type, x, xP... ) then true else sad\n  throw new Error \"µ44521 unknown type or check #{rpr type}\" unless ( check = @checks[ type ] )?\n  return try check.call @, x, xP... catch error then error\n\n#-----------------------------------------------------------------------------------------------------------\nvalidate = ( type, xP... ) ->\n  return true unless ( aspect = @_get_unsatisfied_aspect type, xP... )?\n  [ x, P..., ] = xP\n  { rpr_of_tprs, srpr_of_tprs, } = get_rprs_of_tprs P\n  message = if aspect is 'main'\n    \"µ3093 not a valid #{type}: #{xrpr x}#{srpr_of_tprs}\"\n  else\n    \"µ3093 not a valid #{type} (violates #{rpr aspect}): #{xrpr x}#{srpr_of_tprs}\"\n  throw new Error message\n\n\n\n\n#===========================================================================================================\nclass @Intertype extends Multimix\n  # @extend   object_with_class_properties\n  @include require './sizing'\n  @include require './declaring'\n  @include require './checks'\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( target = null ) ->\n    super()\n    #.......................................................................................................\n    ### TAINT bug in MultiMix, should be possible to declare methods in class, not the constructor,\n    and still get a bound version with `export()`; declaring them here FTTB ###\n    #.......................................................................................................\n    @sad              = sad\n    @specs            = {}\n    @checks           = {}\n    @isa              = Multimix.get_keymethod_proxy @, isa\n    @isa_list_of      = Multimix.get_keymethod_proxy @, isa_list_of\n    @cast             = Multimix.get_keymethod_proxy @, cast\n    @validate         = Multimix.get_keymethod_proxy @, validate\n    @validate_list_of = Multimix.get_keymethod_proxy @, validate_list_of\n    @check            = Multimix.get_keymethod_proxy @, check\n    @nowait           = ( x ) -> @validate.immediate x; return x\n    declarations.declare_types.apply @\n    declarations.declare_checks.apply @\n    @export target if target?\n\n  #---------------------------------------------------------------------------------------------------------\n  equals: ( a, P... ) ->\n    ### TAINT FTTB we are opting to use `CND.equals()`; in the future, possibly use direct (and maybe\n    updated) dependency on underlying module (which is `cnd/src/jkroso-equals.coffee` ATM) ###\n    type_of_a = @type_of a\n    for b in P\n      return false unless type_of_a is @type_of b\n      ### TAINT this call involves its own typechecking code and thus may mysteriously fail ###\n      return false unless jk_equals a, b\n    return true\n\n\n"
  ]
}