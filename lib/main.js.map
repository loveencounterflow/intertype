{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ debug\n  info\n  warn\n  urge\n  help }                  = GUY.trm.get_loggers 'INTERTYPE'\n{ rpr }                   = GUY.trm\n#...........................................................................................................\nE                         = require './errors'\nH                         = require './helpers'\nHEDGES                    = require './hedges'\nDECLARATIONS              = require './declarations'\n{ Type_factory }          = require './type-factory'\n{ to_width }              = require 'to-width'\n\n\n\n#===========================================================================================================\nclass Intertype extends H.Intertype_abc\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    super()\n    GUY.props.hide @, 'cfg',          { H.defaults.Intertype_constructor_cfg..., cfg..., }\n    H.types.validate.Intertype_constructor_cfg @cfg\n    #.......................................................................................................\n    GUY.props.hide @, '_hedges',      new HEDGES.Intertype_hedges()\n    GUY.props.hide @, '_collections', new Set()\n    GUY.props.hide @, '_signals',     H.signals\n    # GUY.props.hide @, 'isa',      new GUY.props.Strict_owner { reset: false, }\n    GUY.props.hide @, 'isa',          new Proxy {}, @_get_hedge_base_proxy_cfg @, '_isa'\n    GUY.props.hide @, 'validate',     new Proxy {}, @_get_hedge_base_proxy_cfg @, '_validate'\n    GUY.props.hide @, 'create',       new Proxy {}, @_get_hedge_base_proxy_cfg @, '_create'\n    GUY.props.hide @, 'type_factory', new Type_factory @\n    #.......................................................................................................\n    ### TAINT squeezing this in here for the moment, pending reformulation of `isa` &c to make them callable: ###\n    GUY.props.hide @, 'declare',      new Proxy ( @_declare.bind @ ), get: ( _, name ) => ( P... ) =>\n      @_declare name, P...\n    #.......................................................................................................\n    GUY.props.hide @, 'registry',     GUY.props.Strict_owner.create { oneshot: true, }\n    # GUY.props.hide @, 'types',        H.types\n    @_initialize_state()\n    #.......................................................................................................\n    @_register_hedges()\n    DECLARATIONS._provisional_declare_basic_types @\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _initialize_state: ( cfg ) ->\n    ### TAINT should use deep copy of default object ###\n    return @state = { H.defaults.Intertype_state..., hedgeresults: [], cfg..., }\n\n  #---------------------------------------------------------------------------------------------------------\n  _register_hedges: ->\n    for hedge, isa of @_hedges._hedgemethods\n      do ( hedge, isa ) =>\n        @declare hedge, { isa, }\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  ### TAINT ideally would put this stuff elsewhere ###\n  _get_hedge_base_proxy_cfg: ( self, method_name ) ->\n    # _method_name  = method_name\n    # _method_name  = \"_#{method_name}\" unless _method_name.startsWith '_'\n    #.......................................................................................................\n    return\n      get: ( target, key ) =>\n        return undefined          if key is Symbol.toStringTag\n        return target.constructor if key is 'constructor'\n        return target.toString    if key is 'toString'\n        return target.call        if key is 'call'\n        return target.apply       if key is 'apply'\n        #...................................................................................................\n        self._initialize_state()\n        self.state.method       = method_name\n        self.state.verb         = method_name[ 1... ]\n        self.state.hedges       = [ key, ]\n        self.state.hedgerow     = key\n        debug '^609-1^', { key, }\n        #...................................................................................................\n        if key in [ 'of', 'or', ]\n          throw new E.Intertype_ETEMPTBD '^intertype.base_proxy@2^', \\\n            \"hedgerow cannot start with `#{key}`, must be preceeded by hedge\"\n        unless ( GUY.props.get @registry, key, null )?\n          throw new E.Intertype_ETEMPTBD '^intertype.base_proxy@3^', \"unknown hedge or type #{rpr key}\"\n        #...................................................................................................\n        return R if ( R = GUY.props.get target, key, H.signals.nothing ) isnt H.signals.nothing\n        #...................................................................................................\n        ### TAINT code below never used? ###\n        if method_name is '_create'\n          f = H.nameit key, ( cfg = null ) -> self[ self.state.method ] key, cfg\n        else\n          f = H.nameit key, ( P... ) -> self[ self.state.method ] P...\n        GUY.props.hide target, key, R = new Proxy f, @_get_hedge_sub_proxy_cfg self\n        return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _get_hedge_sub_proxy_cfg: ( self ) ->\n    return\n      get: ( target, key ) =>\n        return undefined          if key is Symbol.toStringTag\n        return target.constructor if key is 'constructor'\n        return target.toString    if key is 'toString'\n        return target.call        if key is 'call'\n        return target.apply       if key is 'apply'\n        self.state.hedges.push key\n        self.state.hedgerow = self.state.hedges.join self.cfg.sep\n        return R if ( R = GUY.props.get target, key, H.signals.nothing ) isnt H.signals.nothing\n        #...................................................................................................\n        unless ( type_dsc = GUY.props.get @registry, key, null )?\n          throw new E.Intertype_ETEMPTBD '^intertype.base_proxy@4^', \"unknown hedge or type #{rpr key}\"\n        debug '^609-2^', { key, }\n        #...................................................................................................\n        ### check for preceding type being iterable when building hedgerow with `of`: ###\n        if ( key is 'of' ) and ( not @_collections.has target.name )\n          throw new E.Intertype_ETEMPTBD '^intertype.sub_proxy@5^', \\\n            \"expected type before `of` to be a collection, got #{rpr target.name}\"\n        #...................................................................................................\n        f = H.nameit key, ( x ) -> self[ self.state.method ] self.state.hedges..., x\n        GUY.props.hide target, key, R = new Proxy f, @_get_hedge_sub_proxy_cfg self\n        return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _declare: ( P... ) ->\n    ### TAINT handling of arguments here shimmed while we have not yet nailed down the exact calling\n    convention for this method. ###\n    dsc                       = @type_factory.create_type P...\n    @registry[ dsc.typename ] = dsc\n    ### TAINT need not call _get_hedge_sub_proxy_cfg() twice? ###\n    @isa[      dsc.typename ] = new Proxy dsc, @_get_hedge_sub_proxy_cfg @\n    @validate[ dsc.typename ] = new Proxy dsc, @_get_hedge_sub_proxy_cfg @\n    @_collections.add dsc.typename if dsc.collection\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _validate_hedgerow: ( hedgerow ) ->\n    if ( hedgerow[ 0 ] in [ 'of', 'or', ] ) or ( hedgerow[ hedgerow.length - 1 ] in [ 'of', 'or', ] )\n      xr = rpr hedgerow.join @cfg.sep\n      throw new E.Intertype_ETEMPTBD '^intertype.validate_hedgerow@6^', \\\n        \"hedgerow cannot begin or end with `of` or `or`, must be surrounded by hedges, got #{xr}\"\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _isa: ( hedges..., x ) ->\n    @state.isa_depth++\n    R = false\n    try\n      R = @state.result = @_inner_isa hedges..., x\n    catch error\n      throw error if @cfg.errors is 'throw' or error instanceof E.Intertype_error\n      @state.error = error\n    @state.isa_depth--\n    return @state.result = R\n\n  #---------------------------------------------------------------------------------------------------------\n  _inner_isa: ( hedges..., x ) ->\n    @_validate_hedgerow hedges\n    hedge_idx       = -1\n    last_hedge_idx  = hedges.length - 1\n    advance         = false\n    is_terminal     = false\n    R               = true\n    #.......................................................................................................\n    loop\n      hedge_idx++\n      if hedge_idx > last_hedge_idx\n        return ( R )                                                                # exit point\n      hedge       = hedges[ hedge_idx ]\n      is_terminal = ( hedges[ hedge_idx + 1 ] is 'or' ) or ( hedge_idx is last_hedge_idx )\n      #.....................................................................................................\n      if advance\n        return ( false ) if is_terminal                                             # exit point\n        continue unless hedge is 'or'\n      advance = false\n      #.....................................................................................................\n      switch hedge\n        #...................................................................................................\n        when 'of'\n          @push_hedgeresult [ '▲ii1', @state.isa_depth, 'of', x, true, ]\n          tail_hedges = hedges[ hedge_idx + 1 .. ]\n          try\n            for element from x\n              # return ( false ) if ( @_inner_isa tail_hedges..., element ) is false  # exit point\n              return ( false ) if ( @_isa tail_hedges..., element ) is false  # exit point\n          catch error\n            throw error unless ( error.name is 'TypeError' ) and ( error.message is 'x is not iterable' )\n            throw new E.Intertype_ETEMPTBD '^intertype.isa@7^', \\\n              \"`of` must be preceded by collection name, got #{rpr hedges[ hedge_idx - 1 ]}\"\n          return ( true )                                                           # exit point\n        #...................................................................................................\n        when 'or'\n          @push_hedgeresult [ '▲ii2', @state.isa_depth, 'or', x, true, ]\n          R = true\n          continue\n      #.....................................................................................................\n      unless ( type_dsc = GUY.props.get @registry, hedge, null )?\n        throw new E.Intertype_ETEMPTBD '^intertype.isa@8^', \"unknown hedge or type #{rpr hedge}\"\n      #.....................................................................................................\n      # @push_hedgeresult hedgeresult = [ '▲ii3', @state.isa_depth, type_dsc.name, x, ]\n      result = type_dsc.call @, x\n      # hedgeresult.push result\n      switch result\n        when H.signals.return_true\n          return true\n        when false\n          advance = true\n          R       = false\n          continue\n        when true\n          return true if is_terminal\n          continue\n      #.....................................................................................................\n      throw new E.Intertype_internal_error '^intertype.isa@9^', \\\n        \"unexpected return value from hedgemethod for hedge #{rpr hedge}: #{rpr R}\"\n    #.......................................................................................................\n    return ( R )                                                                    # exit point\n\n  #---------------------------------------------------------------------------------------------------------\n  _validate: ( hedges..., x ) ->\n    debug '^3234^', { hedges, x, }\n    return x if @_isa hedges..., x\n    debug '^33442^', @get_state_report { format: 'short', }\n    return x\n    # ### TAINT code duplication ###\n    # qtype = hedges.join @cfg.sep\n    # xr    = to_width ( rpr x ), 100\n    # throw new E.Intertype_ETEMPTBD '^intertype.validate@10^', \"not a valid #{qtype}: #{xr}\"\n\n  #---------------------------------------------------------------------------------------------------------\n  _create: ( type, cfg ) ->\n    create = null\n    #.......................................................................................................\n    unless ( type_dsc = GUY.props.get @registry, type, null )?\n      throw new E.Intertype_ETEMPTBD '^intertype.create@11^', \"unknown type #{rpr type}\"\n    #.......................................................................................................\n    ### Try to get `create` method, or, should that fail, the `default` value. Throw error when neither\n    `create` nor `default` are given: ###\n    if ( create = GUY.props.get type_dsc, 'create', null ) is null\n      if ( R = GUY.props.get type_dsc, 'default', H.signals.nothing ) is H.signals.nothing\n        throw new E.Intertype_ETEMPTBD '^intertype.create@12^', \\\n          \"type #{rpr type} does not have a `default` value or a `create()` method\"\n    #.......................................................................................................\n    else\n      ### If `create` is given, call it to obtain default value: ###\n      R = create.call @, cfg\n    #.......................................................................................................\n    if ( not create? ) and cfg?\n      if ( t = H.js_type_of R ) is '[object Object]' or t is '[object Array]'\n        R = Object.assign ( structuredClone R ), cfg\n      else\n        R = cfg\n    else\n      R = structuredClone R\n    #.......................................................................................................\n    if      type_dsc.freeze is true   then R = Object.freeze R\n    else if type_dsc.freeze is 'deep' then R = GUY.lft.freeze H.deep_copy R\n    #.......................................................................................................\n    return @_validate type, R\n\n  #---------------------------------------------------------------------------------------------------------\n  equals:                     H.equals\n  type_of:                    H.type_of\n  size_of:                    H.size_of\n  _normalize_type:            ( type ) -> type.toLowerCase().replace /\\s+/g, ''\n  _split_hedgerow_text:       ( hedgerow ) -> hedgerow.split @cfg.sep\n\n  #---------------------------------------------------------------------------------------------------------\n  get_state_report: ( cfg ) -> H.get_state_report @, cfg\n\n  #---------------------------------------------------------------------------------------------------------\n  push_hedgeresult: ( hedgeresult ) ->\n    ### [ ref, level, hedge, value, r, ] = hedgeresult ###\n    @state.hedgeresults.push hedgeresult\n    return hedgeresult.at -1\n\n  # #-----------------------------------------------------------------------------------------------------------\n  # _walk_hedgepaths: ( cfg ) ->\n  #   throw new Error \"^intertype._walk_hedgepaths@9^ not implemented\"\n  #   # cfg = { H.defaults.Intertype_walk_hedgepaths_cfg..., cfg..., }\n  #   # yield from GUY.props.walk_tree @isa, cfg\n  #   # return null\n\n\n############################################################################################################\n@Type_factory         = Type_factory\n@Intertype            = Intertype\n@Intertype_user_error = E.Intertype_user_error\n\n\n"
  ]
}