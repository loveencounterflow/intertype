{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n{ Intervoke_phraser }     = require 'intervoke'\n{ sample_vocabulary }     = require 'intervoke/lib/phrase-parser'\n{ debug             }     = console\nmisfit                    = Symbol.for 'misfit'\n\n\n#===========================================================================================================\ndefaults =\n  declaration:\n    fields:   null\n    template: misfit\n\n#===========================================================================================================\nclass Types\n  isa_function: ( x ) -> typeof x is 'function'\n\nT = new Types()\n\n#===========================================================================================================\nclass Declaration_compiler\n\n  #---------------------------------------------------------------------------------------------------------\n  compile: ( name, declaration ) ->\n    declaration = { isa: declaration, } if T.isa_function declaration\n    R = { defaults.declaration..., declaration..., }\n    return R\n\nD = new Declaration_compiler()\n\n#===========================================================================================================\nclass Isa_proto extends Intervoke_phraser\n\n  #---------------------------------------------------------------------------------------------------------\n  __get_handler: ( accessor, ast ) ->\n    debug '^Isa_proto::__get_handler@1^', accessor\n    debug '^Isa_proto::__get_handler@1^', ast\n    return ( x ) ->\n      debug '^Isa_proto::__get_handler/handler@1^', accessor, ast\n      return true\n\n  #---------------------------------------------------------------------------------------------------------\n  __declare: ( accessor, handler ) ->\n    ### Associate an accessor with a handler method: ###\n    debug '^Isa_proto::__declare@1^', { accessor, handler, }\n    debug '^Isa_proto::__declare@1^', D.compile accessor, handler\n    super accessor, handler\n\n\n#===========================================================================================================\nclass Isa extends Isa_proto\n\n  #---------------------------------------------------------------------------------------------------------\n  @declare:\n    null:       ( x ) -> x is null\n    undefined:  ( x ) -> x is undefined\n    boolean:    ( x ) -> ( x is true ) or ( x is false )\n    float:      ( x ) -> Number.isFinite x\n    symbol:     ( x ) -> ( typeof x ) is 'symbol'\n\n\n#===========================================================================================================\nif module is require.main then do =>\n  #.........................................................................................................\n  isa = new Isa()\n  isa.__parser.set_vocabulary sample_vocabulary\n  debug '^do@1^', isa\n  debug '^do@2^', isa.integer\n  debug '^do@3^', isa.integer 12\n  debug '^do@4^', isa.null\n  debug '^do@4^', isa.null 5\n  debug '^do@4^', isa.null null\n\n\n"
  ]
}