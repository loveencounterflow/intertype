{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ debug\n  warn\n  urge\n  help }                  = GUY.trm.get_loggers 'INTERTYPE'\n{ rpr }                   = GUY.trm\n#...........................................................................................................\nE                         = require './errors'\nH                         = require './helpers'\nHEDGES                    = require './hedges'\nDECLARATIONS              = require './declarations'\nITYP                      = @\ntypes                     = new ( require 'intertype-legacy' ).Intertype()\n@defaults                 = {}\n{ to_width }              = require 'to-width'\ndeep_copy                 = structuredClone\nequals                    = require '../deps/jkroso-equals'\n\n#-----------------------------------------------------------------------------------------------------------\ntypes.declare 'deep_boolean', ( x ) -> x in [ 'deep', false, true, ]\n\n#-----------------------------------------------------------------------------------------------------------\ntypes.declare 'Type_cfg_constructor_cfg', tests:\n  \"@isa.object x\":                            ( x ) -> @isa.object x\n  \"@isa.nonempty_text x.name\":                ( x ) -> @isa.nonempty_text x.name\n  # \"@isa.deep_boolean x.copy\":                 ( x ) -> @isa.boolean x.copy\n  # \"@isa.boolean x.seal\":                      ( x ) -> @isa.boolean x.seal\n  \"@isa.deep_boolean x.freeze\":               ( x ) -> @isa.deep_boolean x.freeze\n  \"@isa.boolean x.extras\":                    ( x ) -> @isa.boolean x.extras\n  \"if extras is false, default must be an object\": \\\n    ( x ) -> ( x.extras ) or ( @isa.object x.default )\n  \"@isa_optional.function x.create\":          ( x ) -> @isa_optional.function x.create\n  ### TAINT might want to check for existence of `$`-prefixed keys in case of `( not x.test? )` ###\n  ### TAINT should validate values of `$`-prefixed keys are either function or non-empty strings ###\n  \"x.test is an optional function or non-empty list of functions\": ( x ) ->\n    return true unless x.test?\n    return true if @isa.function x.test\n    return false unless @isa_list_of.function x.test\n    return false if x.test.length is 0\n    return true\n  \"x.groups is deprecated\": ( x ) -> not x.groups?\n  \"@isa.boolean x.collection\": ( x ) -> @isa.boolean x.collection\n#...........................................................................................................\n@defaults.Type_cfg_constructor_cfg =\n  name:             null\n  test:             null\n  ### `default` omitted on purpose ###\n  create:           null\n  # copy:             false\n  # seal:             false\n  freeze:           false\n  extras:           true\n  collection:       false\n\n#-----------------------------------------------------------------------------------------------------------\ntypes.declare 'Intertype_iterable', ( x ) -> x? and x[ Symbol.iterator ]?\n\n#-----------------------------------------------------------------------------------------------------------\ntypes.declare 'Intertype_constructor_cfg', tests:\n  \"@isa.object x\":                            ( x ) -> @isa.object x\n  \"@isa_optional.nonempty_text x.sep\":        ( x ) -> @isa_optional.nonempty_text x.sep\n#...........................................................................................................\n@defaults.Intertype_constructor_cfg =\n  sep:              '.'\n\n# #-----------------------------------------------------------------------------------------------------------\n# types.declare 'Intertype_walk_hedgepaths_cfg', tests:\n#   \"@isa.object x\":                      ( x ) -> @isa.object x\n#   \"@isa_optional.nonempty_text x.sep\":  ( x ) -> @isa_optional.nonempty_text x.sep\n#   \"@isa_optional.function x.evaluate\":  ( x ) -> @isa_optional.function x.evaluate\n#   ### TAINT omitted other settings for `GUY.props.tree()` ###\n# #...........................................................................................................\n# @defaults.Intertype_walk_hedgepaths_cfg =\n#   sep:      @defaults.Intertype_constructor_cfg.sep\n#   evaluate: ({ owner, key, value, }) ->\n#     return 'take' if ( types.type_of value ) is 'function'\n#     return 'take' unless GUY.props.has_any_keys value\n#     return 'descend'\n\n#===========================================================================================================\nclass Intertype_abc extends GUY.props.Strict_owner\n\n\n#===========================================================================================================\nclass @Type_cfg extends Intertype_abc\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( hub, cfg ) ->\n    ### TAINT ensure type_cfg does not contain `type`, `name` ###\n    ### TAINT do not use `tests.every()` when only 1 test given ###\n    super()\n    GUY.props.hide @, 'hub', hub\n    cfg                   = { ITYP.defaults.Type_cfg_constructor_cfg..., cfg..., }\n    types.validate.Type_cfg_constructor_cfg cfg\n    cfg.test              = new Proxy ( @_compile_test hub, cfg ), hub._get_hedge_sub_proxy_cfg hub\n    #.......................................................................................................\n    ### TAINT not used by `size_of()` ###\n    cfg.size              = 'length' if cfg.isa_collection and not cfg.size?\n    cfg.size             ?= null\n    #.......................................................................................................\n    @[ k ]                = v for k, v of cfg\n    return self = GUY.lft.freeze @\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_test: ( hub, cfg ) ->\n    cfg.test = @_compile_object_as_test hub, cfg unless cfg.test?\n    if not cfg.extras\n      cfg.test                    = [ cfg.test, ] unless types.isa.list cfg.test\n      keys                        = ( k for k of cfg.default ).sort()\n      cfg.test.unshift no_extras  = ( x ) => equals ( k for k of x ).sort(), keys\n    test = null\n    if types.isa.list cfg.test\n      unless cfg.test.length is 1\n        # fn_names  = ( f.name for f in cfg.test )\n        tests     = ( f.bind hub for f in cfg.test )\n        test      = { \"#{cfg.name}\": ( ( x ) =>\n          for test in tests\n            return false if ( R = test x ) is false\n            return R unless R is true\n          return true )\n          }[ cfg.name ]\n        return test\n      test = cfg.test[ 0 ]\n    test ?= cfg.test\n    return { \"#{cfg.name}\": ( ( x ) => debug '^455-1^', { test, }; test.call hub, x ), }[ cfg.name ]\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_object_as_test: ( hub, cfg ) ->\n    type  = cfg.name\n    R     = []\n    for key, test of cfg\n      continue unless key.startsWith '$'\n      if types.isa.function test\n        R.push test\n        continue\n      field = key[ 1 .. ]\n      debug '^455-2^', { key, field, }\n      R.push @_test_from_text hub, type, field, test\n    debug '^455-3^', R\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _test_from_text: ( hub, type, field, property_chain ) ->\n    property_chain  = property_chain.split '.'\n    if field is ''\n      name = \"#{type}:#{property_chain.join hub.cfg.sep}\"\n      return { \"#{name}\": ( ( x ) -> @_isa property_chain..., x ), }[ name  ]\n    name = \"#{type}.#{field}:#{property_chain.join hub.cfg.sep}\"\n    return { \"#{name}\": ( ( x ) -> @_isa property_chain..., x[ name ] ), }[ name ]\n\n\n#===========================================================================================================\nclass @Intertype extends Intertype_abc\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    super()\n    #.......................................................................................................\n    GUY.props.hide @, 'cfg',          { ITYP.defaults.Intertype_constructor_cfg..., cfg..., }\n    GUY.props.hide @, '_hedges',      new HEDGES.Intertype_hedges()\n    GUY.props.hide @, '_collections', new Set()\n    GUY.props.hide @, '_signals',     H.signals\n    # GUY.props.hide @, 'isa',      new GUY.props.Strict_owner { reset: false, }\n    GUY.props.hide @, 'isa',          new Proxy {}, @_get_hedge_base_proxy_cfg @, '_isa'\n    GUY.props.hide @, 'validate',     new Proxy {}, @_get_hedge_base_proxy_cfg @, '_validate'\n    GUY.props.hide @, 'create',       new Proxy {}, @_get_hedge_base_proxy_cfg @, '_create'\n    #.......................................................................................................\n    ### TAINT squeezing this in here for the moment, pending reformulation of `isa` &c to make them callable: ###\n    declare_getter  = ( _, type ) => ( cfg, test = null ) =>\n      if types.isa.function cfg\n        cfg = { test: cfg, }\n      if test?\n        if cfg?.test?\n          throw new E.Intertype_ETEMPTBD '^intertype.declare@1^', \\\n            \"cannot give both positional and named argument test\"\n        cfg = { cfg..., test, }\n      @_declare.call @, type, cfg\n    GUY.props.hide @, 'declare',      new Proxy ( @_declare.bind @ ), get: declare_getter\n    #.......................................................................................................\n    GUY.props.hide @, 'registry',     new GUY.props.Strict_owner { reset: false, }\n    # GUY.props.hide @, 'types',        types\n    @state =\n      data:     null\n      method:   null\n      hedges:   []\n    #.......................................................................................................\n    @_register_hedges()\n    DECLARATIONS._provisional_declare_basic_types @\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _register_hedges: ->\n    for hedge, test of @_hedges._hedgemethods\n      do ( hedge, test ) =>\n        @declare hedge, { test, }\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  ### TAINT ideally would put this stuff elsewhere ###\n  _get_hedge_base_proxy_cfg: ( self, method_name ) ->\n    # _method_name  = method_name\n    # _method_name  = \"_#{method_name}\" unless _method_name.startsWith '_'\n    #.......................................................................................................\n    return\n      get: ( target, key ) =>\n        return undefined          if key is Symbol.toStringTag\n        return target.constructor if key is 'constructor'\n        return target.toString    if key is 'toString'\n        return target.call        if key is 'call'\n        return target.apply       if key is 'apply'\n        self.state.method = method_name\n        self.state.hedges = [ key, ]\n        if key in [ 'of', 'or', ]\n          throw new E.Intertype_ETEMPTBD '^intertype.base_proxy@2^', \\\n            \"hedgerow cannot start with `#{key}`, must be preceeded by hedge\"\n        unless ( GUY.props.get @registry, key, null )?\n          throw new E.Intertype_ETEMPTBD '^intertype.base_proxy@3^', \"unknown hedge or type #{rpr key}\"\n        return R if ( R = GUY.props.get target, key, H.signals.nothing ) isnt H.signals.nothing\n        if method_name is '_create'\n          f = { \"#{key}\": ( ( cfg = null ) -> self[ self.state.method ] key, cfg ), }[ key ]\n        else\n          f = { \"#{key}\": ( ( P... ) -> self[ self.state.method ] P... ), }[ key ]\n        GUY.props.hide target, key, R = new Proxy f, @_get_hedge_sub_proxy_cfg self\n        return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _get_hedge_sub_proxy_cfg: ( self ) ->\n    return\n      get: ( target, key ) =>\n        return undefined          if key is Symbol.toStringTag\n        return target.constructor if key is 'constructor'\n        return target.toString    if key is 'toString'\n        return target.call        if key is 'call'\n        return target.apply       if key is 'apply'\n        self.state.hedges.push key\n        return R if ( R = GUY.props.get target, key, H.signals.nothing ) isnt H.signals.nothing\n        #...................................................................................................\n        unless ( type_cfg = GUY.props.get @registry, key, null )?\n          throw new E.Intertype_ETEMPTBD '^intertype.base_proxy@4^', \"unknown hedge or type #{rpr key}\"\n        #...................................................................................................\n        ### check for preceding type being iterable when building hedgerow with `of`: ###\n        if ( key is 'of' ) and ( not @_collections.has target.name )\n          throw new E.Intertype_ETEMPTBD '^intertype.sub_proxy@5^', \\\n            \"expected type before `of` to be a collection, got #{rpr target.name}\"\n        #...................................................................................................\n        f = { \"#{key}\": ( x ) ->\n          return self[ self.state.method ] self.state.hedges..., x\n          }[ key ]\n        GUY.props.hide target, key, R = new Proxy f, @_get_hedge_sub_proxy_cfg self\n        return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _declare: ( type, type_cfg ) ->\n    ### TAINT handling of arguments here shimmed while we have not yet nailed down the exact calling\n    convention for this method. ###\n    type_cfg            = { type_cfg..., name: type, }\n    type_cfg            = new ITYP.Type_cfg @, type_cfg\n    @registry[  type ]  = type_cfg\n    @isa[       type ]  = type_cfg.test\n    @validate[  type ]  = new Proxy ( ( x ) => @_validate type, x ), @_get_hedge_sub_proxy_cfg @\n    @_collections.add type if type_cfg.collection\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _validate_hedgerow: ( hedgerow ) ->\n    if ( hedgerow[ 0 ] in [ 'of', 'or', ] ) or ( hedgerow[ hedgerow.length - 1 ] in [ 'of', 'or', ] )\n      xr = rpr hedgerow.join @cfg.sep\n      throw new E.Intertype_ETEMPTBD '^intertype.validate_hedgerow@6^', \\\n        \"hedgerow cannot begin or end with `of` or `or`, must be surrounded by hedges, got #{xr}\"\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _isa: ( hedges..., x ) ->\n    @_validate_hedgerow hedges\n    hedge_idx       = -1\n    last_hedge_idx  = hedges.length - 1\n    advance         = false\n    is_terminal     = false\n    R               = true\n    # element_mode    = false\n    #.......................................................................................................\n    loop\n      hedge_idx++\n      if hedge_idx > last_hedge_idx\n        return R\n      hedge       = hedges[ hedge_idx ]\n      is_terminal = ( hedges[ hedge_idx + 1 ] is 'or' ) or ( hedge_idx is last_hedge_idx )\n      #.....................................................................................................\n      if advance\n        return false if is_terminal\n        continue unless hedge is 'or'\n      advance = false\n      #.....................................................................................................\n      switch hedge\n        #...................................................................................................\n        when 'of'\n          # element_mode = true\n          tail_hedges = hedges[ hedge_idx + 1 .. ]\n          try\n            for element from x\n              return false if ( @_isa tail_hedges..., element ) is false\n          catch error\n            throw error unless ( error.name is 'TypeError' ) and ( error.message is 'x is not iterable' )\n            throw new E.Intertype_ETEMPTBD '^intertype.isa@7^', \\\n              \"`of` must be preceded by collection name, got #{rpr hedges[ hedge_idx - 1 ]}\"\n          return true\n        #...................................................................................................\n        when 'or'\n          R = true\n          continue\n      #.....................................................................................................\n      unless ( type_cfg = GUY.props.get @registry, hedge, null )?\n        throw new E.Intertype_ETEMPTBD '^intertype.isa@8^', \"unknown hedge or type #{rpr hedge}\"\n      #.....................................................................................................\n      result = type_cfg.test.call @, x\n      switch result\n        when H.signals.return_true\n          return @_protocol_isa { term: hedge, x, value: H.signals.nothing, verdict: true, }\n        # when H.signals.advance                then return @_protocol_isa { term: hedge, x, value: H.signals.nothing, verdict: R, }\n        # when H.signals.process_list_elements  then return @_protocol_isa { term: hedge, x, value: H.signals.nothing, verdict: R, }\n        # when H.signals.process_set_elements   then return @_protocol_isa { term: hedge, x, value: H.signals.nothing, verdict: R, }\n        when false\n          @_protocol_isa { term: hedge, x, value: H.signals.nothing, verdict: false, }\n          advance = true\n          R       = false\n          continue\n        when true\n          @_protocol_isa { term: hedge, x, value: H.signals.nothing, verdict: true, }\n          return true if is_terminal\n          continue\n      #.....................................................................................................\n      throw new E.Intertype_internal_error '^intertype.isa@9^', \\\n        \"unexpected return value from hedgemethod for hedge #{rpr hedge}: #{rpr R}\"\n    #.......................................................................................................\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _protocol_isa: ({ term, x, value, verdict, }) ->\n    urge '^4535^', GUY.trm.reverse { term, x, value, verdict, }\n    return verdict\n\n  #---------------------------------------------------------------------------------------------------------\n  _validate: ( hedges..., type, x ) ->\n    return x if @_isa hedges..., type, x\n    qtype = [ hedges..., type, ].join @cfg.sep\n    xr    = to_width ( rpr x ), 100\n    throw new E.Intertype_ETEMPTBD '^intertype.validate@10^', \"not a valid #{qtype}: #{xr}\"\n\n  #---------------------------------------------------------------------------------------------------------\n  _create: ( type, cfg ) ->\n    create = null\n    #.......................................................................................................\n    unless ( type_cfg = GUY.props.get @registry, type, null )?\n      throw new E.Intertype_ETEMPTBD '^intertype.create@11^', \"unknown type #{rpr type}\"\n    #.......................................................................................................\n    ### Try to get `create` method, or, should that fail, the `default` value. Throw error when neither\n    `create` nor `default` are given: ###\n    if ( create = GUY.props.get type_cfg, 'create', null ) is null\n      if ( R = GUY.props.get type_cfg, 'default', H.signals.nothing ) is H.signals.nothing\n        throw new E.Intertype_ETEMPTBD '^intertype.create@12^', \\\n          \"type #{rpr type} does not have a `default` value or a `create()` method\"\n    #.......................................................................................................\n    else\n      ### If `create` is given, call it to obtain default value: ###\n      R = create.call @, cfg\n    #.......................................................................................................\n    if ( not create? ) and cfg?\n      if ( t = H.js_type_of R ) is '[object Object]' or t is '[object Array]'\n        R = Object.assign ( structuredClone R ), cfg\n      else\n        R = cfg\n    else\n      R = structuredClone R\n    #.......................................................................................................\n    if      type_cfg.freeze is true   then R = Object.freeze R\n    else if type_cfg.freeze is 'deep' then R = GUY.lft.freeze GUY.lft._deep_copy R\n    #.......................................................................................................\n    return @_validate type, R\n\n  #---------------------------------------------------------------------------------------------------------\n  equals:                     H.equals\n  type_of:                    H.type_of\n  size_of:                    H.size_of\n  _normalize_type:            ( type ) -> type.toLowerCase().replace /\\s+/g, ''\n\n  #-----------------------------------------------------------------------------------------------------------\n  _walk_hedgepaths: ( cfg ) ->\n    throw new Error \"^intertype._walk_hedgepaths@9^ not implemented\"\n    # cfg = { ITYP.defaults.Intertype_walk_hedgepaths_cfg..., cfg..., }\n    # yield from GUY.props.walk_tree @isa, cfg\n    # return null\n\n\n############################################################################################################\n@defaults = GUY.lft.freeze @defaults\n\n\n\n"
  ]
}