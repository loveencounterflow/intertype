{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "AAEA;EAAA;AAAA,MAAA,CAAA,EAAA,SAAA,EAAA,iBAAA,EAAA,EAAA,EAAA,mBAAA,EAAA,2BAAA,EAAA,qBA6GgF,sCA7GhF,EAAA,kBAAA,EAAA,SAAA,EAAA,IAAA,EAAA,SAAA,EAAA,KAAA,EAAA,SAAA,EAAA,oBAAA,EAAA,aAAA,EAAA,IAAA,EAAA,MAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA,EAAA,aAAA;;;EAIA,EAAA,GAA4B,OAAA,CAAQ,QAAR;;EAC5B,CAAA,CAAE,GAAF,CAAA,GAA4B,EAAE,CAAC,GAA/B;;EACA,CAAA,CAAE,IAAF,EACE,MADF,CAAA,GAC4B,EAAE,CAAC,KAD/B;;EAEA,CAAA,CAAE,KAAF,CAAA,GAA4B,OAA5B;;EACA,CAAA,GAA4B,OAAA,CAAQ,UAAR;;EAC5B,GAAA,GAA4B,QAAA,CAAE,CAAF,EAAK,CAAL,EAAQ,CAAR,CAAA;WAAe,MAAM,CAAC,cAAP,CAAsB,CAAtB,EAAyB,CAAzB,EAA4B;MAAE,KAAA,EAAO,CAAT;MAAY,UAAA,EAAY;IAAxB,CAA5B;EAAf,EAV5B;;;EAcA,SAAA,GACE;IAAA,QAAA,EAAwB,QAAA,CAAE,CAAF,CAAA;aAAS;IAAT,CAAxB;IACA,OAAA,EAAwB,QAAA,CAAE,CAAF,CAAA;aAAa;IAAb,CADxB;IAEA,SAAA,EAAwB,QAAA,CAAE,CAAF,CAAA;aAAS;IAAT,CAFxB;IAGA,IAAA,EAAwB,QAAA,CAAE,CAAF,CAAA;aAAS,CAAA,KAAK;IAAd,CAHxB;IAIA,SAAA,EAAwB,QAAA,CAAE,CAAF,CAAA;aAAS,CAAA,KAAK;IAAd,CAJxB;IAKA,OAAA,EAAwB,QAAA,CAAE,CAAF,CAAA;aAAS,CAAE,IAAC,CAAA,OAAD,CAAS,CAAT,CAAF,CAAA,KAAkB;IAA3B;EALxB;;EAOF,mBAAA,GAA+B,IAAI,GAAJ,CAAQ,MAAM,CAAC,IAAP,CAAY,SAAZ,CAAR;;EAC/B,2BAAA,GAA+B,MAAA,CAAA,CAAA,IAAA,CAAA,CAAW,CAAE,GAAA,mBAAF,CAA2B,CAAC,IAA5B,CAAiC,GAAjC,CAAX,CAAA,IAAA,CAAA,EAvB/B;;;EA0BA,IAAA,GACE;IAAA,QAAA,EAAwB,QAAA,CAAE,CAAF,CAAA;aAAS,mBAAmB,CAAC,GAApB,CAAwB,CAAxB;IAAT,CAAxB;IACA,OAAA,EAAwB,QAAA,CAAE,CAAF,CAAA;aAAS,CAAE,CAAA,KAAK,IAAP,CAAA,IAAiB,CAAE,CAAA,KAAK,KAAP;IAA1B,CADxB;IAEA,aAAA,EAAwB,QAAA,CAAE,CAAF,CAAA;aAAS,CAAE,MAAM,CAAA,SAAE,CAAA,QAAQ,CAAC,IAAjB,CAAsB,CAAtB,CAAF,CAAA,KAA+B;IAAxC,CAFxB;IAGA,iBAAA,EAAwB,CAAE,CAAF,CAAA,GAAA;aAAS,CAAE,MAAM,CAAA,SAAE,CAAA,QAAQ,CAAC,IAAjB,CAAsB,CAAtB,CAAF,CAAA,KAA+B;IAAxC,CAHxB;IAIA,SAAA,EAAwB,CAAE,CAAF,CAAA,GAAA;aAAS,CAAE,MAAM,CAAA,SAAE,CAAA,QAAQ,CAAC,IAAjB,CAAsB,CAAtB,CAAF,CAAA,KAA+B;IAAxC,CAJxB;IAKA,sBAAA,EAAwB,CAAE,CAAF,CAAA,GAAA;aAAS,CAAE,MAAM,CAAA,SAAE,CAAA,QAAQ,CAAC,IAAjB,CAAsB,CAAtB,CAAF,CAAA,KAA+B;IAAxC,CALxB;IAMA,cAAA,EAAwB,CAAE,CAAF,CAAA,GAAA;aAAS,CAAE,MAAM,CAAA,SAAE,CAAA,QAAQ,CAAC,IAAjB,CAAsB,CAAtB,CAAF,CAAA,KAA+B;IAAxC,CANxB;IAOA,QAAA,EAAwB,QAAA,CAAE,CAAF,CAAA;aAAS,CAAE,MAAM,CAAA,SAAE,CAAA,QAAQ,CAAC,IAAjB,CAAsB,CAAtB,CAAF,CAAA,KAA+B;IAAxC,CAPxB;IAQA,MAAA,EAAwB,QAAA,CAAE,CAAF,CAAA;aAAS,CAAE,OAAO,CAAT,CAAA,KAAgB;IAAzB,CARxB;IASA,MAAA,EAAwB,QAAA,CAAE,CAAF,CAAA;aAAS,WAAA,IAAO,CAAE,OAAO,CAAP,KAAY,QAAd,CAAP,IAAoC,CAAE,CAAE,MAAM,CAAA,SAAE,CAAA,QAAQ,CAAC,IAAjB,CAAsB,CAAtB,CAAF,CAAA,KAA+B,iBAAjC;IAA7C,CATxB;IAUA,KAAA,EAAwB,QAAA,CAAE,CAAF,CAAA;aAAS,MAAM,CAAC,QAAP,CAAgB,CAAhB;IAAT,CAVxB;IAWA,QAAA,EAAwB,QAAA,CAAE,CAAF,CAAA;aAAS,CAAE,CAAA,KAAK,CAAC,KAAR,CAAA,IAAsB,CAAE,CAAA,KAAK,CAAC,KAAR;IAA/B,CAXxB;IAYA,IAAA,EAAwB,QAAA,CAAE,CAAF,CAAA;aAAS,CAAE,OAAO,CAAT,CAAA,KAAgB;IAAzB,CAZxB;IAaA,IAAA,EAAwB,QAAA,CAAE,CAAF,CAAA;aAAS,KAAK,CAAC,OAAN,CAAc,CAAd;IAAT,CAbxB;IAcA,KAAA,EAAwB,QAAA,CAAE,CAAF,CAAA;aAAS,CAAA,YAAa;IAAtB;EAdxB,EA3BF;;;;;;;;;;;;;;;;;;;;;;;EA+DA,oBAAA,GACE;IAAA,QAAA,EACE;MAAA,IAAA,EAAc,IAAI,CAAC;IAAnB,CADF;IAEA,OAAA,EACE;MAAA,IAAA,EAAc,IAAI,CAAC,OAAnB;MACA,QAAA,EAAc;IADd,CAHF;IAKA,aAAA,EACE;MAAA,IAAA,EAAc,IAAI,CAAC,aAAnB;MACA,QAAA,EAAc,MAAA,QAAA,CAAA,CAAA;eAAG,CAAA,MAAM,MAAN;MAAH;IADd,CANF;IAQA,iBAAA,EACE;MAAA,IAAA,EAAc,IAAI,CAAC;IAAnB,CATF;IAUA,sBAAA,EACE;MAAA,IAAA,EAAc,IAAI,CAAC;IAAnB,CAXF;IAYA,cAAA,EACE;MAAA,IAAA,EAAc,IAAI,CAAC;IAAnB,CAbF;IAcA,SAAA,EACE;MAAA,IAAA,EAAc,IAAI,CAAC;IAAnB,CAfF;IAgBA,QAAA,EACE;MAAA,IAAA,EAAc,IAAI,CAAC,QAAnB;MACA,QAAA,EAAc,QAAA,CAAA,CAAA;eAAG,QAAA,CAAA,CAAA,EAAA;MAAH;IADd,CAjBF;IAmBA,MAAA,EACE;MAAA,IAAA,EAAc,IAAI,CAAC,MAAnB;MACA,QAAA,EAAc,QAAA,CAAA,CAAA;eAAG,MAAA,CAAO,EAAP;MAAH;IADd,CApBF;IAsBA,MAAA,EACE;MAAA,IAAA,EAAc,IAAI,CAAC,MAAnB;MACA,QAAA,EAAc,QAAA,CAAA,CAAA;eAAG,CAAA;MAAH;IADd,CAvBF;IAyBA,KAAA,EACE;MAAA,IAAA,EAAc,IAAI,CAAC,KAAnB;MACA,QAAA,EAAc;IADd,CA1BF;IA4BA,QAAA,EACE;MAAA,IAAA,EAAc,IAAI,CAAC,QAAnB;MACA,QAAA,EAAc;IADd,CA7BF;IA+BA,IAAA,EACE;MAAA,IAAA,EAAc,IAAI,CAAC,IAAnB;MACA,QAAA,EAAc;IADd,CAhCF;IAkCA,IAAA,EACE;MAAA,IAAA,EAAc,IAAI,CAAC,IAAnB;MACA,QAAA,EAAc,QAAA,CAAA,CAAA;eAAG;MAAH;IADd,CAnCF;IAqCA,KAAA,EACE;MAAA,IAAA,EAAc,IAAI,CAAC,KAAnB;MACA,QAAA,EAAc,QAAA,CAAA,CAAA;eAAG,IAAI,MAAJ,CAAA;MAAH;IADd;EAtCF,EAhEF;;;EA4GA,aAAA,GAAwB,IAAI,GAAJ,CAAQ,MAAM,CAAC,IAAP,CAAY,oBAAZ,CAAR;;EACxB,kBAAA,GAAwB,CAAE,IAAI,GAAJ,CAAQ,MAAM,CAAC,IAAP,CAAY,SAAZ,CAAR,CAAF,CAAiC,CAAC,KAAlC,CAAwC,aAAxC;;EACxB,qBAAA,GAAwB,QAAA,CAAE,CAAF,CAAA;WAAS,kBAAkB,CAAC,GAAnB,CAAuB,CAAvB;EAAT,EA9GxB;;;EAiHM,YAAN,MAAA,UAAA,CAAA;;;IAIE,WAAa,CAAA,GAAE,YAAF,CAAA;MACX,MAAiD,IAAA,YAAa,kBAA9D;QAAA,YAAY,CAAC,OAAb,CAAqB,oBAArB,EAAA;OAAJ;;MAEI,IAAA,CAAK,IAAL,EAAQ,KAAR,EAA8B,IAAC,CAAA,iBAAD,CAAmB,KAAnB,CAA9B;MACA,IAAA,CAAK,IAAL,EAAQ,UAAR,EAA8B,IAAC,CAAA,iBAAD,CAAmB,UAAnB,CAA9B;MACA,IAAA,CAAK,IAAL,EAAQ,UAAR,EAA8B,IAAC,CAAA,iBAAD,CAAmB,UAAnB,CAA9B;MACA,IAAA,CAAK,IAAL,EAAQ,QAAR,EAA8B,IAAC,CAAA,iBAAD,CAAmB,QAAnB,CAA9B;MACA,IAAA,CAAK,IAAL,EAAQ,cAAR,EAA8B,IAAC,CAAA,iBAAD,CAAmB,cAAnB,CAA9B;MACA,IAAA,CAAK,IAAL,EAAQ,oBAAR,EAA8B,CAAA,CAA9B,EAPJ;;MASI,IAAA,CAAK,IAAL,EAAQ,SAAR,EAA8B,CAAA,GAAE,CAAF,CAAA,GAAA;eAAY,IAAC,CAAA,QAAD,CAAU,GAAA,CAAV;MAAZ,CAA9B;MACA,IAAA,CAAK,IAAL,EAAQ,SAAR,EAA8B,CAAA,GAAE,CAAF,CAAA,GAAA;eAAY,IAAC,CAAA,QAAD,CAAU,GAAA,CAAV;MAAZ,CAA9B,EAVJ;;MAYI,IAAC,CAAA,QAAD,CAAU,SAAV,EAAqB,GAAA,YAArB;AACA,aAAO;IAdI,CAFf;;;IAmBE,QAAU,CAAA,GAAE,YAAF,CAAA;AACZ,UAAA,UAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA;MAAI,KAAA,8CAAA;;QACE,KAAO,IAAI,CAAC,MAAL,CAAY,UAAZ,CAAP;UACE,MAAM,IAAI,CAAC,CAAC,0BAAN,CAAiC,aAAjC,EAAgD,QAAhD,EAA0D,SAAA,CAAU,IAAV,EAAgB,UAAhB,CAA1D,EADR;;QAEA,KAAA,kBAAA;;UAAqC,CAAA,CAAE,IAAF,EAAQ,IAAR,CAAA,GAAA;AAC3C,gBAAA,WAAA,EAAA,UAAA,EAAA,YAAA,EAAA,MAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA,EAAA,QAAA,EAAA,WAAA,EAAA,OAAA;;YACQ,IAAG,OAAO,CAAC,GAAR,CAAY,IAAC,CAAA,YAAb,EAA2B,IAA3B,CAAH;cACE,IAAG,IAAI,CAAC,QAAL,CAAc,IAAd,CAAH;gBACE,MAAM,IAAI,CAAC,CAAC,0CAAN,CAAiD,aAAjD,EAAgE,IAAhE,EADR;;cAEA,MAAM,IAAI,CAAC,CAAC,6CAAN,CAAoD,aAApD,EAAmE,IAAnE,EAHR;aADR;;YAMQ,CAAA,CAAE,WAAF,EACE,OADF,EAEE,QAFF,CAAA,GAEkB,IAAC,CAAA,oBAAD,CAA8B,IAA9B,CAFlB;YAGA,WAAA,GAAkB,IAAC,CAAA,2BAAD,CAA8B,IAA9B,EAAoC,IAApC,EAT1B;;YAWQ,IAAC,CAAA,YAAY,CAAS,IAAT,CAAb,GAA+B;YAC/B,IAAC,CAAA,GAAG,CAAkB,IAAlB,CAAJ,GAA+B,IAAC,CAAA,QAAD,CAAyB,WAAzB;YAC/B,IAAC,CAAA,GAAG,CAAC,QAAQ,CAAS,IAAT,CAAb,GAA+B,IAAC,CAAA,iBAAD,CAAyB,WAAzB;YAC/B,IAAC,CAAA,QAAQ,CAAa,IAAb,CAAT,GAA+B,IAAC,CAAA,aAAD,CAAyB,WAAzB;YAC/B,IAAC,CAAA,QAAQ,CAAC,QAAQ,CAAI,IAAJ,CAAlB,GAA+B,IAAC,CAAA,sBAAD,CAAyB,WAAzB;YAC/B,IAAC,CAAA,QAAQ,CAAa,IAAb,CAAT,GAA+B,IAAC,CAAA,aAAD,CAAyB,WAAzB;YAC/B,IAAC,CAAA,QAAQ,CAAC,QAAQ,CAAI,IAAJ,CAAlB,GAA+B,IAAC,CAAA,sBAAD,CAAyB,WAAzB;YAC/B,IAAC,CAAA,MAAM,CAAe,IAAf,CAAP,GAA+B,IAAC,CAAA,WAAD,CAAyB,WAAzB;YAC/B,IAAmD,UAAA,KAAgB,SAAU,6DAA7E;cAAA,IAAC,CAAA,kBAAkB,CAAG,IAAH,CAAnB,GAA+B,WAAW,CAAC,KAA3C;aAnBR;;YAqBQ,IAAG,eAAH;cACE,GAAA,CAAI,OAAO,CAAE,KAAF,CAAX,EAAqC,QAArC,EAA+C,IAAC,CAAA,GAAG,CAAiB,IAAjB,CAAnD;cACA,GAAA,CAAI,OAAO,CAAE,cAAF,CAAX,EAAqC,QAArC,EAA+C,IAAC,CAAA,GAAG,CAAC,QAAQ,CAAQ,IAAR,CAA5D;cACA,GAAA,CAAI,OAAO,CAAE,UAAF,CAAX,EAAqC,QAArC,EAA+C,IAAC,CAAA,QAAQ,CAAY,IAAZ,CAAxD;cACA,GAAA,CAAI,OAAO,CAAE,mBAAF,CAAX,EAAqC,QAArC,EAA+C,IAAC,CAAA,QAAQ,CAAC,QAAQ,CAAG,IAAH,CAAjE;cACA,GAAA,CAAI,OAAO,CAAE,UAAF,CAAX,EAAqC,QAArC,EAA+C,IAAC,CAAA,QAAQ,CAAY,IAAZ,CAAxD;cACA,GAAA,CAAI,OAAO,CAAE,mBAAF,CAAX,EAAqC,QAArC,EAA+C,IAAC,CAAA,QAAQ,CAAC,QAAQ,CAAG,IAAH,CAAjE;cACA,IAAC,CAAA,YAAY,CAAE,WAAF,CAAe,CAAC,SAAS,CAAE,QAAF,CAAtC,GAAqD,IAAC,CAAA,GAAG,CAAE,IAAF,EAP3D;aArBR;;;YA+BQ,IAAG,0BAAH;AACE;cAAA,KAAA,kBAAA;;gBACE,YAAA,GAAe,CAAA,CAAA,CAAG,IAAH,CAAA,CAAA,CAAA,CAAW,UAAX,CAAA;gBACf,IAAC,CAAA,OAAD,CAAS;kBAAE,CAAC,CAAA,CAAA,CAAG,YAAH,CAAA,CAAD,CAAA,EAAqB;gBAAvB,CAAT;cAFF,CADF;;AAKA;;AAAA;YAAA,KAAA,cAAA;2BACE,IAAC,CAAA,YAAY,CAAE,MAAF,CAAU,CAAC,UAAU,CAAC,IAAnC,CAAwC,IAAxC;YADF,CAAA;;UArCmC,CAAA,EAAE,MAAM;QAA7C;MAHF,CAAJ;;AA2CI,aAAO;IA5CC,CAnBZ;;;IAkEE,oBAAsB,CAAE,IAAF,CAAA,EAAA;;AACxB,UAAA,QAAA,EAAA,CAAA,EAAA,GAAA,EAAA,YAAA,EAAA,IAAA,EAAA,QAAA,EAAA,SAAA,EAAA,WAAA,EAAA;MACI,WAAA,GAAc;MACd,OAAA,GAAc;MACd,QAAA,GAAc,KAHlB;;MAKI,SAAA,GAAY,IAAI,CAAC,KAAL,CAAW,GAAX;MACZ,IAAG,CAAE,QAAA,GAAW,SAAS,CAAE,CAAF,CAAtB,CAAA,KAAiC,UAApC;QACE,MAAM,IAAI,CAAC,CAAC,iCAAN,CAAwC,0BAAxC,EAAoE,IAApE,EADR;;MAEA,IAAG,CAAE,IAAI,CAAC,QAAL,CAAc,QAAd,CAAF,CAAA,IAA+B,OAAO,CAAC,GAAR,CAAY,IAAC,CAAA,YAAb,EAA2B,QAA3B,CAAlC;QACE,MAAM,IAAI,CAAC,CAAC,iCAAN,CAAwC,0BAAxC,EAAoE,IAApE,EAA0E,QAA1E,EADR;OARJ;;MAWI,IAAG,SAAS,CAAC,MAAV,GAAmB,CAAtB;;QAEE,KAAY,wGAAZ;UACE,YAAA,GAAe,SAAS,0BAAU,CAAC,IAApB,CAAyB,GAAzB,EAAvB;;UAEQ,KAAO,OAAO,CAAC,GAAR,CAAY,IAAC,CAAA,YAAb,EAA2B,YAA3B,CAAP;YACE,MAAM,IAAI,CAAC,CAAC,8BAAN,CAAqC,0BAArC,EAAiE,IAAjE,EAAuE,YAAvE,EADR;;QAHF,CADN;;QAOM,WAAA,GAAc;QACd,QAAA,GAAc,SAAS,CAAC,EAAV,CAAa,CAAC,CAAd;QACd,OAAA,GACE;UAAA,KAAA,EAAsB,IAAC,CAAA,GAAG,CAAgB,WAAhB,CAA1B;UACA,cAAA,EAAsB,IAAC,CAAA,GAAG,CAAC,QAAQ,CAAO,WAAP,CADnC;UAEA,UAAA,EAAsB,IAAC,CAAA,QAAQ,CAAW,WAAX,CAF/B;UAGA,mBAAA,EAAsB,IAAC,CAAA,QAAQ,CAAC,QAAQ,CAAE,WAAF,CAHxC;UAIA,UAAA,EAAsB,IAAC,CAAA,QAAQ,CAAW,WAAX,CAJ/B;UAKA,mBAAA,EAAsB,IAAC,CAAA,QAAQ,CAAC,QAAQ,CAAE,WAAF;QALxC,EAXJ;OAXJ;;AA6BI,aAAO,CAAE,IAAF,EAAQ,WAAR,EAAqB,OAArB,EAA8B,QAA9B;IA9Ba,CAlExB;;;IAmGE,2BAA6B,CAAE,IAAF,EAAQ,WAAR,CAAA,EAAA;;AAC/B,UAAA,CAAA,EAAA;MACI,QAAA,GAAW;QAAE,IAAF;QAAQ,IAAA,EAAM,MAAd;QAAyB,SAAA,EAAW,CAAA,CAApC;QAAwC,UAAA,EAAY;MAApD;MACX,CAAA,GAAI,CAAE,GAAA,QAAF;MACJ,IAAG,IAAI,CAAC,MAAL,CAAY,WAAZ,CAAH;QAAgC,MAAM,CAAC,MAAP,CAAc,CAAd,EAAiB,WAAjB,EAAhC;OAAA,MAAA;QACgC,CAAC,CAAC,IAAF,GAAS,YADzC;;MAEA,IAA2B,gBAAJ,IAAgB,IAAC,CAAA,iCAAD,CAAmC,WAAnC,CAAvC;QAAA,CAAC,CAAC,IAAF,GAAS,SAAT;OALJ;;AAOI,cAAO,IAAP;;AAAA,aAEO,IAAI,CAAC,IAAL,CAAU,CAAC,CAAC,IAAZ,CAFP;UAEgC,CAAA,CAAE,QAAF,CAAA,GAAA;AACpC,gBAAA,QAAA,EAAA;YAAQ,IAAG,cAAc,CAAC,IAAf,CAAoB,QAApB,CAAH;cACE,MAAM,IAAI,CAAC,CAAC,iCAAN,CAAwC,iCAAxC,EAA2E,IAA3E,EADR;;YAEA,IAAG,gEAAH;cACE,MAAM,IAAI,CAAC,CAAC,iCAAN,CAAwC,iCAAxC,EAA2E,IAA3E,EAAiF,QAAjF,EADR;;YAEA,eAAA,GAAkB,IAAC,CAAA,YAAY,CAAE,QAAF;YAC/B,IAAO,uBAAP;cACE,MAAM,IAAI,CAAC,CAAC,sBAAN,CAA6B,iCAA7B,EAAgE,QAAhE,EADR;;YAEG,CAAA,CAAE,IAAF,CAAA,GAAA;qBAAmC,CAAC,CAAC,IAAF,GAAS,MAAA,CAAO,IAAP,EAAa,QAAA,CAAE,CAAF,CAAA;uBAAS,IAAI,CAAC,IAAL,CAAU,IAAV,EAAa,CAAb;cAAT,CAAb;YAA5C,CAAA,EAAS,eAAe,CAAC,MAPpC;;mBASQ,MAAM,CAAC,MAAP,CAAc,CAAC,CAAC,SAAhB,EAA2B,eAAe,CAAC,SAA3C;UAV4B,CAAA,EAAa,CAAC,CAAC;AAAxC;;AAFP,aAcO,IAAI,CAAC,QAAL,CAAc,CAAC,CAAC,IAAhB,CAdP;UAcoC,CAAA,CAAE,IAAF,CAAA,GAAA;YAChC,IAAC,CAAA,qBAAD,CAAuB,IAAvB,EAA6B,IAA7B;mBACA,CAAC,CAAC,IAAF,GAAS,MAAA,CAAO,IAAP,EAAa,QAAA,CAAE,CAAF,CAAA;qBAAS,IAAI,CAAC,IAAL,CAAU,IAAV,EAAa,CAAb;YAAT,CAAb;UAFuB,CAAA,EAAS,CAAC,CAAC;AAAxC;AAdP;;UAmBI,MAAM,IAAI,CAAC,CAAC,oCAAN,CAA2C,iCAA3C,EAA8E,SAAA,CAAU,IAAV,EAAgB,CAAC,CAAC,IAAlB,CAA9E;AAnBV,OAPJ;;;MA6BI,IAAC,CAAA,qBAAD,CAAuB,IAAvB,EAA6B,CAAC,CAAC,IAA/B;AACA,aAAO;IA/BoB,CAnG/B;;;IAqIE,qBAAuB,CAAE,IAAF,EAAQ,CAAR,CAAA;MACrB,KAAO,IAAI,CAAC,QAAL,CAAc,CAAd,CAAP;QACE,MAAM,IAAI,CAAC,CAAC,+BAAN,CAAsC,2BAAtC,EAAmE,IAAnE,EAAyE,SAAA,CAAU,IAAV,EAAgB,CAAhB,CAAzE,EADR;;MAEA,IAAO,CAAC,CAAC,MAAF,KAAY,CAAnB;QACE,MAAM,IAAI,CAAC,CAAC,mCAAN,CAA0C,2BAA1C,EAAuE,CAAvE,EAA0E,CAAC,CAAC,MAA5E,EADR;;AAEA,aAAO;IALc,CArIzB;;;IA6IE,4BAA8B,CAAE,IAAF,CAAA;AAChC,UAAA;MAAI,KAAO,IAAI,CAAC,IAAL,CAAU,IAAV,CAAP;QACE,MAAM,IAAI,CAAC,CAAC,wBAAN,CAA+B,kCAA/B,EACJ,CAAA,qBAAA,CAAA,CAAwB,SAAA,CAAU,IAAV,EAAgB,IAAhB,CAAxB,CAAA,CADI,EADR;;MAGA,IAAmB,yDAAnB;AAAA,eAAO,KAAP;;AACA,aAAO,KAAK,CAAE,CAAF;IALgB,CA7IhC;;;IAqJE,iBAAmB,CAAE,IAAF,CAAA;AACrB,UAAA,OAAA,EAAA,QAAA,EAAA,kBAAA;;;;MAGI,kBAAA,GAAqB,QAAA,CAAA,CAAA;AAAG,gBAAO,IAAP;AAAA,eACjB,KADiB;mBACG,QAAA,CAAE,CAAF,CAAA;cAAS,MAAM,IAAI,CAAC,CAAC,8BAAN,CAA2C,uBAA3C;YAAf;AADH,eAEjB,UAFiB;mBAEG,QAAA,CAAE,CAAF,CAAA;cAAS,MAAM,IAAI,CAAC,CAAC,mCAAN,CAA2C,uBAA3C;YAAf;AAFH,eAGjB,UAHiB;mBAGG,QAAA,CAAE,CAAF,CAAA;cAAS,MAAM,IAAI,CAAC,CAAC,mCAAN,CAA2C,uBAA3C;YAAf;AAHH,eAIjB,QAJiB;mBAIG,QAAA,CAAE,CAAF,CAAA;cAAS,MAAM,IAAI,CAAC,CAAC,iCAAN,CAA2C,uBAA3C;YAAf;AAJH,eAKjB,cALiB;mBAKG,CAAA;AALH;YAMjB,MAAM,IAAI,CAAC,CAAC,wBAAN,CAA+B,uBAA/B,EAAwD,CAAA,aAAA,CAAA,CAAgB,GAAA,CAAI,IAAJ,CAAhB,CAAA,CAAxD;AANW;MAAH,EAHzB;;MAWI,OAAA,GAAU,CAAE,GAAF,CAAA,GAAA;eACR;UAAA,GAAA,EAAK,CAAE,MAAF,EAAU,GAAV,CAAA,GAAA;AACX,gBAAA;YAAQ,IAA6B,GAAA,KAAO,MAAM,CAAC,WAA3C;AAAA,qBAAO,OAAP;;YACA,IAA6B,GAAA,KAAO,aAApC;AAAA,qBAAO,MAAM,CAAC,YAAd;;YACA,IAA6B,GAAA,KAAO,UAApC;AAAA,qBAAO,MAAM,CAAC,SAAd;;YAGA,IAAY,sCAAZ;;;AAAA,qBAAO,EAAP;;YACA,MAAM,IAAI,CAAC,CAAC,sBAAN,CAA6B,GAA7B,EAAkC,GAAlC;UAPH;QAAL;MADQ,EAXd;;MAqBI,QAAA,GAAY,IAAI,KAAJ,CAAU,kBAAA,CAAA,CAAV,EAAgC,OAAA,CAAQ,CAAA,WAAA,CAAA,CAAc,IAAd,CAAA,YAAA,CAAR,CAAhC;AACZ,aAAY,IAAI,KAAJ,CAAU,CAAE,QAAF,CAAV,EAAgC,OAAA,CAAQ,CAAA,WAAA,CAAA,CAAc,IAAd,CAAA,GAAA,CAAR,CAAhC;IAvBK,CArJrB;;;IA+KE,QAAU,CAAE,WAAF,CAAA;AACZ,UAAA,EAAA,EAAA,WAAA,EAAA,SAAA,EAAA,IAAA,EAAA;MAAI,CAAA,CAAE,IAAF,EACE,IADF,EAEE,SAFF,CAAA,GAEgB,WAFhB;MAGA,EAAA,GAAgB;MAChB,WAAA,GAAgB,CAAA,IAAA,CAAA,CAAO,IAAP,CAAA,EAJpB;;AAMI,aAAO,MAAA,CAAO,WAAP,EAAoB,QAAA,CAAE,CAAF,CAAA;AAC/B,YAAA,UAAA,EAAA;QAAM,EAAE,CAAC,0BAAH,CAA8B,WAA9B,EAA2C,CAA3C,EAA8C,SAAS,CAAC,MAAxD;QACA,KAAoB,IAAI,CAAC,IAAL,CAAU,EAAV,EAAc,CAAd,CAApB;AAAA,iBAAO,MAAP;;QACA,KAAA,uBAAA;;UACE,KAAoB,QAAQ,CAAC,IAAT,CAAc,EAAd,EAAkB,CAAC,CAAE,UAAF,CAAnB,CAApB;AAAA,mBAAO,MAAP;;QADF;AAEA,eAAO;MALkB,CAApB;IAPC,CA/KZ;;;IA8LE,iBAAmB,CAAE,WAAF,CAAA;AACrB,UAAA,EAAA,EAAA,WAAA,EAAA,IAAA,EAAA;MAAI,CAAA,CAAE,IAAF,CAAA,GAAgB,WAAhB;MACA,EAAA,GAAgB;MAChB,IAAA,GAAgB,IAAC,CAAA,GAAG,CAAE,IAAF;MACpB,WAAA,GAAgB,CAAA,aAAA,CAAA,CAAgB,IAAhB,CAAA,EAHpB;;AAKI,aAAO,MAAA,CAAO,WAAP,EAAoB,QAAA,CAAE,CAAF,CAAA;QACzB,EAAE,CAAC,0BAAH,CAA8B,WAA9B,EAA2C,CAA3C,EAA8C,SAAS,CAAC,MAAxD;QACA,IAAmB,SAAnB;AAAA,iBAAO,KAAP;;AACA,eAAO,IAAA,CAAK,CAAL;MAHkB,CAApB;IANU,CA9LrB;;;IA0ME,aAAe,CAAE,WAAF,CAAA;AACjB,UAAA,EAAA,EAAA,WAAA,EAAA,UAAA,EAAA,SAAA,EAAA,IAAA,EAAA;MAAI,CAAA,CAAE,IAAF,EACE,IADF,EAEE,SAFF,EAGE,UAHF,CAAA,GAGiB,WAHjB;MAIA,EAAA,GAAgB;MAChB,WAAA,GAAgB,CAAA,SAAA,CAAA,CAAY,IAAZ,CAAA,EALpB;;AAOI,aAAO,MAAA,CAAO,WAAP,EAAoB,QAAA,CAAE,CAAF,CAAA;AAC/B,YAAA,CAAA,EAAA,UAAA,EAAA,OAAA,EAAA,CAAA,EAAA,GAAA,EAAA;QAAM,EAAE,CAAC,0BAAH,CAA8B,WAA9B,EAA2C,CAA3C,EAA8C,SAAS,CAAC,MAAxD;QACA,CAAA,GAAY,CAAA;QACZ,CAAC,CAAE,IAAF,CAAD,GAAY,EAAE,CAAC,GAAG,CAAE,IAAF,CAAN,CAAe,CAAf;QACZ,IAAG,SAAH;UACE,KAAA,uBAAA;;YACE,MAAM,CAAC,MAAP,CAAc,CAAd,EAAiB,EAAE,CAAC,QAAQ,CAAE,IAAF,CAAQ,CAAE,UAAF,CAAnB,aAAkC,CAAC,CAAG,UAAH,UAAnC,CAAjB;UADF,CADF;SAAA,MAAA;UAIE,KAAA,4CAAA;;YACE,CAAC,CAAE,OAAF,CAAD,GAAe;UADjB,CAJF;;AAMA,eAAO;MAVkB,CAApB;IARM,CA1MjB;;;IA+NE,sBAAwB,CAAE,WAAF,CAAA;AAC1B,UAAA,EAAA,EAAA,WAAA,EAAA,SAAA,EAAA,IAAA,EAAA;MAAI,CAAA,CAAE,IAAF,EACE,IADF,EAEE,SAFF,CAAA,GAEgB,WAFhB;MAGA,EAAA,GAAgB;MAChB,WAAA,GAAgB,CAAA,kBAAA,CAAA,CAAqB,IAArB,CAAA,EAJpB;;AAMI,aAAO,MAAA,CAAO,WAAP,EAAoB,QAAA,CAAE,CAAF,CAAA;QACzB,EAAE,CAAC,0BAAH,CAA8B,WAA9B,EAA2C,CAA3C,EAA8C,SAAS,CAAC,MAAxD;QACA,MAAM,IAAI,CAAC,CAAC,mCAAN,CAA0C,CAAA,CAAA,CAAA,CAAI,WAAJ,CAAA,GAAA,CAA1C;AACN,eAAO;MAHkB,CAApB;IAPe,CA/N1B;;;IA4OE,aAAe,CAAE,WAAF,CAAA;AACjB,UAAA,EAAA,EAAA,WAAA,EAAA,IAAA,EAAA;MAAI,CAAA,CAAE,IAAF,CAAA,GAAgB,WAAhB;MACA,EAAA,GAAgB;MAChB,IAAA,GAAgB,IAAC,CAAA,GAAG,CAAE,IAAF;MACpB,WAAA,GAAgB,CAAA,SAAA,CAAA,CAAY,IAAZ,CAAA,EAHpB;;AAKI,aAAO,MAAA,CAAO,WAAP,EAAoB,QAAA,CAAE,CAAF,CAAA;QACzB,EAAE,CAAC,0BAAH,CAA8B,WAA9B,EAA2C,CAA3C,EAA8C,SAAS,CAAC,MAAxD;QACA,IAAY,IAAA,CAAK,CAAL,CAAZ;AAAA,iBAAO,EAAP;;QACA,MAAM,IAAI,CAAC,CAAC,0BAAN,CAAiC,CAAA,CAAA,CAAA,CAAI,WAAJ,CAAA,GAAA,CAAjC,EAAuD,IAAvD,EAA6D,SAAA,CAAU,IAAV,EAAgB,CAAhB,CAA7D;MAHmB,CAApB;IANM,CA5OjB;;;IAwPE,sBAAwB,CAAE,WAAF,CAAA;AAC1B,UAAA,EAAA,EAAA,WAAA,EAAA,IAAA,EAAA;MAAI,CAAA,CAAE,IAAF,CAAA,GAAgB,WAAhB;MACA,EAAA,GAAgB;MAChB,IAAA,GAAgB,IAAC,CAAA,GAAG,CAAC,QAAQ,CAAE,IAAF;MAC7B,WAAA,GAAgB,CAAA,kBAAA,CAAA,CAAqB,IAArB,CAAA,EAHpB;;AAKI,aAAO,MAAA,CAAO,WAAP,EAAoB,QAAA,CAAE,CAAF,CAAA;QACzB,EAAE,CAAC,0BAAH,CAA8B,WAA9B,EAA2C,CAA3C,EAA8C,SAAS,CAAC,MAAxD;QACA,IAAY,IAAA,CAAK,CAAL,CAAZ;AAAA,iBAAO,EAAP;;QACA,MAAM,IAAI,CAAC,CAAC,mCAAN,CAA0C,CAAA,CAAA,CAAA,CAAI,WAAJ,CAAA,GAAA,CAA1C,EAAgE,IAAhE,EAAsE,SAAA,CAAU,IAAV,EAAgB,CAAhB,CAAtE;MAHmB,CAApB;IANe,CAxP1B;;;IAoQE,0BAA4B,CAAE,WAAF,EAAe,UAAf,EAA2B,QAA3B,CAAA;MAC1B,IAAmB,UAAA,KAAc,QAAjC;AAAA,eAAO,SAAP;;MACA,MAAM,IAAI,CAAC,CAAC,gCAAN,CAAuC,oBAAvC,EAA6D,WAA7D,EAA0E,UAA1E,EAAsF,QAAtF;IAFoB,CApQ9B;;;IAyQE,QAAU,CAAE,CAAF,CAAA;MACR,IAAK,SAAS,CAAC,MAAV,KAAsB,CAA3B;QACE,MAAM,IAAI,CAAC,CAAC,qBAAN,CAA4B,aAA5B,EAA2C,CAA3C,EAA8C,SAAS,CAAC,MAAxD,EADR;;AAEA,aAAO,SAAA,CAAU,IAAC,CAAA,kBAAX,EAA+B,CAA/B;IAHC,CAzQZ;;;IA+QE,WAAa,CAAE,WAAF,CAAA;AACf,UAAA,MAAA,EAAA,EAAA,EAAA,QAAA,EAAA;MAAI,CAAA,CAAE,IAAF,EACE,MADF,EAEE,QAFF,CAAA,GAEgB,WAFhB;MAGA,EAAA,GAAgB;AAChB,cAAO,IAAP;AAAA,aACO,cADP;UAEI,KAAO,EAAE,CAAC,GAAG,CAAC,QAAP,CAAgB,MAAhB,CAAP;YACE,MAAM,IAAI,CAAC,CAAC,iCAAN,CAAwC,iBAAxC,EAA2D,IAA3D,EAAiE,EAAE,CAAC,OAAH,CAAW,MAAX,CAAjE,EADR;;AAEA,iBAAO,MAAA,CAAO,CAAA,OAAA,CAAA,CAAU,IAAV,CAAA,CAAP,EAAyB,QAAA,CAAA,GAAE,CAAF,CAAA;AACxC,gBAAA;YAAU,KAAO,EAAE,CAAC,GAAG,CAAE,IAAF,CAAN,CAAe,CAAE,CAAA,GAAI,MAAM,CAAC,IAAP,CAAY,EAAZ,EAAgB,GAAA,CAAhB,CAAN,CAAf,CAAP;cACE,MAAM,IAAI,CAAC,CAAC,oCAAN,CAA2C,CAAA,QAAA,CAAA,CAAW,IAAX,CAAA,GAAA,CAA3C,EAAiE,IAAjE,EAAuE,EAAE,CAAC,OAAH,CAAW,CAAX,CAAvE,EADR;;AAEA,mBAAO;UAHuB,CAAzB;AAJX,aAQO,gBARP;AASI,iBAAO,IAAC,CAAA,yBAAD,CAA2B,WAA3B;AATX;AAUA,aAAO,MAAA,CAAO,CAAA,OAAA,CAAA,CAAU,IAAV,CAAA,CAAP,EAAyB,QAAA,CAAA,GAAE,CAAF,CAAA;QAC9B,MAAM,IAAI,CAAC,CAAC,8BAAN,CAAqC,CAAA,QAAA,CAAA,CAAW,IAAX,CAAA,GAAA,CAArC,EAA2D,IAA3D;MADwB,CAAzB;IAfI,CA/Qf;;;IAkSE,yBAA2B,CAAE,WAAF,CAAA,EAAA;;AAC7B,UAAA,CAoByC,8BApBzC,EAAA,EAAA,EAAA,WAAA,EAAA,QAAA,EAAA,IAAA,EAAA;MACI,CAAA,CAAE,IAAF,EACE,QADF,CAAA,GACgB,WADhB;MAEA,EAAA,GAAgB;MAChB,UAAA,GAAgB,IAAC,CAAA,iCAAD,CAAmC,WAAnC;MAChB,WAAA,GAAgB,CAAA,OAAA,CAAA,CAAU,IAAV,CAAA,EALpB;;;MAQI,IAAG,IAAI,CAAC,QAAL,CAAc,QAAd,CAAH;QACE,IAAK,QAAQ,CAAC,MAAT,KAAqB,CAA1B;UACE,MAAM,IAAI,CAAC,CAAC,8BAAN,CAAqC,iBAArC,EAAwD,IAAxD,EAA8D,QAAQ,CAAC,MAAvE,EADR;;AAEA,eAAO,MAAA,CAAO,WAAP,EAAoB,QAAA,CAAA,CAAA;AACjC,cAAA;UAAQ,IAAK,SAAS,CAAC,MAAV,KAAsB,CAA3B;YACE,MAAM,IAAI,CAAC,CAAC,qBAAN,CAA4B,CAAA,QAAA,CAAA,CAAW,IAAX,CAAA,GAAA,CAA5B,EAAkD,CAAlD,EAAqD,SAAS,CAAC,MAA/D,EADR;;UAEA,KAAO,EAAE,CAAC,GAAG,CAAE,IAAF,CAAN,CAAe,CAAE,CAAA,GAAI,QAAQ,CAAC,IAAT,CAAc,EAAd,CAAN,CAAf,CAAP;YACE,MAAM,IAAI,CAAC,CAAC,oCAAN,CAA2C,CAAA,QAAA,CAAA,CAAW,IAAX,CAAA,GAAA,CAA3C,EAAiE,IAAjE,EAAuE,EAAE,CAAC,OAAH,CAAW,CAAX,CAAvE,EADR;;AAEA,iBAAO;QALkB,CAApB,EAHT;OARJ;;;MAmBI,IAAG,UAAH;QACE,MAAM,CAAC,MAAP,CAAc,WAAW,CAAC,QAA1B;QACA,CAAA,GAAI,MAAA,CAAO,WAAP,EAAoB,QAAA,CAAA,GAAE,CAAF,CAAA;UACtB,KAAA,CAAM,QAAN,EAAgB,SAAA,CAAU,QAAV,EAAoB,GAAA,CAApB,CAAhB;UACA,KAAO,EAAE,CAAC,GAAG,CAAE,IAAF,CAAN,CAAe,CAAE,CAAA,GAAI,EAAE,CAAC,4BAAH,CAAgC,SAAA,CAAU,QAAV,EAAoB,GAAA,CAApB,CAAhC,CAAN,CAAf,CAAP;YACE,MAAM,IAAI,CAAC,CAAC,oCAAN,CAA2C,CAAA,QAAA,CAAA,CAAW,IAAX,CAAA,GAAA,CAA3C,EAAiE,IAAjE,EAAuE,EAAE,CAAC,OAAH,CAAW,CAAX,CAAvE,EADR;;AAEA,iBAAO;QAJe,CAApB,EAFN;OAAA,MAAA;QAQE,KAAO,EAAE,CAAC,GAAG,CAAE,IAAF,CAAN,CAAe,QAAf,CAAP;UACE,MAAM,IAAI,CAAC,CAAC,6BAAN,CAAoC,iBAApC,EAAuD,IAAvD,EAA6D,EAAE,CAAC,OAAH,CAAW,CAAX,CAA7D,EADR;;QAEA,CAAA,GAAI,MAAA,CAAO,WAAP,EAAoB,QAAA,CAAA,CAAA;UACtB,IAAK,SAAS,CAAC,MAAV,KAAsB,CAA3B;YACE,MAAM,IAAI,CAAC,CAAC,qBAAN,CAA4B,CAAA,QAAA,CAAA,CAAW,IAAX,CAAA,GAAA,CAA5B,EAAkD,CAAlD,EAAqD,SAAS,CAAC,MAA/D,EADR;;AAEA,iBAAO;QAHe,CAApB,EAVN;OAnBJ;;AAkCI,aAAO;IAnCkB,CAlS7B;;;IAwUE,4BAA8B,CAAE,CAAF,CAAA;AAChC,UAAA,GAAA,EAAA;MAAI,KAAA,QAAA;;QACE,IAAG,IAAI,CAAC,QAAL,CAAc,KAAd,CAAH;UAA8B,CAAC,CAAE,GAAF,CAAD,GAAW,KAAK,CAAC,IAAN,CAAW,IAAX,EAAzC;SAAA,MACK,IAAG,IAAI,CAAC,MAAL,CAAY,CAAZ,CAAH;UAAyB,CAAC,CAAE,GAAF,CAAD,GAAW,IAAC,CAAA,4BAAD,CAA8B,KAA9B,EAApC;;MAFP;AAGA,aAAO;IAJqB,CAxUhC;;;IA+UE,iCAAmC,CAAE,WAAF,CAAA;aAC/B,qBAAA,IAAiB,CACjB,CAAE,IAAI,CAAC,MAAL,CAAY,WAAW,CAAC,MAAxB,CAAF,CAAA,IACK,CAAM,4BAAJ,IAA4B,IAAI,CAAC,MAAL,CAAY,WAAW,CAAC,QAAxB,CAA9B,CAFY;IADc;;EAjVrC,EAjHA;;;EAycM,oBAAN,MAAA,kBAAA,QAAgC,UAAhC,CAAA,EAzcA;;;EA4cA,SAAA,GAAY,QAAA,CAAE,eAAF,EAAmB,CAAnB,CAAA;AACZ,QAAA,IAAA,EAAA;IAAE,IAAuB,CAAA,KAAK,IAA5B;AAAA,aAAO,OAAP;;IACA,IAAuB,CAAA,KAAK,MAA5B;AAAA,aAAO,YAAP;;IACA,KAAA,uBAAA;;MACE,IAAe,IAAA,CAAK,CAAL,CAAf;AAAA,eAAO,KAAP;;IADF;AAEA,WAAO;EALG,EA5cZ;;;EAodA,SAAA,GAAY,QAAA,CAAA,GAAE,CAAF,CAAA;AACZ,QAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,GAAA,EAAA,CAAA,EAAA;IAAE,CAAA,GAAI,CAAA;IACJ,KAAA,mCAAA;;MACE,KAAO,IAAI,CAAC,MAAL,CAAY,CAAZ,CAAP;QACE,MAAM,IAAI,CAAC,CAAC,oBAAN,CAA2B,eAA3B,EAA4C,WAA5C,EAAyD,SAAA,CAAU,IAAV,EAAgB,CAAhB,CAAzD,EADR;;MAEA,KAAA,QAAA;;QACE,CAAC,CAAE,GAAF,CAAD,GAAc,CAAE,IAAI,CAAC,MAAL,CAAY,KAAZ,CAAF,CAAH,GAAgC,SAAA,CAAU,KAAV,CAAhC,GAAuD;MADpE;IAHF;AAKA,WAAO;EAPG,EApdZ;;;EA8dA,aAAA,GAAgB,SAAA,CAAE,OAAF,CAAA;AAChB,QAAA,CAAA,EAAA,GAAA,EAAA,KAAA,EAAA,IAAA;;;;;;IAKE,KAAO,IAAI,CAAC,IAAL,CAAU,OAAV,CAAP;MACE,MAAM,IAAI,CAAC,CAAC,oBAAN,CAA2B,eAA3B,EAA4C,QAA5C,EAAsD,SAAA,CAAU,IAAV,EAAgB,CAAhB,CAAtD,EADR;;IAEA,KAAA,GAAQ,OAAO,CAAC,KAAR,CAAc,GAAd;IACR,KAAW,oGAAX;MACE,MAAM,CAAE,KAAK,0BAAU,CAAC,IAAhB,CAAqB,GAArB,CAAF;IADR;AAEA,WAAO;EAXO,EA9dhB;;;EA6eA,KAAA,GAAQ,IAAI,SAAJ,CAAA;;EACL,CAAA,CAAA,CAAA,GAAA;AACH,QAAA,MAAA,EAAA,GAAA,EAAA,OAAA,EAAA;IAAE,CAAA,CAAE,GAAF,EACE,QADF,EAEE,MAFF,EAGE,OAHF,CAAA,GAGkB,KAHlB;WAIA,MAAM,CAAC,OAAP,GAAiB;MACf,SADe;MACJ,iBADI;MAEf,KAFe;MAER,GAFQ;MAEH,QAFG;MAEO,MAFP;MAEe,OAFf;MAGf,YAAA,EAAc,oBAHC;MAIf,SAJe;MAKf,aALe;MAMf;IANe;EALhB,CAAA;AA9eH",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n#===========================================================================================================\nWG                        = require 'webguy'\n{ rpr }                   = WG.trm\n{ hide\n  nameit }                = WG.props\n{ debug }                 = console\nE                         = require './errors'\nset                       = ( t, k, v ) -> Object.defineProperty t, k, { value: v, enumerable: true, }\n\n\n#===========================================================================================================\nbasetypes =\n  anything:               ( x ) -> true\n  nothing:                ( x ) -> not x?\n  something:              ( x ) -> x?\n  null:                   ( x ) -> x is null\n  undefined:              ( x ) -> x is undefined\n  unknown:                ( x ) -> ( @type_of x ) is 'unknown'\n\n_TMP_basetype_names          = new Set Object.keys basetypes\n_TMP_basetype_names_matcher  = /// \\b ( #{[ _TMP_basetype_names..., ].join '|'} ) \\b ///\n\n#-----------------------------------------------------------------------------------------------------------\n_isa =\n  basetype:               ( x ) -> _TMP_basetype_names.has x\n  boolean:                ( x ) -> ( x is true ) or ( x is false )\n  asyncfunction:          ( x ) -> ( Object::toString.call x ) is '[object AsyncFunction]'\n  generatorfunction:      ( x ) => ( Object::toString.call x ) is '[object GeneratorFunction]'\n  generator:              ( x ) => ( Object::toString.call x ) is '[object Generator]'\n  asyncgeneratorfunction: ( x ) => ( Object::toString.call x ) is '[object AsyncGeneratorFunction]'\n  asyncgenerator:         ( x ) => ( Object::toString.call x ) is '[object AsyncGenerator]'\n  function:               ( x ) -> ( Object::toString.call x ) is '[object Function]'\n  symbol:                 ( x ) -> ( typeof x ) is 'symbol'\n  object:                 ( x ) -> x? and ( typeof x is 'object' ) and ( ( Object::toString.call x ) is '[object Object]' )\n  float:                  ( x ) -> Number.isFinite x\n  infinity:               ( x ) -> ( x is +Infinity ) or ( x is -Infinity )\n  text:                   ( x ) -> ( typeof x ) is 'string'\n  list:                   ( x ) -> Array.isArray x\n  regex:                  ( x ) -> x instanceof RegExp\n  # text:                   { template: '', test: ( ( x ) -> ( typeof x ) is 'string' ), }\n  # nullary:                ( x ) -> ( ( Object::toString.call x ) is '[object Function]' ) and ( x.length is 0 )\n  # unary:                  ( x ) -> ( ( Object::toString.call x ) is '[object Function]' ) and ( x.length is 1 )\n  # binary:                 ( x ) -> ( ( Object::toString.call x ) is '[object Function]' ) and ( x.length is 2 )\n  # trinary:                ( x ) -> ( ( Object::toString.call x ) is '[object Function]' ) and ( x.length is 3 )\n  #.........................................................................................................\n  # IT_listener:            ( x ) -> ( @isa.function x ) or ( @isa.asyncfunction x )\n  # IT_note_$key:           ( x ) -> ( @isa.text x ) or ( @isa.symbol x )\n  # unary_or_binary:        ( x ) -> ( @isa.unary   x ) or ( @isa.binary  x )\n  # binary_or_trinary:      ( x ) -> ( @isa.binary  x ) or ( @isa.trinary x )\n  # $freeze:                ( x ) -> @isa.boolean x\n\n#-----------------------------------------------------------------------------------------------------------\n# internal_declarations = { default_declarations..., }\n# internal_declarations = {\n#   default_declarations...\n#   # foo: ( x ) -> x is 'foo'\n#   # bar: ( x ) -> x is 'bar'\n#   }\n\n#-----------------------------------------------------------------------------------------------------------\ndefault_declarations =\n  basetype:\n    test:         _isa.basetype\n  boolean:\n    test:         _isa.boolean\n    template:     false\n  asyncfunction:\n    test:         _isa.asyncfunction\n    template:     -> await undefined\n  generatorfunction:\n    test:         _isa.generatorfunction\n  asyncgeneratorfunction:\n    test:         _isa.asyncgeneratorfunction\n  asyncgenerator:\n    test:         _isa.asyncgenerator\n  generator:\n    test:         _isa.generator\n  function:\n    test:         _isa.function\n    template:     -> ->\n  symbol:\n    test:         _isa.symbol\n    template:     -> Symbol ''\n  object:\n    test:         _isa.object\n    template:     -> {}\n  float:\n    test:         _isa.float\n    template:     0\n  infinity:\n    test:         _isa.infinity\n    template:     Infinity\n  text:\n    test:         _isa.text\n    template:     ''\n  list:\n    test:         _isa.list\n    template:     -> []\n  regex:\n    test:         _isa.regex\n    template:     -> new RegExp()\n\n\n\n#===========================================================================================================\ndefault_types         = new Set Object.keys default_declarations\n_TMP_minimal_types    = ( new Set Object.keys basetypes ).union default_types   ### TAINT unfortunate choice of name ###\n_TMP_isa_minimal_type = ( x ) -> _TMP_minimal_types.has x\n\n#===========================================================================================================\nclass Intertype\n\n  #---------------------------------------------------------------------------------------------------------\n  ### TAINT may want to check type, arities ###\n  constructor: ( declarations... ) ->\n    declarations.unshift default_declarations unless @ instanceof Intertype_minimal\n    #.......................................................................................................\n    hide @, 'isa',                @_new_strict_proxy 'isa'\n    hide @, 'evaluate',           @_new_strict_proxy 'evaluate'\n    hide @, 'validate',           @_new_strict_proxy 'validate'\n    hide @, 'create',             @_new_strict_proxy 'create'\n    hide @, 'declarations',       @_new_strict_proxy 'declarations'\n    hide @, '_tests_for_type_of', {}\n    ### NOTE redirected to prevent 'JavaScript rip-off' effect ###\n    hide @, 'type_of',            ( P... ) => @_type_of P...\n    hide @, 'declare',            ( P... ) => @_declare P...\n    #.......................................................................................................\n    @_declare basetypes, declarations...\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _declare: ( declarations... ) ->\n    for collection in declarations\n      unless _isa.object collection\n        throw new E.Intertype_validation_error '^declare@1^', 'object', __type_of _isa, collection\n      for type, test of collection then do ( type, test ) =>\n        #...................................................................................................\n        if Reflect.has @declarations, type\n          if _isa.basetype type\n            throw new E.Intertype_basetype_redeclaration_forbidden '^declare@2^', type\n          throw new E.Intertype_declaration_redeclaration_forbidden '^declare@3^', type\n        #...................................................................................................\n        { target_type\n          targets\n          sub_type    } = @_resolve_dotted_type         type\n        declaration     = @_compile_declaration_object  type, test\n        #...................................................................................................\n        @declarations[        type ] = declaration\n        @isa[                 type ] = @_get_isa                declaration\n        @isa.optional[        type ] = @_get_isa_optional       declaration\n        @evaluate[            type ] = @_get_evaluate           declaration\n        @evaluate.optional[   type ] = @_get_evaluate_optional  declaration\n        @validate[            type ] = @_get_validate           declaration\n        @validate.optional[   type ] = @_get_validate_optional  declaration\n        @create[              type ] = @_get_create             declaration\n        @_tests_for_type_of[  type ] = declaration.test if collection isnt basetypes ### TAINT should better check against _TMP_basetype_names ? ###\n        #...................................................................................................\n        if targets?\n          set targets[ 'isa'                ], sub_type, @isa[                type ]\n          set targets[ 'isa.optional'       ], sub_type, @isa.optional[       type ]\n          set targets[ 'evaluate'           ], sub_type, @evaluate[           type ]\n          set targets[ 'evaluate.optional'  ], sub_type, @evaluate.optional[  type ]\n          set targets[ 'validate'           ], sub_type, @validate[           type ]\n          set targets[ 'validate.optional'  ], sub_type, @validate.optional[  type ]\n          @declarations[ target_type ].sub_tests[ sub_type ] = @isa[ type ]\n        #...................................................................................................\n        ### TAINT turn into method, must also look into template should fields be missing ###\n        if declaration.fields?\n          for field_name, test of declaration.fields\n            fq_type_name = \"#{type}.#{field_name}\"\n            @declare { [\"#{fq_type_name}\"]: test, }\n        #...................................................................................................\n        for prefix from walk_prefixes type\n          @declarations[ prefix ].sub_fields.push type\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _resolve_dotted_type: ( type ) ->\n    ### analyze flat type declarations with dot notation ###\n    target_type = null\n    targets     = null\n    sub_type    = null\n    #.......................................................................................................\n    sub_types = type.split '.'\n    if ( basetype = sub_types[ 0 ] ) is 'optional'\n      throw new E.Intertype_illegal_use_of_optional '^_resolve_dotted_type@2^', type\n    if ( _isa.basetype basetype ) and Reflect.has @declarations, basetype\n      throw new E.Intertype_illegal_use_of_basetype '^_resolve_dotted_type@3^', type, basetype\n    #.......................................................................................................\n    if sub_types.length > 1\n      #.....................................................................................................\n      for idx in  [ 0 ... sub_types.length - 1 ]\n        partial_type = sub_types[ .. idx ].join '.'\n        ### NOTE using `Reflect.has()` to avoid triggering Unknown Type Error: ###\n        unless Reflect.has @declarations, partial_type\n          throw new E.Intertype_unknown_partial_type '^_resolve_dotted_type@1^', type, partial_type\n      #.....................................................................................................\n      target_type = partial_type\n      sub_type    = sub_types.at -1\n      targets     =\n        'isa':                @isa[               target_type ]\n        'isa.optional':       @isa.optional[      target_type ]\n        'evaluate':           @evaluate[          target_type ]\n        'evaluate.optional':  @evaluate.optional[ target_type ]\n        'validate':           @validate[          target_type ]\n        'validate.optional':  @validate.optional[ target_type ]\n    #.......................................................................................................\n    return { type, target_type, targets, sub_type, }\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_declaration_object: ( type, declaration ) ->\n    ### TODO: call recursively for each entry in `declaration.fields` ###\n    template = { type, test: undefined, sub_tests: {}, sub_fields: [], }\n    R = { template..., }\n    if _isa.object declaration then Object.assign R, declaration\n    else                            R.test = declaration\n    R.test = 'object' if ( not R.test? and @_looks_like_an_object_declaration declaration )\n    #.......................................................................................................\n    switch true\n      #.....................................................................................................\n      when _isa.text R.test then do ( ref_type = R.test ) =>\n        if /\\boptional\\b/.test ref_type # ( ref_type is 'optional' ) or ( ref_type.startsWith 'optional.' )\n          throw new E.Intertype_illegal_use_of_optional '^_compile_declaration_object@1^', type\n        if ( basetype = @_extract_first_basetype_name ref_type )?\n          throw new E.Intertype_illegal_use_of_basetype '^_compile_declaration_object@2^', type, basetype\n        ref_declaration = @declarations[ ref_type ]\n        unless ref_declaration?\n          throw new E.Intertype_unknown_type '^_compile_declaration_object@3^', ref_type\n        do ( test = ref_declaration.test ) => R.test = nameit type, ( x ) -> test.call @, x\n        # debug '^_compile_declaration_object@332^', { type, ref_type, test: R.test, }\n        Object.assign R.sub_tests, ref_declaration.sub_tests\n      #.....................................................................................................\n      when _isa.function R.test then do ( test = R.test ) =>\n        @_validate_test_method type, test\n        R.test = nameit type, ( x ) -> test.call @, x\n      #.....................................................................................................\n      else\n        throw new E.Intertype_wrong_type_for_test_method '^_compile_declaration_object@4^', __type_of _isa, R.test\n    #.......................................................................................................\n    ### TAINT should ideally check entire object? ###\n    @_validate_test_method type, R.test\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _validate_test_method: ( type, x ) ->\n    unless _isa.function x\n      throw new E.Intertype_test_must_be_function '^_validate_test_method@1^', type, __type_of _isa, x\n    unless x.length is 1\n      throw new E.Intertype_function_with_wrong_arity '^_validate_test_method@2^', 1, x.length\n    return x\n\n  #---------------------------------------------------------------------------------------------------------\n  _extract_first_basetype_name: ( type ) ->\n    unless _isa.text type\n      throw new E.Intertype_internal_error '^_extract_first_basetype_name@1^',\n        \"expected text, got a #{__type_of _isa, type}\"\n    return null unless ( match = type.match _TMP_basetype_names_matcher )?\n    return match[ 0 ]\n\n  #---------------------------------------------------------------------------------------------------------\n  _new_strict_proxy: ( name ) ->\n    ### Create a proxy for a new object that will throw an `Intertype_unknown_type` error when\n    a non-existing property is accessed ###\n    #.......................................................................................................\n    optional_from_name = -> switch name\n      when 'isa'          then ( x ) -> throw new E.Intertype_illegal_isa_optional       '^_new_strict_proxy@1^'\n      when 'evaluate'     then ( x ) -> throw new E.Intertype_illegal_evaluate_optional  '^_new_strict_proxy@2^'\n      when 'validate'     then ( x ) -> throw new E.Intertype_illegal_validate_optional  '^_new_strict_proxy@3^'\n      when 'create'       then ( x ) -> throw new E.Intertype_illegal_create_optional    '^_new_strict_proxy@4^'\n      when 'declarations' then {}\n      else throw new E.Intertype_internal_error '^_new_strict_proxy@5^', \"unknown name #{rpr name}\"\n    #.......................................................................................................\n    get_cfg = ( ref ) =>\n      get: ( target, key ) =>\n        return undefined          if key is Symbol.toStringTag\n        return target.constructor if key is 'constructor'\n        return target.toString    if key is 'toString'\n        # return target.call        if key is 'call'\n        # return target.apply       if key is 'apply'\n        return R if ( R = Reflect.get target, key )?\n        throw new E.Intertype_unknown_type ref, key\n    #.......................................................................................................\n    optional =  new Proxy optional_from_name(), get_cfg \"^proxy_for_#{name}_optional@1^\"\n    return      new Proxy { optional, },        get_cfg \"^proxy_for_#{name}@1^\"\n\n  #---------------------------------------------------------------------------------------------------------\n  _get_isa: ( declaration ) ->\n    { type\n      test\n      sub_tests } = declaration\n    me            = @\n    method_name   = \"isa.#{type}\"\n    #.......................................................................................................\n    return nameit method_name, ( x ) ->\n      me._validate_arity_for_method method_name, 1, arguments.length\n      return false unless test.call me, x\n      for field_name, sub_test of sub_tests\n        return false unless sub_test.call me, x[ field_name ]\n      return true\n\n  #---------------------------------------------------------------------------------------------------------\n  _get_isa_optional: ( declaration ) ->\n    { type      } = declaration\n    me            = @\n    test          = @isa[ type ]\n    method_name   = \"isa.optional.#{type}\"\n    #.......................................................................................................\n    return nameit method_name, ( x ) ->\n      me._validate_arity_for_method method_name, 1, arguments.length\n      return true unless x?\n      return test x\n\n  #---------------------------------------------------------------------------------------------------------\n  _get_evaluate: ( declaration ) ->\n    { type\n      test\n      sub_tests\n      sub_fields } = declaration\n    me            = @\n    method_name   = \"evaluate.#{type}\"\n    #.......................................................................................................\n    return nameit method_name, ( x ) ->\n      me._validate_arity_for_method method_name, 1, arguments.length\n      R         = {}\n      R[ type ] = me.isa[ type ] x\n      if x?\n        for field_name, sub_test of sub_tests\n          Object.assign R, me.evaluate[ type ][ field_name ] x?[ field_name ]\n      else\n        for fq_name in sub_fields\n          R[ fq_name ] = false\n      return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _get_evaluate_optional: ( declaration ) ->\n    { type\n      test\n      sub_tests } = declaration\n    me            = @\n    method_name   = \"evaluate.optional.#{type}\"\n    #.......................................................................................................\n    return nameit method_name, ( x ) ->\n      me._validate_arity_for_method method_name, 1, arguments.length\n      throw new E.Intertype_illegal_evaluate_optional \"^#{method_name}@1^\"\n      return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _get_validate: ( declaration ) ->\n    { type      } = declaration\n    me            = @\n    test          = @isa[ type ]\n    method_name   = \"validate.#{type}\"\n    #.......................................................................................................\n    return nameit method_name, ( x ) ->\n      me._validate_arity_for_method method_name, 1, arguments.length\n      return x if test x\n      throw new E.Intertype_validation_error \"^#{method_name}@1^\", type, __type_of _isa, x\n\n  #---------------------------------------------------------------------------------------------------------\n  _get_validate_optional: ( declaration ) ->\n    { type      } = declaration\n    me            = @\n    test          = @isa.optional[ type ]\n    method_name   = \"validate.optional.#{type}\"\n    #.......................................................................................................\n    return nameit method_name, ( x ) ->\n      me._validate_arity_for_method method_name, 1, arguments.length\n      return x if test x\n      throw new E.Intertype_optional_validation_error \"^#{method_name}@1^\", type, __type_of _isa, x\n\n  #---------------------------------------------------------------------------------------------------------\n  _validate_arity_for_method: ( method_name, need_arity, is_arity ) ->\n    return is_arity if need_arity is is_arity\n    throw new E.Intertype_wrong_arity_for_method \"^validate_arity@1^\", method_name, need_arity, is_arity\n\n  #---------------------------------------------------------------------------------------------------------\n  _type_of: ( x ) ->\n    if ( arguments.length isnt 1 )\n      throw new E.Intertype_wrong_arity \"^type_of@1^\", 1, arguments.length\n    return __type_of @_tests_for_type_of, x\n\n  #---------------------------------------------------------------------------------------------------------\n  _get_create: ( declaration ) ->\n    { type\n      create\n      template  } = declaration\n    me            = @\n    switch true\n      when create?\n        unless me.isa.function create\n          throw new E.Intertype_create_must_be_function \"^_get_create@1^\", type, me.type_of create\n        return nameit \"create_#{type}\", ( P... ) ->\n          unless me.isa[ type ] ( R = create.call me, P... )\n            throw new E.Intertype_wrong_arguments_for_create \"^create_#{type}@1^\", type, me.type_of R\n          return R\n      when template?\n        return @_get_create_from_template declaration\n    return nameit \"create_#{type}\", ( P... ) ->\n      throw new E.Intertype_create_not_available \"^create_#{type}@2^\", type\n\n  #---------------------------------------------------------------------------------------------------------\n  _get_create_from_template: ( declaration ) ->\n    ### TAINT must distinguish whether value is object or not, use assign ###\n    { type\n      template  } = declaration\n    me            = @\n    use_assign    = @_looks_like_an_object_declaration declaration\n    method_name   = \"create_#{type}\"\n    # debug '^3234^', declaration, { use_assign, type: ( __type_of _isa, ) } if declaration.type is 'q'\n    #.......................................................................................................\n    if _isa.function template\n      if ( template.length isnt 0 )\n        throw new E.Intertype_wrong_template_arity \"^_get_create@1^\", type, template.length\n      return nameit method_name, ->\n        if ( arguments.length isnt 0 )\n          throw new E.Intertype_wrong_arity \"^create_#{type}@1^\", 0, arguments.length\n        unless me.isa[ type ] ( R = template.call me )\n          throw new E.Intertype_wrong_arguments_for_create \"^create_#{type}@2^\", type, me.type_of R\n        return R\n    #.......................................................................................................\n    ### TAINT case of constant template could be handled when validating the declaration ###\n    if use_assign\n      Object.freeze declaration.template ### TAINT should deep-freeze ###\n      R = nameit method_name, ( P... ) ->\n        debug '^3234^', deepmerge template, P...\n        unless me.isa[ type ] ( R = me._call_and_reassign_functions deepmerge template, P... )\n          throw new E.Intertype_wrong_arguments_for_create \"^create_#{type}@3^\", type, me.type_of R\n        return R\n    else\n      unless me.isa[ type ] template\n        throw new E.Intertype_wrong_template_type \"^_get_create@2^\", type, me.type_of R\n      R = nameit method_name, ->\n        if ( arguments.length isnt 0 )\n          throw new E.Intertype_wrong_arity \"^create_#{type}@4^\", 0, arguments.length\n        return template\n    #.......................................................................................................\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _call_and_reassign_functions: ( R ) ->\n    for key, value of R\n      if _isa.function value  then  R[ key ] = value.call @\n      else if _isa.object R   then  R[ key ] = @_call_and_reassign_functions value\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _looks_like_an_object_declaration: ( declaration ) ->\n    ( declaration? and ( \\\n      ( _isa.object declaration.fields ) \\\n        or ( not declaration.fields? and _isa.object declaration.template ) ) )\n\n\n#===========================================================================================================\nclass Intertype_minimal extends Intertype\n\n#===========================================================================================================\n__type_of = ( test_method_map, x ) ->\n  return 'null'       if x is null\n  return 'undefined'  if x is undefined\n  for type, test of test_method_map\n    return type if test x\n  return 'unknown'\n\n#===========================================================================================================\ndeepmerge = ( P... ) ->\n  R = {}\n  for p in P\n    unless _isa.object p\n      throw new E.Intertype_wrong_type \"^deepmerge@1^\", 'an object', __type_of _isa, p\n    for key, value of p\n      R[ key ] = if ( _isa.object value ) then ( deepmerge value ) else value\n  return R\n\n#===========================================================================================================\nwalk_prefixes = ( fq_name ) ->\n  ### Given a fully qualified type name, walk over all the prefixes of the name, if any. This is used to\n  determine the transitive sub-types of types with fields.\n\n  Example: calling `walk_prefixes 'one.two.three.four'` will iterate over `'one'`, `'one.two'`,\n  `'one.two.three'`. ###\n  unless _isa.text fq_name\n    throw new E.Intertype_wrong_type \"^deepmerge@1^\", 'a text', __type_of _isa, p\n  parts = fq_name.split '.'\n  for idx in [ 0 ... parts.length - 1 ]\n    yield ( parts[ .. idx ].join '.' )\n  return null\n\n\n#===========================================================================================================\ntypes = new Intertype()\ndo =>\n  { isa\n    validate\n    create\n    type_of     } = types\n  module.exports = {\n    Intertype, Intertype_minimal\n    types, isa, validate, create, type_of,\n    declarations: default_declarations,\n    deepmerge,\n    walk_prefixes,\n    __type_of   }\n"
  ]
}