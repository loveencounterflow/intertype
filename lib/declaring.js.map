{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "/home/flow/jzr/intertype/src/declaring.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'INTERTYPE/DECLARING'\ndebug                     = CND.get_logger 'debug',     badge\nalert                     = CND.get_logger 'alert',     badge\nwhisper                   = CND.get_logger 'whisper',   badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\ninfo                      = CND.get_logger 'info',      badge\n#...........................................................................................................\n{ assign\n  jr\n  flatten\n  xrpr\n  js_type_of }            = require './helpers'\nisa_copy                  = Symbol 'isa_copy'\n\n#-----------------------------------------------------------------------------------------------------------\n### TAINT make catalog of all 'deep JS' names that must never be used as types, b/c e.g a type 'bind'\nwould shadow native `f.bind()` ###\n@illegal_types = [\n  'bind'\n  'toString'\n  'valueOf'\n  ]\n\n#-----------------------------------------------------------------------------------------------------------\ncopy_if_original = ( x ) ->\n  return x if x[ isa_copy ]\n  R = assign {}, x\n  R[ isa_copy ] = true\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@_satisfies_all_aspects = ( type, xP... ) ->\n  return true unless ( @_get_unsatisfied_aspect type, xP... )?\n  return false\n\n#-----------------------------------------------------------------------------------------------------------\n@_get_unsatisfied_aspect = ( type, xP... ) ->\n  ### Check all constraints in spec: ###\n  throw new Error \"µ6500 unknown type #{rpr type}\" unless ( spec = @specs[ type ] )?\n  for aspect, test of spec.tests\n    return aspect unless test.apply @, xP\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@type_of = ( xP... ) ->\n  ### TAINT this should be generalized for all Intertype types that split up / rename a JS type: ###\n  throw new Error \"^7746^ expected 1 argumnt got #{arity}\" unless xP.length is 1\n  switch R = js_type_of xP...\n    when 'uint8array'\n      R = 'buffer' if Buffer.isBuffer xP...\n    when 'number'\n      [ x, ] = xP\n      unless Number.isFinite x\n        R = if ( Number.isNaN x ) then 'nan' else 'infinity'\n    when 'regexp'         then R = 'regex'\n    when 'string'         then R = 'text'\n    when 'array'          then R = 'list'\n    when 'arrayiterator'  then R = 'listiterator'\n    when 'stringiterator' then R = 'textiterator'\n  ### Refuse to answer question in case type found is not in specs: ###\n  # debug 'µ33332', R, ( k for k of @specs )\n  # throw new Error \"µ6623 unknown type #{rpr R}\" unless R of @specs\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@types_of = ( xP... ) ->\n  R = []\n  for type, spec of @specs\n    ok = true\n    for aspect, test of spec.tests\n      # debug 'µ27722', \"#{type}/#{aspect}\", test.apply @, xP\n      unless test.apply @, xP\n        ok = false\n        break\n    R.push type if ok\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@declare = ( P... ### type, spec?, test? ### ) ->\n  # debug 'µ33374-0', 'declare', P\n  switch arity = P.length\n    when 1 then return @_declare_1 P...\n    when 2 then return @_declare_2 P...\n    when 3 then return @_declare_3 P...\n  throw new Error \"µ6746 expected between 1 and 3 arguments, got #{arity}\"\n\n#-----------------------------------------------------------------------------------------------------------\n@_declare_1 = ( spec ) ->\n  # debug 'µ33374-1', '_declare_1', spec\n  #.........................................................................................................\n  unless ( T = js_type_of spec ) is 'object'\n    throw new Error \"µ6869 expected an object for spec, got a #{T}\"\n  #.........................................................................................................\n  unless ( T = js_type_of spec.type ) is 'string'\n    throw new Error \"µ6992 expected a text for spec.type, got a #{T}\"\n  #.........................................................................................................\n  switch ( T = js_type_of spec.tests )\n    when 'function' then spec.tests = { main: spec.tests, }\n    when 'object'   then null\n    else throw new Error \"µ7115 expected an object for spec.tests, got a #{T}\"\n  #.........................................................................................................\n  return @_declare spec\n\n#-----------------------------------------------------------------------------------------------------------\n@_declare_2 = ( type, spec_or_test ) ->\n  # debug 'µ33374-2', '_declare_2', type, spec_or_test\n  switch T = js_type_of spec_or_test\n    #.......................................................................................................\n    when 'function'\n      return @_declare_1 { type, tests: { main: spec_or_test, }, }\n    #.......................................................................................................\n    when 'asyncfunction'\n      throw \"µ7238 asynchronous functions not yet supported\"\n  #.........................................................................................................\n  if T isnt 'object'\n    throw new Error \"µ7361 expected an object, got a #{T} for spec\"\n  #.........................................................................................................\n  if spec_or_test.type? and ( not spec_or_test.type is type )\n    throw new Error \"µ7484 type declarations #{rpr type} and #{rpr spec_or_test.type} do not match\"\n  #.........................................................................................................\n  spec      = copy_if_original spec_or_test\n  spec.type = type\n  return @_declare_1 spec\n\n#-----------------------------------------------------------------------------------------------------------\n@_declare_3 = ( type, spec, test ) ->\n  # debug 'µ33374-3', '_declare_3', type, spec, test\n  #.........................................................................................................\n  if ( T = js_type_of spec ) isnt 'object'\n    throw new Error \"µ7607 expected an object, got a #{T} for spec\"\n  #.........................................................................................................\n  unless ( T = js_type_of test ) is 'function'\n    throw new Error \"µ7730 expected a function for test, got a #{T}\"\n  #.........................................................................................................\n  if spec.tests?\n    throw new Error \"µ7853 spec cannot have tests when tests are passed as argument\"\n  #.........................................................................................................\n  spec       = copy_if_original spec\n  spec.tests = { main: test, }\n  return @_declare_2 type, spec\n\n#-----------------------------------------------------------------------------------------------------------\n@_declare = ( spec ) ->\n  spec      = copy_if_original spec\n  delete spec[ isa_copy ]\n  # debug 'µ33374-4', '_declare', spec\n  { type, } = spec\n  spec.type = type\n  #.........................................................................................................\n  if type in @illegal_types\n    throw new Error \"µ7976 #{rpr type} is not a legal type name\"\n  #.........................................................................................................\n  if ( @specs[ type ] )?\n    throw new Error \"µ8099 type #{rpr type} already declared\"\n  #.........................................................................................................\n  @specs[ type ]  = spec\n  @isa[ type ]    = ( P... ) => @isa type, P...\n  # @validate[ type ]    = ( P... ) => @validate type, P...\n  spec.size       = @_sizeof_method_from_spec type, spec\n  #.........................................................................................................\n  return null\n\n\n"
  ]
}