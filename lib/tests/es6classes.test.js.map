{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "/home/flow/jzr/intertype/src/tests/es6classes.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\n# njs_util                  = require 'util'\nnjs_path                  = require 'path'\n# njs_fs                    = require 'fs'\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr.bind CND\nbadge                     = 'INTERTYPE/tests/es6classes'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\npraise                    = CND.get_logger 'praise',    badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require 'guy-test'\nINTERTYPE                 = require '../..'\n{ Intertype, }            = INTERTYPE\n{ assign\n  flatten\n  js_type_of }            = require '../helpers'\n\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"es6classes type detection devices\" ] = ( T, done ) ->\n#   #.........................................................................................................\n#   intertype = new Intertype()\n#   { isa\n#     validate\n#     type_of\n#     types_of\n#     size_of\n#     declare\n#     all_keys_of } = intertype.export()\n#   #.........................................................................................................\n#   probes_and_matchers = [\n#     [[ [ 1, 2, 3, 4, ]                                 ], 4,                                          null, ]\n#     ]\n#   #.........................................................................................................\n#   for [ probe, matcher, error, ] in probes_and_matchers\n#     await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n#       resolve result\n#       return null\n#   done()\n#   return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"es6classes type detection devices\" ] = ( T, done ) ->\n  intertype = new Intertype()\n  { isa\n    validate\n    type_of } = intertype.export()\n  { domenic_denicola_device, mark_miller_device, } = require '../helpers'\n  #.........................................................................................................\n  dddx_v1 = ( x ) ->\n    return 'null'       if x is null\n    return 'undefined'  if x is undefined\n    return 'infinity'   if ( x is Infinity  ) or  ( x is -Infinity  )\n    return 'boolean'    if ( x is true      ) or  ( x is false      )\n    return 'nan'        if ( Number.isNaN x )\n    #.......................................................................................................\n    # https://stackoverflow.com/questions/3905144/how-to-retrieve-the-constructors-name-in-javascript#3905265\n    dd_name = x.constructor.name                      # Domenic Denicola Device\n    mm_name = ( Object::toString.call x ).slice 8, -1 # Mark Miller Device\n    return 'buffer' if ( dd_name is 'Buffer' ) and ( mm_name is 'Uint8Array' )\n    dd_name = mm_name if ( not dd_name ) or ( dd_name is '' )\n    return \"<#{dd_name}>\" if dd_name isnt mm_name\n    dd_name = dd_name.toLowerCase()\n    #.......................................................................................................\n    if      ( dd_name is 'regexp' ) then return 'regex'\n    else if ( dd_name is 'array'  ) then return 'list'\n    return dd_name\n  #.........................................................................................................\n  dddx_v2 = ( x ) ->\n    return 'null'       if x is null\n    return 'undefined'  if x is undefined\n    return 'infinity'   if ( x is Infinity  ) or  ( x is -Infinity  )\n    return 'boolean'    if ( x is true      ) or  ( x is false      )\n    return 'nan'        if ( Number.isNaN x )\n    #.......................................................................................................\n    ### TAINT move constants to module ###\n    Generator = ( ( -> yield 42 )() ).constructor\n    #.......................................................................................................\n    # https://stackoverflow.com/questions/3905144/how-to-retrieve-the-constructors-name-in-javascript#3905265\n    dd_name = x.constructor.name.toLowerCase() ### Domenic Denicola Device ###\n    if dd_name is ''\n      return 'generator' if x.constructor is Generator\n      return ( ( Object::toString.call x ).slice 8, -1 ).toLowerCase() ### Mark Miller Device ###\n    #.......................................................................................................\n    return 'float'  if dd_name is 'number'\n    return 'regex'  if dd_name is 'regexp'\n    return 'list'   if dd_name is 'array'\n    return dd_name\n  #.........................................................................................................\n  class MyBareClass\n  class MyObjectClass extends Object\n  class MyArrayClass  extends Array\n  SomeConstructor = ->\n  #.........................................................................................................\n  # ths to https://www.reddit.com/r/javascript/comments/gnbqoy/askjs_is_objectprototypetostringcall_the_best/fra7fg9?utm_source=share&utm_medium=web2x\n  toString  = Function.prototype.call.bind Object.prototype.toString\n  obj       = {}\n  obj[ Symbol.toStringTag ] = 'Foo'\n  # console.log(toString(obj)) // [object Foo]\n  #.........................................................................................................\n  probes_and_matchers = [\n    [ ( MyBareClass                   ), 'function',              ] ### TAINT should ES6 classes get own type? ###\n    [ ( MyObjectClass                 ), 'function',              ] ### TAINT should ES6 classes get own type? ###\n    [ ( MyArrayClass                  ), 'function',              ] ### TAINT should ES6 classes get own type? ###\n    [ ( SomeConstructor               ), 'function',              ]\n    [ ( new MyBareClass()             ), 'mybareclass',           ]\n    [ ( new MyObjectClass()           ), 'myobjectclass',         ]\n    [ ( new MyArrayClass()            ), 'myarrayclass',          ]\n    [ ( new SomeConstructor()         ), 'someconstructor',       ]\n    [ ( null                          ), 'null',                  ]\n    [ ( undefined                     ), 'undefined',             ]\n    [ ( Object                        ), 'function',              ]\n    [ ( Array                         ), 'function',              ]\n    [ ( {}                            ), 'object',                ]\n    [ ( []                            ), 'list',                  ]\n    [ ( 42                            ), 'float',                 ]\n    [ ( NaN                           ), 'nan',                   ]\n    [ ( Infinity                      ), 'infinity',              ]\n    [ ( -> await f()                  ), 'asyncfunction',         ]\n    [ ( -> yield 42                   ), 'generatorfunction',     ]\n    [ ( ( -> yield 42 )()             ), 'generator',             ]\n    [ ( /x/                           ), 'regex',                 ]\n    [ ( new Date()                    ), 'date',                  ]\n    [ ( Set                           ), 'function',              ]\n    [ ( new Set()                     ), 'set',                   ]\n    [ ( Symbol                        ), 'function',              ]\n    [ ( Symbol 'abc'                  ), 'symbol',                ]\n    [ ( Symbol.for 'abc'              ), 'symbol',                ]\n    [ ( new Uint8Array [ 42, ]        ), 'uint8array',            ]\n    [ ( Buffer.from [ 42, ]           ), 'buffer',                ]\n    [ ( 12345678912345678912345n      ), 'bigint',                ]\n    [ ( obj                           ), 'object',                ]\n    [ ( new Promise ( resolve ) ->    ), 'promise',               ]\n    # [ ( class X extends NaN       ), '', ]\n    # [ ( class X extends null      ), '', ]\n    # [ ( class X extends undefined ), '', ]\n    # [ ( class X extends 1         ), '', ]\n    # [ ( class X extends {}        ), '', ]\n    ]\n  #.........................................................................................................\n  debug()\n  column_width  = 25\n  #.........................................................................................................\n  headers = [\n    'probe'\n    'typeof'\n    'miller'\n    'old type_of'\n    'denicola'\n    'dddx_v1'\n    'dddx_v2'\n    'expected' ]\n  headers = ( h[ ... column_width ].padEnd column_width for h in headers ).join '|'\n  echo headers\n  #.........................................................................................................\n  for [ probe, matcher, ] in probes_and_matchers\n    dddx_v1_type     = dddx_v1 probe\n    dddx_v2_type     = dddx_v2 probe\n    raw_results = [\n      rpr                     probe\n      typeof                  probe\n      mark_miller_device      probe\n      type_of                 probe\n      domenic_denicola_device probe\n      dddx_v1_type\n      dddx_v2_type\n      matcher ]\n    results   = []\n    last_idx  = raw_results.length - 1\n    for raw_result, idx in raw_results\n      if ( idx in [ 0, last_idx, ] )\n        color   = CND.cyan\n      else\n        if      raw_result                is matcher then color = CND.green\n        else if raw_result.toLowerCase()  is matcher then color = CND.lime\n        else                                              color = CND.red\n      results.push color ( raw_result[ ... column_width ].padEnd column_width )\n    echo results.join '|'\n    T.eq dddx_v2_type, matcher\n  # debug rpr ( ( -> yield 42 )()       ).constructor\n  # debug rpr ( ( -> yield 42 )()       ).constructor.name\n  # debug '^338-10^', mmd MyBareClass           # Function\n  # debug '^338-11^', mmd MyObjectClass         # Function\n  # debug '^338-12^', mmd MyArrayClass          # Function\n  # debug '^338-13^', mmd new MyBareClass()     # Object\n  # debug '^338-14^', mmd new MyObjectClass()   # Object\n  # debug '^338-15^', mmd new MyArrayClass()    # Array\n  # debug()                                     #\n  # debug '^338-16^', ddd MyBareClass           # Function\n  # debug '^338-17^', ddd MyObjectClass         # Function\n  # debug '^338-18^', ddd MyArrayClass          # Function\n  # debug '^338-19^', ddd new MyBareClass()     # MyBareClass\n  # debug '^338-20^', ddd new MyObjectClass()   # MyObjectClass\n  # debug '^338-21^', ddd new MyArrayClass()    # MyArrayClass\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"_es6classes equals\" ] = ( T, done ) ->\n  intertype = new Intertype()\n  { isa\n    check\n    equals } = intertype.export()\n  ### TAINT copy more extensive tests from CND, `js_eq`? ###\n  T.eq ( equals 3, 3 ), true\n  T.eq ( equals 3, 4 ), false\n  done() if done?\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_test_for_generator = ->\n  GeneratorFunction = ( -> yield 42                   ).constructor\n  Generator         = ( ( -> yield 42 )()             ).constructor\n  debug rpr GeneratorFunction.name  == 'GeneratorFunction'\n  debug rpr Generator.name          == ''\n  debug ( -> yield 42                   ).constructor is GeneratorFunction\n  debug ( -> yield 42                   ).constructor is Generator\n  debug ( ( -> yield 42 )()             ).constructor is GeneratorFunction\n  debug ( ( -> yield 42 )()             ).constructor is Generator\n\n############################################################################################################\nif module is require.main then do =>\n  demo_test_for_generator()\n  test @\n\n  # debug {}.constructor\n  # debug {}.constructor.name\n  # test @[ \"es6classes type detection devices\" ]\n  # intertype = new Intertype()\n  # { isa\n  #   validate\n  #   type_of } = intertype.export()\n  # debug type_of 1n\n\n\n\n"
  ]
}