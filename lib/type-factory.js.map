{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/type-factory.coffee"
  ],
  "names": [],
  "mappings": "AACA;EAAA;AAAA,MAAA,CAAA,EAAA,GAAA,EAAA,CAAA,EAAA,YAAA,EAAA,KAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA;;;EAIA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,CAAA,CAAE,KAAF,EACE,IADF,EAEE,IAFF,EAGE,IAHF,CAAA,GAG4B,GAAG,CAAC,GAAG,CAAC,WAAR,CAAoB,WAApB,CAH5B;;EAIA,CAAA,CAAE,GAAF,CAAA,GAA4B,GAAG,CAAC,GAAhC,EATA;;;EAWA,CAAA,GAA4B,OAAA,CAAQ,UAAR;;EAC5B,CAAA,GAA4B,OAAA,CAAQ,WAAR,EAZ5B;;;;;;;;;;;;;;;;;;;;;;;;;;;EAwCM,eAAN,MAAA,aAAA,QAA2B,CAAC,CAAC,cAA7B,CAAA;;IAGE,WAAa,CAAE,GAAF,CAAA;WACX,CAAA;MACA,IAAC,CAAA,GAAD,GAAO;AACP,aAAO;IAHI,CADf;;;IAOE,WAAa,CAAE,GAAF,CAAA;AACf,UAAA,IAAA;;MACI,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,2BAAjB,CAA6C,GAAA,GAAM,CAAE,GAAA,CAAC,CAAC,QAAQ,CAAC,2BAAb,EAA6C,GAAA,GAA7C,CAAnD;MACA,IAAA,GAAO,CAAE,GAAG,CAAC,KAAK,CAAC,mBAAV,CAA8B,GAA9B,EAAmC,IAAnC,EAAyC,MAAzC,CAAF,CAAmD,CAAC;AAC3D,aAAO,IAAC,CAAA,YAAD,CAAc,IAAd,EAAoB,GAApB;IAJI,CAPf;;;IAcE,YAAc,CAAE,IAAF,EAAQ,GAAR,CAAA;AAChB,UAAA,CAAA,EAAA,CAAA,EAAA;MAAI,IAAG,YAAH;QAAgB,GAAG,CAAC,KAAJ,GAAY,GAA5B;OAAA,MAAA;QACgB,IAAA,GAAY,IAAC,CAAA,mBAAD,CAAqB,GAAG,CAAC,IAAzB,EAA+B,GAAG,CAAC,KAAnC,EAD5B;OAAJ;;MAGI,CAAA,GAAI,IAAI,CAAC,IAAL,CAAU,IAAV,EAHR;;MAKI,KAAA,QAAA;mBAAA;;QAAA,GAAG,CAAC,KAAK,CAAC,IAAV,CAAe,CAAf,EAAkB,CAAlB,EAAqB,CAArB;MAAA;MACA,CAAA,GAAI,IAAI,GAAG,CAAC,KAAK,CAAC,YAAd,CAA2B;QAAE,MAAA,EAAQ,CAAV;QAAa,OAAA,EAAS;MAAtB,CAA3B;AACJ,aAAO;IARK,CAdhB;;;IAyBE,mBAAqB,CAAE,IAAF,EAAQ,KAAR,CAAA;aAAmB,CAAC,CAAC,MAAF,CAAS,IAAT,EAAe,CAAE,CAAF,CAAA,GAAA;AACzD,YAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;QAAI,KAAA,uCAAA;;UACE,IAAgB,CAAE,CAAA,GAAI,CAAA,CAAE,CAAF,CAAN,CAAA,KAAe,KAA/B;AAAA,mBAAO,MAAP;;UACA,IAAgB,CAAA,KAAK,IAArB;AAAA,mBAAO,EAAP;;QAFF;AAGA,eAAO;MAJ8C,CAAf;IAAnB;;EA3BvB,EAxCA;;;EA2EA,IAAC,CAAA,YAAD,GAAgB;AA3EhB",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ debug\n  warn\n  urge\n  help }                  = GUY.trm.get_loggers 'INTERTYPE'\n{ rpr }                   = GUY.trm\n#...........................................................................................................\nE                         = require './errors'\nH                         = require './helpers'\n\n###\n\nUser-facing constraints on `Type_factory::constructor cfg`\n\nConstraints on `Type_factory::constructor cfg` after normalization:\n\n* exactly one of `type:function`, `types:list.of.function.or.object.of.function` must be given\n\n* if `type` is **not** given:\n\n  * if `types` does not contain a function named `$` (called the 'own-type declaration'), it will be created\n    as `$: ( x ) -> @isa.object x`, meaning the type declared implicitly describes an object. This typetest\n    will be prepended to any other declarations.\n\n  * The above entails that we may declare a type as\n      * `declare.t { tests: [], }` or\n      * `declare.t { tests: {}, }`\n    to obtain the same effect as\n      * `declare.t 'object'` or\n      * `declare.t ( x ) -> @isa.object x`\n\n* if `type` **is** given:\n\n###\n\n#===========================================================================================================\nclass Type_factory extends H.Intertype_abc\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( hub ) ->\n    super()\n    @hub = hub\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  create_type: ( cfg ) ->\n    ### normalization of `cfg`, i.e. reducing the different allowed shapes to a single one ###\n    H.types.validate.Type_cfg_constructor_cfg_NG cfg = { H.defaults.Type_cfg_constructor_cfg_NG..., cfg..., }\n    test = ( GUY.props.pluck_with_fallback cfg, null, 'test' ).test\n    return @_create_type test, cfg\n\n  #---------------------------------------------------------------------------------------------------------\n  _create_type: ( test, cfg ) ->\n    if test?  then  cfg.tests = []\n    else            test      = @_create_test_walker cfg.name, cfg.tests\n    #.......................................................................................................\n    R = test.bind @\n    ### NOTE `hide()` uses `Object.defineProperty()`, so takes care of `name`: ###\n    GUY.props.hide R, k, v for k, v of cfg # when not GUY.props.has R, k\n    R = new GUY.props.Strict_owner { target: R, oneshot: true, }\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _create_test_walker: ( name, tests ) -> H.nameit name, ( x ) =>\n    for f in tests\n      return false if ( R = f x ) is false\n      return R unless R is true\n    return true\n\n\n############################################################################################################\n@Type_factory = Type_factory\n\n"
  ]
}