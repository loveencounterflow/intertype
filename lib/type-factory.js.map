{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/type-factory.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ debug\n  warn\n  urge\n  help }                  = GUY.trm.get_loggers 'INTERTYPE'\n{ rpr }                   = GUY.trm\n#...........................................................................................................\nE                         = require './errors'\nH                         = require './helpers'\n\n\n\n\n#===========================================================================================================\nclass Type_factory extends H.Intertype_abc\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( hub ) ->\n    super()\n    @hub = hub\n    @cfg = GUY.lft.freeze { rename: [ 'isa', '', ], }\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _validate_name: ( name ) ->\n    return name if H.types.isa.nonempty_text name\n    throw new E.Intertype_ETEMPTBD '^tf@1^', \\\n      \"expected a nonempty text for new type name, got #{rpr name}\"\n\n  #---------------------------------------------------------------------------------------------------------\n  _validate_dsc: ( dsc ) ->\n    return dsc            if H.types.isa.object         dsc\n    return { isa: dsc, }  if H.types.isa.function       dsc\n    return { isa: dsc, }  if H.types.isa.nonempty_text  dsc\n    throw new E.Intertype_ETEMPTBD '^tf@2^', \\\n      \"expected an object, a function or a nonempty text for type description, got #{rpr dsc}\"\n\n  #---------------------------------------------------------------------------------------------------------\n  _validate_isa: ( isa ) ->\n    return isa  if H.types.isa.function       isa\n    return isa  if H.types.isa.nonempty_text  isa\n    throw new E.Intertype_ETEMPTBD '^tf@3^', \\\n      \"expected a function or a nonempty text for `isa`, got #{rpr isa}\"\n\n  #---------------------------------------------------------------------------------------------------------\n  _normalize_type_cfg: ( P... ) ->\n    name  = null\n    dsc   = {}   ### short for type DeSCription ###\n    isa   = null\n    #.......................................................................................................\n    switch arity = P.length\n      when 1\n        if H.types.isa.text P[ 0 ] then name  = @_validate_name P[ 0 ]\n        else                            dsc   = @_validate_dsc  P[ 0 ]\n      when 2\n        name    = @_validate_name P[ 0 ]\n        dsc     = @_validate_dsc  P[ 1 ]\n      when 3\n        name    = @_validate_name P[ 0 ]\n        dsc     = @_validate_dsc  P[ 1 ]\n        isa     = @_validate_isa  P[ 2 ]\n      else\n        throw new E.Intertype_ETEMPTBD '^tf@4^', \"expected between 1 and 3 arguments, got #{arity}\"\n    #.......................................................................................................\n    if isa?\n      if GUY.props.has dsc, 'isa'\n        throw new E.Intertype_ETEMPTBD '^tf@5^', \"got two conflicting values for `isa`\"\n      dsc.isa   = isa\n    #.......................................................................................................\n    if name?\n      if GUY.props.has dsc, 'name'\n        throw new E.Intertype_ETEMPTBD '^tf@6^', \"got two conflicting values for `name`\"\n      dsc.name  = name\n    #.......................................................................................................\n    ### Re-assemble fields in `fields` property, delete `$`-prefixed keys ###\n    ### TAINT should validate values of `$`-prefixed keys are either function or non-empty strings ###\n    fields = dsc.fields ? null\n    for key, value of dsc\n      continue unless key.startsWith '$'\n      if key is '$'\n        throw new E.Intertype_ETEMPTBD '^tf@7^', \"found illegal key '$'\"\n      nkey    = key[ 1 .. ]\n      fields ?= {}\n      if fields[ key ]?\n        throw new E.Intertype_ETEMPTBD '^tf@8^', \"found duplicate key #{rpr key}\"\n      delete dsc[ key ]\n      fields[ nkey ] = value\n    #.......................................................................................................\n    if fields?\n      dsc.fields  = fields\n      dsc.isa    ?= 'object'\n    #.......................................................................................................\n    if dsc.isa?\n      if H.types.isa.text dsc.isa\n        dsc.isa     = @_test_from_hedgepath dsc.isa\n      name_of_isa = if dsc.isa.name in @cfg.rename then '#0' else dsc.isa.name\n      dsc.isa     = H.nameit \"#{dsc.name}:#{name_of_isa}\", dsc.isa.bind @hub\n    #.......................................................................................................\n    dsc = { H.defaults.Type_factory_type_dsc..., dsc..., }\n    H.types.validate.Type_factory_type_dsc  dsc\n    #.......................................................................................................\n    return dsc\n\n  #---------------------------------------------------------------------------------------------------------\n  create_type: ( P... ) ->\n    dsc     = @_normalize_type_cfg P...\n    #.......................................................................................................\n    # cfg.tests  ?= [] ### TAINT move this to normalization ###\n    # R           = R.bind @\n    # ### NOTE `hide()` uses `Object.defineProperty()`, so takes care of `name`: ###\n    GUY.props.hide R, k, v for k, v of cfg # when not GUY.props.has R, k\n    R = new GUY.props.Strict_owner { target: R, oneshot: true, }\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _test_from_hedgepath: ( hedgepath ) ->\n    hedges = hedgepath.split @hub.cfg.sep\n    H.nameit hedgepath, ( x ) -> @_isa hedges..., x\n\n  #---------------------------------------------------------------------------------------------------------\n  _create_test_walker: ( tests ) -> ( x ) =>\n    for f in tests\n      return false if ( R = f x ) is false\n      return R unless R is true\n    return true\n\n\n############################################################################################################\n@Type_factory = Type_factory\n\n"
  ]
}