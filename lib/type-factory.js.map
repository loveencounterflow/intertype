{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/type-factory.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ debug\n  warn\n  urge\n  help }                  = GUY.trm.get_loggers 'INTERTYPE/TYPE_FACTORY'\n{ rpr }                   = GUY.trm\n#...........................................................................................................\nE                         = require './errors'\nH                         = require './helpers'\n\n\n\n\n#===========================================================================================================\nclass Type_factory extends H.Intertype_abc\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( hub ) ->\n    super()\n    @hub = hub\n    @cfg = GUY.lft.freeze { rename: [ 'isa', '', ], }\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _validate_name: ( name ) ->\n    return name if H.types.isa.nonempty_text name\n    throw new E.Intertype_ETEMPTBD '^tf@1^', \\\n      \"expected a nonempty text for new type name, got #{rpr name}\"\n\n  #---------------------------------------------------------------------------------------------------------\n  _validate_dsc: ( dsc ) ->\n    return dsc            if H.types.isa.object         dsc\n    return { isa: dsc, }  if H.types.isa.function       dsc\n    return { isa: dsc, }  if H.types.isa.nonempty_text  dsc\n    throw new E.Intertype_ETEMPTBD '^tf@2^', \\\n      \"expected an object, a function or a nonempty text for type description, got #{rpr dsc}\"\n\n  #---------------------------------------------------------------------------------------------------------\n  _validate_isa: ( isa ) ->\n    return isa  if H.types.isa.function       isa\n    return isa  if H.types.isa.nonempty_text  isa\n    throw new E.Intertype_ETEMPTBD '^tf@3^', \\\n      \"expected a function or a nonempty text for `isa`, got #{rpr isa}\"\n\n  #---------------------------------------------------------------------------------------------------------\n  _normalize_type_cfg: ( P... ) ->\n    name  = null\n    dsc   = {}   ### short for type DeSCription ###\n    isa   = null\n    #.......................................................................................................\n    switch arity = P.length\n      when 1\n        if H.types.isa.text P[ 0 ] then dsc   = { name: P[ 0 ], }\n        else                            dsc   = @_validate_dsc  P[ 0 ]\n      when 2\n        name    = @_validate_name P[ 0 ]\n        dsc     = @_validate_dsc  P[ 1 ]\n      when 3\n        name    = @_validate_name P[ 0 ]\n        dsc     = @_validate_dsc  P[ 1 ]\n        isa     = @_validate_isa  P[ 2 ]\n      else\n        throw new E.Intertype_ETEMPTBD '^tf@4^', \"expected between 1 and 3 arguments, got #{arity}\"\n    #.......................................................................................................\n    if isa?\n      if GUY.props.has dsc, 'isa'\n        throw new E.Intertype_ETEMPTBD '^tf@5^', \"got two conflicting values for `isa`\"\n      dsc.isa   = isa\n    #.......................................................................................................\n    if name? and ( dsc_name = GUY.props.get dsc, 'name', null )? and ( dsc_name isnt name )\n      throw new E.Intertype_ETEMPTBD '^tf@6^', \\\n        \"got two conflicting values for `name` (#{rpr name} and #{rpr dsc_name})\"\n    dsc.name     ?= name\n    dsc.typename  = dsc.name\n    #.......................................................................................................\n    @_assemble_fields dsc\n    #.......................................................................................................\n    if dsc.isa?\n      if H.types.isa.text dsc.isa\n        dsc.isa     = @_test_from_hedgepath dsc.isa\n      name_of_isa = if dsc.isa.name in @cfg.rename then '#0' else dsc.isa.name\n      dsc.isa     = H.nameit \"#{dsc.name}:#{name_of_isa}\", do =>\n        f = dsc.isa.bind @hub\n        return ( x ) =>\n          @hub.state.x = x if @hub.state.isa_depth < 2\n          R = do =>\n            try\n              return f x\n            catch error\n              throw error if @hub.cfg.errors or error instanceof E.Intertype_error\n              @hub.state.error = error\n            return false\n          @hub.push_hedgeresult [ '▲nt2', @hub.state.isa_depth, dsc.name, x, R ]\n          return R\n          # return if ( @hub.state.verb is 'validate' ) and ( @hub.state.hedges.length is 1 ) then x else R\n    #.......................................................................................................\n    dsc = { H.defaults.Type_factory_type_dsc..., dsc..., }\n    H.types.validate.Type_factory_type_dsc  dsc\n    #.......................................................................................................\n    return dsc\n\n  #---------------------------------------------------------------------------------------------------------\n  _assemble_fields: ( dsc ) ->\n    ### Re-assemble fields in `fields` property, delete `$`-prefixed keys ###\n    fields = dsc.fields ? null\n    for key, field_dsc of dsc\n      continue unless key.startsWith '$'\n      if key is '$'\n        throw new E.Intertype_ETEMPTBD '^tf@7^', \"found illegal key '$'\"\n      nkey    = key[ 1 .. ]\n      fields ?= {}\n      if fields[ key ]?\n        throw new E.Intertype_ETEMPTBD '^tf@8^', \"found duplicate key #{rpr key}\"\n      delete dsc[ key ]\n      fields[ nkey ] = field_dsc\n    #.......................................................................................................\n    if fields?\n      dsc.fields  = fields\n      dsc.isa    ?= 'object'\n    #.......................................................................................................\n    if dsc.fields?\n      nr = 0\n      unless H.types.isa.object dsc.fields\n        throw new E.Intertype_ETEMPTBD '^tf@8^', \\\n          \"expected an object for `field` property, got a #{rpr H.types.type_of dsc.fields}\"\n      for fieldname, field_dsc of dsc.fields\n        if ( H.types.type_of field_dsc ) is 'text'\n          hedges    = @hub._split_hedgerow_text field_dsc\n          field_dsc = do ( fieldname, field_dsc, hedges ) =>\n            H.nameit field_dsc, ( x ) -> @_isa hedges..., x[ fieldname ]\n        if ( type = H.types.type_of field_dsc ) is 'function'\n          nr++\n          name_of_isa = if field_dsc.name in @cfg.rename then '#{nr}' else field_dsc.name\n          dsc.fields[ fieldname ] = H.nameit \"#{dsc.name}.#{fieldname}:#{name_of_isa}\", field_dsc.bind @hub\n        else\n          throw new E.Intertype_ETEMPTBD '^tf@8^', \"expected a text or a function for field description, got a #{rpr type}\"\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  create_type: ( P... ) ->\n    dsc         = @_normalize_type_cfg P...\n    if dsc.fields?\n      name    = dsc.isa.name\n      R       = ( @_create_test_walker dsc ).bind dsc\n    else\n      name    = dsc.name\n      R       = dsc.isa\n      dsc.isa = null\n    GUY.props.hide R, k, v for k, v of dsc when k isnt 'name'\n    H.nameit name, R\n    R = GUY.props.Strict_owner.create { target: R, oneshot: true, }\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _test_from_hedgepath: ( hedgepath ) ->\n    hedges = @hub._split_hedgerow_text hedgepath\n    hedges = hedgepath.split @hub.cfg.sep\n    H.nameit hedgepath, ( x ) -> @_isa hedges..., x\n\n  #---------------------------------------------------------------------------------------------------------\n  _create_test_walker: ( dsc ) ->\n    has_extras  = null\n    hub         = @hub\n    if ( test_for_extras = not dsc.extras )\n      has_extras = @_create_has_extras dsc\n    #.......................................................................................................\n    return ( x ) ->\n      R = do =>\n        #.....................................................................................................\n        hub.state.isa_depth++\n        R = @isa x\n        # debug '^767-1^', dsc\n        # debug '^767-1^', hub.state\n        # debug '^767-1^', { x, R, }\n        hub.push_hedgeresult [ '▲tw2', hub.state.isa_depth - 1, @isa.name, x, R, ]\n        if ( R is false ) or ( R isnt true )\n          hub.state.isa_depth--; return R\n        #.....................................................................................................\n        if test_for_extras\n          if has_extras x\n            ### TAINT return value, recorded value should both be `false` ###\n            # debug '^767-2^', dsc, x\n            hub.push_hedgeresult [ '▲tw3', hub.state.isa_depth, has_extras.name, x, true, ]\n            hub.state.isa_depth--; return false\n        #.....................................................................................................\n        for _, f of @fields\n          R = f x\n          # debug '^767-3^', dsc, x\n          hub.push_hedgeresult [ '▲tw5', hub.state.isa_depth, f.name, x, R, ]\n          if ( R is false ) or ( R isnt true )\n            hub.state.isa_depth--; return R\n        #.....................................................................................................\n        hub.state.isa_depth--\n        return true\n      return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _create_has_extras: ( dsc ) ->\n    default_keys = new Set Object.keys dsc.default\n    R = ( x ) ->\n      x_keys = new Set Object.keys x\n      if ( extra_keys = GUY.sets.subtract x_keys, default_keys ).size isnt 0\n        @state.extra_keys = [ extra_keys..., ]\n        return true\n      return false\n    return H.nameit \"#{dsc.name}:has_extras\", R.bind @hub\n\n\n############################################################################################################\n@Type_factory = Type_factory\n\n"
  ]
}