{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/helpers.coffee"
  ],
  "names": [],
  "mappings": "AAEA;EAAA;AAAA,MAAA,OAAA,EAAA,GAAA;IAAA,oBAAA;;;EAGA,CAAA,CAAE,OAAF,CAAA,GAAgB,OAAA,CAAQ,MAAR,CAAhB;;EACA,IAAC,CAAA,MAAD,GAAgB,MAAM,CAAC,OAJvB;;;EAMA,IAAC,CAAA,GAAD,GAAgB,GAAA,GAAM,CAAE,OAAA,CAAQ,aAAR,CAAF,CAAyB,CAAC;;EAChD,IAAC,CAAA,IAAD,GAAgB,QAAA,CAAE,CAAF,CAAA;WAAS,CAAE,GAAA,CAAI,CAAJ,CAAF,CAAS;EAAlB,EAPhB;;;;;EAYA,IAAC,CAAA,uBAAD,GAA4B,QAAA,CAAE,CAAF,CAAA;AAAQ,QAAA,GAAA,EAAA;4GAAwB;EAAhC;;EAC5B,IAAC,CAAA,kBAAD,GAA4B,QAAA,CAAE,CAAF,CAAA;WAAS,CAAE,MAAM,CAAA,SAAE,CAAA,QAAQ,CAAC,IAAjB,CAAsB,CAAtB,CAAF,CAA2B,CAAC,KAA5B,CAAkC,CAAlC,EAAqC,CAAC,CAAtC;EAAT,EAb5B;;;EAeA,IAAC,CAAA,UAAD,GAAgB,QAAA,CAAE,CAAF,CAAA;WAAS,CAAE,CAAE,MAAM,CAAA,SAAE,CAAA,QAAQ,CAAC,IAAjB,CAAsB,CAAtB,CAAF,CAA2B,CAAC,KAA5B,CAAkC,CAAlC,EAAqC,CAAC,CAAtC,CAAF,CAA2C,CAAC,WAA5C,CAAA,CAAyD,CAAC,OAA1D,CAAkE,MAAlE,EAA0E,EAA1E;EAAT,EAfhB;;;;;EAqBA,IAAC,CAAA,gBAAD,GAAoB,QAAA,CAAE,IAAF,CAAA,EAAA;;AACpB,QAAA,WAAA,EAAA;IACE,WAAA;AAAc,cAAO,IAAI,CAAC,MAAZ;AAAA,aACP,CADO;iBACA;AADA,aAEP,CAFO;iBAEA,CAAA,CAAA,CAAG,GAAA,CAAI,IAAI,CAAE,CAAF,CAAR,CAAH,CAAA;AAFA;iBAGP,CAAA,CAAA,CAAG,GAAA,CAAI,IAAJ,CAAH,CAAA;AAHO;;IAId,YAAA;AAAe,cAAO,WAAW,CAAC,MAAnB;AAAA,aACR,CADQ;iBACD;AADC;iBAER,GAAA,GAAM;AAFE;;AAGf,WAAO,CAAE,WAAF,EAAe,YAAf;EATW,EArBpB;;;EAiCA,IAAC,CAAA,eAAD,GAAmB,QAAA,CAAE,CAAF,EAAK,CAAL,CAAA;AACnB,QAAA;IAAE,CAAA,GAAI,CAAE,GAAA,CAAF,CAAS,CAAC,IAAV,CAAA;IACJ,CAAA,GAAI,CAAE,GAAA,CAAF,CAAS,CAAC,IAAV,CAAA;AACJ,WAAO;;AAAE;MAAA,KAAA,mCAAA;;yBAAuB,GAAL;uBAAlB;;MAAA,CAAA;;QAAF,CAA4B,CAAC,IAA7B,CAAA;EAHU;AAjCnB",
  "sourcesContent": [
    "\n\n'use strict'\n\n#-----------------------------------------------------------------------------------------------------------\n{ inspect, }  = require 'util'\n@assign       = Object.assign\n# @jr           = JSON.stringify\n@rpr          = rpr = ( require '../loupe.js' ).inspect\n@xrpr         = ( x ) -> ( rpr x )[ .. 1024 ]\n\n#===========================================================================================================\n# TYPE_OF FLAVORS\n#-----------------------------------------------------------------------------------------------------------\n@domenic_denicola_device  = ( x ) -> x?.constructor?.name ? './.'\n@mark_miller_device       = ( x ) -> ( Object::toString.call x ).slice 8, -1\n# @mark_miller_device       = ( x ) -> ( ( Object::toString.call x ).slice 8, -1 ).toLowerCase().replace /\\s+/g, ''\n@js_type_of   = ( x ) -> ( ( Object::toString.call x ).slice 8, -1 ).toLowerCase().replace /\\s+/g, ''\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@get_rprs_of_tprs = ( tprs ) ->\n  ### `tprs: test parameters, i.e. additional arguments to type tester, as in `multiple_of x, 4` ###\n  rpr_of_tprs = switch tprs.length\n    when 0 then ''\n    when 1 then \"#{rpr tprs[ 0 ]}\"\n    else \"#{rpr tprs}\"\n  srpr_of_tprs = switch rpr_of_tprs.length\n    when 0 then ''\n    else ' ' + rpr_of_tprs\n  return { rpr_of_tprs, srpr_of_tprs, }\n\n#-----------------------------------------------------------------------------------------------------------\n@intersection_of = ( a, b ) ->\n  a = [ a..., ].sort()\n  b = [ b..., ].sort()\n  return ( x for x in a when x in b ).sort()\n"
  ]
}