{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/helpers.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n#-----------------------------------------------------------------------------------------------------------\nGUY                       = require 'guy'\n{ debug\n  info\n  warn\n  urge\n  help }                  = GUY.trm.get_loggers 'INTERTYPE'\n{ rpr }                   = GUY.trm\nmisfit                    = Symbol 'misfit'\nnotavalue                 = Symbol 'notavalue'\nE                         = require './errors'\n{ to_width\n  width_of  }             = require 'to-width'\n### TAINT unify with symbols in `hedges` ###\n@misfit                   = Symbol 'misfit'\n#...........................................................................................................\n@constructor_of_generators  = ( ( -> yield 42 )() ).constructor\n@deep_copy                  = structuredClone\n@nameit                     = ( name, f ) -> Object.defineProperty f, 'name', { value: name, }\nidf                         = ( x ) -> x ### IDentity Function ###\n@equals                     = @nameit 'equals', require '../deps/jkroso-equals'\n\n\n#===========================================================================================================\n# TYPE_OF FLAVORS\n#-----------------------------------------------------------------------------------------------------------\n@domenic_denicola_device  = ( x ) => x?.constructor?.name ? './.'\n@mark_miller_device       = ( x ) => ( Object::toString.call x ).slice 8, -1\n@mark_miller_device_2     = ( x ) => ( ( Object::toString.call x ).slice 8, -1 ).toLowerCase().replace /\\s+/g, ''\n@js_type_of               = ( x ) => Object::toString.call x\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@get_rprs_of_tprs = ( tprs ) ->\n  ### `tprs: test parameters, i.e. additional arguments to type tester, as in `multiple_of x, 4` ###\n  rpr_of_tprs = switch tprs.length\n    when 0 then ''\n    when 1 then \"#{rpr tprs[ 0 ]}\"\n    else \"#{rpr tprs}\"\n  srpr_of_tprs = switch rpr_of_tprs.length\n    when 0 then ''\n    else ' ' + rpr_of_tprs\n  return { rpr_of_tprs, srpr_of_tprs, }\n\n#-----------------------------------------------------------------------------------------------------------\n@intersection_of = ( a, b ) ->\n  a = [ a..., ].sort()\n  b = [ b..., ].sort()\n  return ( x for x in a when x in b ).sort()\n\n#---------------------------------------------------------------------------------------------------------\n@size_of = ( x, fallback = misfit ) ->\n  return R unless ( R = GUY.props.get x, 'length',  notavalue ) is notavalue\n  return R unless ( R = GUY.props.get x, 'size',    notavalue ) is notavalue\n  return fallback unless fallback is misfit\n  throw new E.Intertype_ETEMPTBD '^intertype.size_of@1^', \\\n    \"expected an object with `x.length` or `x.size`, got a #{@type_of x} with neither\"\n\n#---------------------------------------------------------------------------------------------------------\n@signals = GUY.lft.freeze new GUY.props.Strict_owner target:\n  return_true:            Symbol 'return_true'\n  advance:                Symbol 'advance'\n  # element_mode:           Symbol 'element_mode'\n  nothing:                Symbol 'nothing'\n\n#-----------------------------------------------------------------------------------------------------------\n@type_of = ( x ) ->\n  throw new Error \"^7746^ expected 1 argument, got #{arity}\" unless ( arity = arguments.length ) is 1\n  return 'null'       if x is null\n  return 'undefined'  if x is undefined\n  return 'infinity'   if ( x is Infinity  ) or  ( x is -Infinity  )\n  return 'boolean'    if ( x is true      ) or  ( x is false      )\n  return 'nan'        if ( Number.isNaN     x )\n  return 'float'      if ( Number.isFinite  x )\n  return 'buffer'     if ( Buffer.isBuffer  x )\n  return 'list'       if ( Array.isArray  x )\n  #.........................................................................................................\n  ### TAINT Not needed (?) b/c `@js_type_of x` does work with these values, too ###\n  ### this catches `Array Iterator`, `String Iterator`, `Map Iterator`, `Set Iterator`: ###\n  if ( tagname = x[ Symbol.toStringTag ] )? and ( typeof tagname ) is 'string'\n    return @_normalize_type tagname\n  #.........................................................................................................\n  ### Domenic Denicola Device, see https://stackoverflow.com/a/30560581 ###\n  return 'nullobject' if ( c = x.constructor ) is undefined\n  return 'object'     if ( typeof c ) isnt 'function'\n  if ( R = c.name.toLowerCase() ) is ''\n    return 'generator' if x.constructor is @constructor_of_generators\n    ### NOTE: throw error since this should never happen ###\n    return ( ( Object::toString.call x ).slice 8, -1 ).toLowerCase() ### Mark Miller Device ###\n  #.........................................................................................................\n  return 'wrapper'  if ( typeof x is 'object' ) and R in [ 'boolean', 'number', 'string', ]\n  return 'regex'    if R is 'regexp'\n  return 'text'     if R is 'string'\n  ### thx to https://stackoverflow.com/a/29094209 ###\n  ### TAINT may produce an arbitrarily long throwaway string ###\n  return 'class'    if R is 'function' and x.toString().startsWith 'class '\n  return R\n\n\n#===========================================================================================================\n# INTERNAL TYPES\n#-----------------------------------------------------------------------------------------------------------\n@types                    = new ( require 'intertype-legacy' ).Intertype()\n@defaults                 = {}\n\n#-----------------------------------------------------------------------------------------------------------\n@types.declare 'deep_boolean', ( x ) -> x in [ 'deep', false, true, ]\n\n#-----------------------------------------------------------------------------------------------------------\n@types.declare 'Type_cfg_constructor_cfg', tests:\n  \"@isa.object x\":                            ( x ) -> @isa.object x\n  \"@isa.nonempty_text x.name\":                ( x ) -> @isa.nonempty_text x.name\n  # \"@isa.deep_boolean x.copy\":                 ( x ) -> @isa.boolean x.copy\n  # \"@isa.boolean x.seal\":                      ( x ) -> @isa.boolean x.seal\n  \"@isa.deep_boolean x.freeze\":               ( x ) -> @isa.deep_boolean x.freeze\n  \"@isa.boolean x.extras\":                    ( x ) -> @isa.boolean x.extras\n  \"if extras is false, default must be an object\": \\\n    ( x ) -> ( x.extras ) or ( @isa.object x.default )\n  \"@isa_optional.function x.create\":          ( x ) -> @isa_optional.function x.create\n  ### TAINT might want to check for existence of `$`-prefixed keys in case of `( not x.test? )` ###\n  ### TAINT should validate values of `$`-prefixed keys are either function or non-empty strings ###\n  \"x.test is an optional function or non-empty list of functions\": ( x ) ->\n    return true unless x.test?\n    return true if @isa.function x.test\n    return false unless @isa_list_of.function x.test\n    return false if x.test.length is 0\n    return true\n  \"x.groups is deprecated\": ( x ) -> not x.groups?\n  \"@isa.boolean x.collection\": ( x ) -> @isa.boolean x.collection\n#...........................................................................................................\n@defaults.Type_cfg_constructor_cfg =\n  name:             null\n  test:             null\n  ### `default` omitted on purpose ###\n  create:           null\n  # copy:             false\n  # seal:             false\n  freeze:           false\n  extras:           true\n  collection:       false\n\n#-----------------------------------------------------------------------------------------------------------\n@types.declare 'Type_factory_type_dsc', tests:\n  #.........................................................................................................\n  ### for later / under consideration ###\n  # \"@isa.deep_boolean x.copy\":                       ( x ) -> @isa.boolean x.copy        # refers to result of `type.create()`\n  # \"@isa.boolean x.seal\":                            ( x ) -> @isa.boolean x.seal        # refers to result of `type.create()`\n  # \"@isa.boolean x.oneshot\":                         ( x ) -> @isa.boolean x.oneshot        # refers to result of `type.create()`\n  # \"@isa.deep_boolean x.freeze\":                     ( x ) -> @isa.deep_boolean x.freeze   # refers to result of `type.create()`\n  #.........................................................................................................\n  \"@isa.object x\":                                  ( x ) -> @isa.object x\n  \"@isa.nonempty_text x.name\":                      ( x ) -> @isa.nonempty_text x.name\n  \"@isa.nonempty_text x.typename\":                  ( x ) -> @isa.nonempty_text x.typename\n  \"@isa.boolean x.collection\":                      ( x ) -> @isa.boolean x.collection\n  \"@isa.function x.isa\":                            ( x ) -> @isa.function x.isa\n  \"@isa optional list.of.function x.fields\":        ( x ) ->\n    return true unless @isa.list x.fields\n    return @isa_list_of.function x.fields\n  \"@isa.boolean x.extras\":                          ( x ) -> @isa.boolean x.extras        # refers to result of `type.create()`\n  \"if extras is false, default must be an object\":  ( x ) -> ( x.extras ) or ( @isa.object x.default )\n  \"@isa_optional.function x.create\":                ( x ) -> @isa_optional.function x.create\n#...........................................................................................................\n@defaults.Type_factory_type_dsc =\n  name:             null\n  typename:         null\n  isa:              null\n  fields:           null\n  collection:       false\n  ### `default` omitted on purpose ###\n  create:           null      # refers to result of `type.create()`\n  # copy:             false     # refers to result of `type.create()`\n  # seal:             false     # refers to result of `type.create()`\n  freeze:           false     # refers to result of `type.create()`\n  extras:           true      # refers to result of `type.create()`\n\n#-----------------------------------------------------------------------------------------------------------\n@types.declare 'Intertype_iterable', ( x ) -> x? and x[ Symbol.iterator ]?\n\n#-----------------------------------------------------------------------------------------------------------\n@types.declare 'Intertype_constructor_cfg', tests:\n  \"@isa.object x\":                            ( x ) -> @isa.object x\n  \"@isa_optional.nonempty_text x.sep\":        ( x ) -> @isa_optional.nonempty_text x.sep\n  \"x.errors in [ false, 'throw', ]\":          ( x ) -> x.errors in [ false, 'throw', ]\n#...........................................................................................................\n@defaults.Intertype_constructor_cfg =\n  sep:              '.'\n  errors:           false\n\n#-----------------------------------------------------------------------------------------------------------\n@types.declare 'intertype_color', ( x ) ->\n  return true   if      @isa.function       x\n  return true   if      @isa.boolean        x\n  return false  unless  @isa.nonempty_text  x\n  return false  unless  @isa.function       GUY.trm[ x ]\n  return true\n\n#-----------------------------------------------------------------------------------------------------------\n@types.declare 'intertype_state_report_colors', tests:\n  \"@isa.object x\":                            ( x ) -> @isa.object x\n  \"@isa.intertype_color x.ref\":               ( x ) -> @isa.intertype_color x.ref\n  \"@isa.intertype_color x.value\":             ( x ) -> @isa.intertype_color x.value\n  \"@isa.intertype_color x.true\":              ( x ) -> @isa.intertype_color x.true\n  \"@isa.intertype_color x.false\":             ( x ) -> @isa.intertype_color x.false\n  \"@isa.intertype_color x.hedge\":             ( x ) -> @isa.intertype_color x.hedge\n  \"@isa.intertype_color x.verb\":              ( x ) -> @isa.intertype_color x.verb\n  \"@isa.intertype_color x.arrow\":             ( x ) -> @isa.intertype_color x.arrow\n  \"@isa.intertype_color x.error\":             ( x ) -> @isa.intertype_color x.error\n  \"@isa.intertype_color x.reverse\":           ( x ) -> @isa.intertype_color x.reverse\n#...........................................................................................................\n@defaults.intertype_state_report_colors = GUY.lft.freeze\n  ref:            'grey'\n  value:          'lime'\n  true:           'green'\n  false:          'red'\n  hedge:          'blue'\n  verb:           'gold'\n  arrow:          'white'\n  error:          'red'\n  reverse:        'reverse'\n#...........................................................................................................\n@defaults.intertype_state_report_no_colors = GUY.lft.freeze\n  ref:            idf\n  value:          idf\n  true:           idf\n  false:          idf\n  hedge:          idf\n  verb:           idf\n  arrow:          idf\n  error:          idf\n  reverse:        idf\n\n#-----------------------------------------------------------------------------------------------------------\n@types.declare 'intertype_get_state_report_cfg', tests:\n  \"@isa.object x\":                              ( x ) -> @isa.object x\n  \"x.format in [ 'all', 'failing', 'short' ]\":  ( x ) -> x.format in [ 'all', 'failing', 'short' ]\n  \"@isa.boolean x.refs\":                        ( x ) -> @isa.boolean x.refs\n  \"@isa_optional.positive_integer x.width\":     ( x ) -> @isa_optional.positive_integer x.width\n  \"( @isa.boolean x.colors ) or ( @isa.intertype_state_report_colors )\": \\\n    ( x ) -> ( @isa.boolean x.colors ) or ( @isa.intertype_state_report_colors )\n#...........................................................................................................\n@defaults.intertype_get_state_report_cfg =\n  colors:         @defaults.intertype_state_report_colors\n  format:         'failing'\n  width:          null\n  refs:           false\n\n#-----------------------------------------------------------------------------------------------------------\n@defaults.Intertype_state =\n  method:         null\n  verb:           null\n  isa_depth:      0\n  hedgerow:       null\n  hedges:         null\n  hedgeresults:   null\n  x:              misfit\n  result:         null\n  error:          null\n  extra_keys:     null\n  data:           null\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nclass Intertype_abc extends GUY.props.Strict_owner\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n# @defaults       = GUY.lft.freeze @defaults\n@Intertype_abc  = Intertype_abc\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@_get_state_report_colors = ( colors ) ->\n  return @defaults.intertype_state_report_colors    if colors is true\n  return @defaults.intertype_state_report_no_colors if colors is false\n  R = {}\n  for purpose, color of colors\n    continue if @types.isa.function color\n    switch color\n      when true   then  R[ purpose ] = GUY.trm[ @defaults.intertype_state_report_colors[ color ] ].bind GUY.trm\n      when false  then  R[ purpose ] = idf\n      else              R[ purpose ] = GUY.trm[ color ].bind GUY.trm\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@get_state_report = ( hub, cfg ) ->\n  @types.validate.intertype_get_state_report_cfg ( cfg = { @defaults.intertype_get_state_report_cfg..., cfg..., } )\n  C = @_get_state_report_colors cfg.colors\n  #.........................................................................................................\n  TTY               = require 'node:tty'\n  truth             = ( b, r ) -> C.reverse if b then ( C.true \" T \" ) else ( C.false \" F \" )\n  first_hidx        = 0\n  last_hidx         = hub.state.hedgeresults.length - 1\n  #.........................................................................................................\n  R                 = []\n  sep               = ''\n  widths            = do ->\n    lw                = cfg.width ? if ( TTY.isatty process.stdout.fd ) then process.stdout.columns else 100\n    widths            = {}\n    widths.line       = lw\n    lw               -= widths.ref      = if cfg.refs then 5 else 0\n    lw               -= widths.verb     = 10\n    lw               -= widths.truth    = 3\n    lw               -= widths.hedgerow = Math.floor lw / 3\n    lw               -= widths.value    = lw\n    return widths\n  #.........................................................................................................\n  switch cfg.format\n    when 'all'\n      null\n    when 'failing', 'short'\n      return null if hub.state.result is true\n      first_hidx = last_hidx\n      while first_hidx > 0\n        break if ( hub.state.hedgeresults[ first_hidx - 1 ].at -1 ) isnt false\n        first_hidx--\n      first_hidx = Math.min first_hidx, last_hidx\n    else throw new E.Intertype_internal_error '^intertype.get_state_report@1^', \"unknown format #{rpr format}\"\n  #.........................................................................................................\n  switch cfg.format\n    when 'short'\n      verb_field        = C.reverse C.verb \" #{hub.state.verb} \"\n      arrow_field       = C.reverse C.arrow \" ◀ \"\n    else\n      verb_field        = C.reverse C.verb to_width hub.state.verb, widths.verb, { align: 'center', }\n      arrow_field       = null\n  #.........................................................................................................\n  push_value_row = ( ref, level, hedge, value, r ) ->\n    dent  = '  '.repeat level\n    R.push C.reverse C.ref    to_width  ( ref ? ''            ), widths.ref if cfg.refs\n    R.push truth r, r?.toString()\n    R.push verb_field\n    R.push C.reverse C.hedge  to_width  ( ' ' + dent + hedge  ), widths.hedgerow\n    R.push C.reverse C.value  to_width  ( ' ' + rpr value     ), widths.value\n    R.push '\\n'\n    return null\n  #.........................................................................................................\n  push_error_row = ( error = null ) ->\n    return null unless error?\n    if error instanceof Error then  error_r = \" Error: #{error.message.trim()}\"\n    else                            error_r = \" Error: #{error.toString()}\"\n    R.push C.reverse C.error to_width error_r, widths.line\n    R.push '\\n'\n  #.........................................................................................................\n  switch cfg.format\n    #.......................................................................................................\n    when 'all', 'failing'\n      for hidx in [ first_hidx .. last_hidx ]\n        [ ref, level, hedge, value, r, ] = hub.state.hedgeresults[ hidx ]\n        push_value_row ref, level, hedge, value, r\n      #.....................................................................................................\n      if hub.state.hedgeresults.length > 1\n        push_value_row null, 0, hub.state.hedgerow, hub.state.x, hub.state.result\n      push_error_row hub.state.error\n    #.......................................................................................................\n    when 'short'\n      for hidx in [ first_hidx .. last_hidx ]\n        [ ref, level, hedge, value, r, ] = hub.state.hedgeresults[ hidx ]\n        value_r = rpr value\n        value_r = to_width value_r, 50 if ( width_of value_r ) > 50\n        R.push '' \\\n          + ( truth r                           ) \\\n          + ( verb_field                        ) \\\n          + ( C.reverse C.hedge \" #{hedge} \"    ) \\\n          + ( C.reverse C.value \" #{value_r} \"  )\n      sep = arrow_field\n    else throw new E.Intertype_internal_error '^intertype.get_state_report@2^', \"unknown format #{rpr format}\"\n  #.........................................................................................................\n  R = R.join sep\n  if ( cfg.format is 'short' ) and ( cfg.colors is false )\n    R = R.trim()\n    R = R.replace /\\x20{2,}/g, ' '\n  return R\n\n\n"
  ]
}