{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/helpers.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n#-----------------------------------------------------------------------------------------------------------\nGUY                       = require 'guy'\n{ debug\n  info\n  warn\n  urge\n  help }                  = GUY.trm.get_loggers 'INTERTYPE'\n{ rpr }                   = GUY.trm\nmisfit                    = Symbol 'misfit'\nnotavalue                 = Symbol 'notavalue'\nE                         = require './errors'\n{ to_width }              = require 'to-width'\n### TAINT unify with symbols in `hedges` ###\n@misfit                   = Symbol 'misfit'\n#...........................................................................................................\n@constructor_of_generators  = ( ( -> yield 42 )() ).constructor\n@deep_copy                  = structuredClone\n@equals                     = require '../deps/jkroso-equals'\n@nameit                     = ( name, f ) -> Object.defineProperty f, 'name', { value: name, }\n@TMP_HEDGRES_PRE            = false\n{ reverse: rvr\n  grey\n  red\n  green\n  blue\n  steel\n  yellow                  } = GUY.trm\n\n\n#===========================================================================================================\n# TYPE_OF FLAVORS\n#-----------------------------------------------------------------------------------------------------------\n@domenic_denicola_device  = ( x ) => x?.constructor?.name ? './.'\n@mark_miller_device       = ( x ) => ( Object::toString.call x ).slice 8, -1\n@mark_miller_device_2     = ( x ) => ( ( Object::toString.call x ).slice 8, -1 ).toLowerCase().replace /\\s+/g, ''\n@js_type_of               = ( x ) => Object::toString.call x\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@get_rprs_of_tprs = ( tprs ) ->\n  ### `tprs: test parameters, i.e. additional arguments to type tester, as in `multiple_of x, 4` ###\n  rpr_of_tprs = switch tprs.length\n    when 0 then ''\n    when 1 then \"#{rpr tprs[ 0 ]}\"\n    else \"#{rpr tprs}\"\n  srpr_of_tprs = switch rpr_of_tprs.length\n    when 0 then ''\n    else ' ' + rpr_of_tprs\n  return { rpr_of_tprs, srpr_of_tprs, }\n\n#-----------------------------------------------------------------------------------------------------------\n@intersection_of = ( a, b ) ->\n  a = [ a..., ].sort()\n  b = [ b..., ].sort()\n  return ( x for x in a when x in b ).sort()\n\n#---------------------------------------------------------------------------------------------------------\n@size_of = ( x, fallback = misfit ) ->\n  return R unless ( R = GUY.props.get x, 'length',  notavalue ) is notavalue\n  return R unless ( R = GUY.props.get x, 'size',    notavalue ) is notavalue\n  return fallback unless fallback is misfit\n  throw new E.Intertype_ETEMPTBD '^intertype.size_of@1^', \\\n    \"expected an object with `x.length` or `x.size`, got a #{@type_of x} with neither\"\n\n#---------------------------------------------------------------------------------------------------------\n@signals = GUY.lft.freeze new GUY.props.Strict_owner target:\n  return_true:            Symbol 'return_true'\n  advance:                Symbol 'advance'\n  # element_mode:           Symbol 'element_mode'\n  nothing:                Symbol 'nothing'\n\n#-----------------------------------------------------------------------------------------------------------\n@type_of = ( x ) ->\n  throw new Error \"^7746^ expected 1 argument, got #{arity}\" unless ( arity = arguments.length ) is 1\n  return 'null'       if x is null\n  return 'undefined'  if x is undefined\n  return 'infinity'   if ( x is Infinity  ) or  ( x is -Infinity  )\n  return 'boolean'    if ( x is true      ) or  ( x is false      )\n  return 'nan'        if ( Number.isNaN     x )\n  return 'float'      if ( Number.isFinite  x )\n  return 'buffer'     if ( Buffer.isBuffer  x )\n  return 'list'       if ( Array.isArray  x )\n  #.........................................................................................................\n  ### TAINT Not needed (?) b/c `@js_type_of x` does work with these values, too ###\n  ### this catches `Array Iterator`, `String Iterator`, `Map Iterator`, `Set Iterator`: ###\n  if ( tagname = x[ Symbol.toStringTag ] )? and ( typeof tagname ) is 'string'\n    return @_normalize_type tagname\n  #.........................................................................................................\n  ### Domenic Denicola Device, see https://stackoverflow.com/a/30560581 ###\n  return 'nullobject' if ( c = x.constructor ) is undefined\n  return 'object'     if ( typeof c ) isnt 'function'\n  if ( R = c.name.toLowerCase() ) is ''\n    return 'generator' if x.constructor is @constructor_of_generators\n    ### NOTE: throw error since this should never happen ###\n    return ( ( Object::toString.call x ).slice 8, -1 ).toLowerCase() ### Mark Miller Device ###\n  #.........................................................................................................\n  return 'wrapper'  if ( typeof x is 'object' ) and R in [ 'boolean', 'number', 'string', ]\n  return 'regex'    if R is 'regexp'\n  return 'text'     if R is 'string'\n  ### thx to https://stackoverflow.com/a/29094209 ###\n  ### TAINT may produce an arbitrarily long throwaway string ###\n  return 'class'    if R is 'function' and x.toString().startsWith 'class '\n  return R\n\n\n#===========================================================================================================\n# INTERNAL TYPES\n#-----------------------------------------------------------------------------------------------------------\n@types                    = new ( require 'intertype-legacy' ).Intertype()\n@defaults                 = {}\n\n#-----------------------------------------------------------------------------------------------------------\n@types.declare 'deep_boolean', ( x ) -> x in [ 'deep', false, true, ]\n\n#-----------------------------------------------------------------------------------------------------------\n@types.declare 'Type_cfg_constructor_cfg', tests:\n  \"@isa.object x\":                            ( x ) -> @isa.object x\n  \"@isa.nonempty_text x.name\":                ( x ) -> @isa.nonempty_text x.name\n  # \"@isa.deep_boolean x.copy\":                 ( x ) -> @isa.boolean x.copy\n  # \"@isa.boolean x.seal\":                      ( x ) -> @isa.boolean x.seal\n  \"@isa.deep_boolean x.freeze\":               ( x ) -> @isa.deep_boolean x.freeze\n  \"@isa.boolean x.extras\":                    ( x ) -> @isa.boolean x.extras\n  \"if extras is false, default must be an object\": \\\n    ( x ) -> ( x.extras ) or ( @isa.object x.default )\n  \"@isa_optional.function x.create\":          ( x ) -> @isa_optional.function x.create\n  ### TAINT might want to check for existence of `$`-prefixed keys in case of `( not x.test? )` ###\n  ### TAINT should validate values of `$`-prefixed keys are either function or non-empty strings ###\n  \"x.test is an optional function or non-empty list of functions\": ( x ) ->\n    return true unless x.test?\n    return true if @isa.function x.test\n    return false unless @isa_list_of.function x.test\n    return false if x.test.length is 0\n    return true\n  \"x.groups is deprecated\": ( x ) -> not x.groups?\n  \"@isa.boolean x.collection\": ( x ) -> @isa.boolean x.collection\n#...........................................................................................................\n@defaults.Type_cfg_constructor_cfg =\n  name:             null\n  test:             null\n  ### `default` omitted on purpose ###\n  create:           null\n  # copy:             false\n  # seal:             false\n  freeze:           false\n  extras:           true\n  collection:       false\n\n#-----------------------------------------------------------------------------------------------------------\n@types.declare 'Type_factory_type_dsc', tests:\n  #.........................................................................................................\n  ### for later / under consideration ###\n  # \"@isa.deep_boolean x.copy\":                       ( x ) -> @isa.boolean x.copy        # refers to result of `type.create()`\n  # \"@isa.boolean x.seal\":                            ( x ) -> @isa.boolean x.seal        # refers to result of `type.create()`\n  # \"@isa.boolean x.oneshot\":                         ( x ) -> @isa.boolean x.oneshot        # refers to result of `type.create()`\n  # \"@isa.deep_boolean x.freeze\":                     ( x ) -> @isa.deep_boolean x.freeze   # refers to result of `type.create()`\n  #.........................................................................................................\n  \"@isa.object x\":                                  ( x ) -> @isa.object x\n  \"@isa.nonempty_text x.name\":                      ( x ) -> @isa.nonempty_text x.name\n  \"@isa.nonempty_text x.typename\":                  ( x ) -> @isa.nonempty_text x.typename\n  \"@isa.boolean x.collection\":                      ( x ) -> @isa.boolean x.collection\n  \"@isa.function x.isa\":                            ( x ) -> @isa.function x.isa\n  \"@isa optional list.of.function x.fields\":        ( x ) ->\n    return true unless @isa.list x.fields\n    return @isa_list_of.function x.fields\n  \"@isa.boolean x.extras\":                          ( x ) -> @isa.boolean x.extras        # refers to result of `type.create()`\n  \"if extras is false, default must be an object\":  ( x ) -> ( x.extras ) or ( @isa.object x.default )\n  \"@isa_optional.function x.create\":                ( x ) -> @isa_optional.function x.create\n#...........................................................................................................\n@defaults.Type_factory_type_dsc =\n  name:             null\n  typename:         null\n  isa:              null\n  fields:           null\n  collection:       false\n  ### `default` omitted on purpose ###\n  create:           null      # refers to result of `type.create()`\n  # copy:             false     # refers to result of `type.create()`\n  # seal:             false     # refers to result of `type.create()`\n  freeze:           false     # refers to result of `type.create()`\n  extras:           true      # refers to result of `type.create()`\n\n#-----------------------------------------------------------------------------------------------------------\n@types.declare 'Intertype_iterable', ( x ) -> x? and x[ Symbol.iterator ]?\n\n#-----------------------------------------------------------------------------------------------------------\n@types.declare 'Intertype_constructor_cfg', tests:\n  \"@isa.object x\":                            ( x ) -> @isa.object x\n  \"@isa_optional.nonempty_text x.sep\":        ( x ) -> @isa_optional.nonempty_text x.sep\n  \"x.errors in [ false, 'throw', ]\":          ( x ) -> x.errors in [ false, 'throw', ]\n#...........................................................................................................\n@defaults.Intertype_constructor_cfg =\n  sep:              '.'\n  errors:           false\n\n#-----------------------------------------------------------------------------------------------------------\n@defaults.Intertype_state =\n  method:         null\n  verb:           null\n  isa_depth:      0\n  hedgerow:       null\n  hedges:         null\n  hedgeresults:   null\n  x:              misfit\n  result:         null\n  error:          null\n  extra_keys:     null\n  data:           null\n\n\n# #-----------------------------------------------------------------------------------------------------------\n# @types.declare 'Intertype_walk_hedgepaths_cfg', tests:\n#   \"@isa.object x\":                      ( x ) -> @isa.object x\n#   \"@isa_optional.nonempty_text x.sep\":  ( x ) -> @isa_optional.nonempty_text x.sep\n#   \"@isa_optional.function x.evaluate\":  ( x ) -> @isa_optional.function x.evaluate\n#   ### TAINT omitted other settings for `GUY.props.tree()` ###\n# #...........................................................................................................\n# @defaults.Intertype_walk_hedgepaths_cfg =\n#   sep:      @defaults.Intertype_constructor_cfg.sep\n#   evaluate: ({ owner, key, value, }) ->\n#     return 'take' if ( types.type_of value ) is 'function'\n#     return 'take' unless GUY.props.has_any_keys value\n#     return 'descend'\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nclass Intertype_abc extends GUY.props.Strict_owner\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n# @defaults       = GUY.lft.freeze @defaults\n@Intertype_abc  = Intertype_abc\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@get_state_report = ( hub ) ->\n  TTY   = require 'node:tty'\n  truth = ( b, r ) -> rvr if b then ( green \" T \" ) else ( red \" F \" )\n  R                 = []\n  widths            = do ->\n    lw              = if ( TTY.isatty process.stdout.fd ) then process.stdout.columns else 100\n    widths          = {}\n    widths.line     = lw\n    lw             -= widths.verb     = 10\n    lw             -= widths.truth    = 3\n    lw             -= widths.hedgerow = Math.floor lw * 0.50\n    lw             -= widths.value    = lw\n    return widths\n  verb_field        = blue rvr to_width hub.state.verb, widths.verb, { align: 'center', }\n  #.........................................................................................................\n  push_value_row    = ( ref, level, hedge, value, r ) ->\n    dent  = '  '.repeat level\n    R.push truth r, r?.toString()\n    R.push verb_field\n    R.push rvr yellow to_width  ( ' ' + dent + hedge  ), widths.hedgerow\n    R.push rvr steel  to_width  ( ' ' + rpr value     ), widths.value\n    R.push '\\n'\n    return null\n  #.........................................................................................................\n  push_error_row    = ( error = null ) ->\n    return null unless error?\n    if error instanceof Error then  error_r = \" Error: #{error.message.trim()}\"\n    else                            error_r = \" Error: #{error.toString()}\"\n    R.push red rvr to_width error_r, widths.line\n    R.push '\\n'\n  #.........................................................................................................\n  for [ ref, level, hedge, value, r, ] in hub.state.hedgeresults\n    push_value_row ref, level, hedge, value, r\n  #.........................................................................................................\n  if hub.state.hedgeresults.length > 1\n    push_value_row null, 0, hub.state.hedgerow, hub.state.x, hub.state.result\n  push_error_row hub.state.error\n  #.........................................................................................................\n  return R.join ''\n\n\n"
  ]
}